[{"path":"http://mingdeyu.github.io/dgpsi-R/dev/articles/dgpsi.html","id":"load-the-package","dir":"Articles","previous_headings":"","what":"Load the package","title":"A Quick Guide to dgpsi","text":"dgpsi R provides initialization function init_py() helps us set initialize required Python environment automatically. just need run init_py() every time package loaded initiate underlying Python environment.","code":"library(dgpsi) init_py() ## Connecting to Python ... done ## Importing required Python modules ... done ## The Python environment for 'dgpsi' is successfully loaded."},{"path":"http://mingdeyu.github.io/dgpsi-R/dev/articles/dgpsi.html","id":"set-up-the-step-function","dir":"Articles","previous_headings":"","what":"Set up the step function","title":"A Quick Guide to dgpsi","text":"first define step function: generate ten training data points:","code":"f <- function(x) {   if (x < 0.5) return(-1)   if (x >= 0.5) return(1) } X <- seq(0, 1, length = 10) Y <- sapply(X, f)"},{"path":"http://mingdeyu.github.io/dgpsi-R/dev/articles/dgpsi.html","id":"training","dir":"Articles","previous_headings":"","what":"Training","title":"A Quick Guide to dgpsi","text":"now build train DGP emulator three layers: progress bar displayed shows long takes finish training. able switch progress bar trace information setting verb = FALSE. Note want train DGP emulator m additional iterations, can simply m <- continue(m) instead rebuilding DGP emulator. trained DGP emulator can viewed using summary() function: summary table gives key information trained DGP emulator. Note auto-generated emulator nugget terms fixed 1e-6 GP nodes emulating deterministic step function (.e., like emulator interpolate training data points). prior scales (.e., variances) GP nodes first second layers fixed 1.0 GP node final layer estimated due attachment output. information change default settings construct train DGP emulator, see ?dgp. point, use write() save emulator m local file load using read() like make predictions emulator, e.g., another laptop also package installed.","code":"m <- dgp(X, Y, depth = 3) ## Auto-generating a 3-layered DGP structure ... done ## Initializing the DGP emulator ... done ## Training the DGP emulator:  ## Iteration 500: Layer 3: 100%|██████████| 500/500 [00:04<00:00, 123.37it/s] ## Imputing ... done summary(m) ## +-----------+----------+------------------+-----------------+---------------+-------------------+------------+-------------------+ ## | Layer No. | Node No. |       Type       | Length-scale(s) |   Variance    |      Nugget       | Input Dims | Global Connection | ## +-----------+----------+------------------+-----------------+---------------+-------------------+------------+-------------------+ ## |  Layer 1  |  Node 1  | GP (Squared-Exp) |     [0.285]     | 1.000 (fixed) | 1.000e-06 (fixed) |    [1]     |        No         | ## |  Layer 2  |  Node 1  | GP (Squared-Exp) |     [1.773]     | 1.000 (fixed) | 1.000e-06 (fixed) |    [1]     |        [1]        | ## |  Layer 3  |  Node 1  | GP (Squared-Exp) |     [2.339]     |     0.475     | 1.000e-06 (fixed) |    [1]     |        [1]        | ## +-----------+----------+------------------+-----------------+---------------+-------------------+------------+-------------------+ ## 1. 'Input Dims' presents the indices of GP nodes in the feeding layer whose outputs feed into the GP node referred by 'Layer No.' and 'Node No.'. ## 2. 'Global Connection' indicates the dimensions (i.e., column indices) of the global input data that are used as additional input dimensions to the GP node referred by 'Layer No.' and 'Node No.'."},{"path":"http://mingdeyu.github.io/dgpsi-R/dev/articles/dgpsi.html","id":"validation","dir":"Articles","previous_headings":"","what":"Validation","title":"A Quick Guide to dgpsi","text":"emulator, can validate drawing validation plots. two types validation plots provided package. first one Leave-One-(LOO) cross validation plot:  second validation plot --Sample (OOS) validation plot requires --sample testing data set. generate OOS data set contains 10 testing data points validation:","code":"plot(m) ## Initializing ... done ## Post-processing LOO results ... done ## Plotting ... done oos_x <- sample(seq(0, 1, length = 200),10) oos_y <- sapply(oos_x, f) plot(m,oos_x,oos_y) ## Initializing ... done ## Post-processing OOS results ... done ## Plotting ... done"},{"path":"http://mingdeyu.github.io/dgpsi-R/dev/articles/dgpsi.html","id":"prediction","dir":"Articles","previous_headings":"","what":"Prediction","title":"A Quick Guide to dgpsi","text":"validation done, can make predictions DGP emulator. generate 200 data points step function \\([0,1]\\) predictions: predict() function returns updated DGP emulator m contains slot named results gives posterior predictive means variances testing positions. can extract information plot emulation results check predictive performance constructed DGP emulator:","code":"test_x <- seq(0, 1, length = 200) test_y <- sapply(test_x, f) m <- predict(m, x = test_x) mu <- m$results$mean # extract the predictive means  sd <- sqrt(m$results$var) # extract the predictive variance and compute the predictive standard deviations # compute predictive bounds which are two predictive standard deviations above and below the predictive means up <- mu + 2*sd  lo <- mu - 2*sd  plot(test_x, mu, type = 'l', lty = 2, lwd = 1.5, col = 'black', xlab = 'x', cex.axis = 1.3, cex.lab = 1.3, ylab = 'y', ylim = c(-1.5,1.5))  # predictive means  polygon(c(test_x, rev(test_x)), c(up,rev(lo)), col = 'grey80', border = F) # credible interval lines(test_x, test_y, type = 'l', col = \"#D55E00\", lwd = 2) # Underlying truth lines(test_x, mu, type = 'l', lty = 2, lwd = 1.5, col = 'black') lines(X, Y, type = 'p', pch = 16, cex = 1, col = \"#0072B2\") # Training data points"},{"path":"http://mingdeyu.github.io/dgpsi-R/dev/articles/linked_DGP.html","id":"load-the-package","dir":"Articles","previous_headings":"","what":"Load the package","title":"Linked (D)GP Emulation","text":"","code":"library(dgpsi) init_py() ## Connecting to Python ... done ## Importing required Python modules ... done ## The Python environment for 'dgpsi' is successfully loaded."},{"path":"http://mingdeyu.github.io/dgpsi-R/dev/articles/linked_DGP.html","id":"construct-a-synthetic-system","dir":"Articles","previous_headings":"","what":"Construct a synthetic system","title":"Linked (D)GP Emulation","text":"consider following synthetic system  involves three models defined : generate 10 training data points Model 1 15 training data points Model 2 3:","code":"# Model 1 f1 <- function(x) {   (sin(7.5*x)+1)/2 } # Model 2 f2 <- function(x) {   2/3*sin(2*(2*x - 1))+4/3*exp(-30*(2*(2*x-1))^2)-1/3   } # Model 3 f3 <- function(x) {   x[1]*x[2]^2 } # Linked Model  f123 <- function(x) {   f3(c(f1(x),f2(f1(x)))) } # Training data for Model 1 X1 <- seq(0, 1, length = 10) Y1 <- sapply(X1, f1) # Training data for Model 2 X2 <- seq(0, 1, length = 15) Y2 <- sapply(X2, f2) # Training data for Model 3 X3 <- cbind(X2, Y2) Y3 <- apply(X3, f3, MARGIN = 1)"},{"path":"http://mingdeyu.github.io/dgpsi-R/dev/articles/linked_DGP.html","id":"emulation-of-model-1","dir":"Articles","previous_headings":"","what":"Emulation of Model 1","title":"Linked (D)GP Emulation","text":"construct train GP emulator Matérn-2.5 kernel: now validate trained GP emulator plot() LOO (alternatively, one can first use validate() store LOO results plotting plot()):  Since use m1 later linked emulation, must specify links emulators feeding layer linked_idx dgp(). Since m1 first layer system, linked_idx refers column indices global input X feed m1, therefore set linked_idx = c(1) dgp() first constructed emulator. Instead re-training emulator provide information, can simply use set_linked_idx() add information m1:","code":"m1 <- gp(X1, Y1, name = \"matern2.5\") ## Auto-generating a GP structure ... done ## Initializing the GP emulator ... done ## Training the GP emulator ... done plot(m1) ## Initializing ... done ## Post-processing LOO results ... done ## Plotting ... done m1 <- set_linked_idx(m1, c(1))"},{"path":"http://mingdeyu.github.io/dgpsi-R/dev/articles/linked_DGP.html","id":"emulation-of-model-2","dir":"Articles","previous_headings":"","what":"Emulation of Model 2","title":"Linked (D)GP Emulation","text":"construct two-layered DGP emulator Matérn-2.5 kernels emulate Model 2: Since outputs emulators first layer m1 m2 uses output m1 input, set linked_idx = c(1) dgp() . following plot visualizes LOO trained DGP emulator m2:","code":"m2 <- dgp(X2, Y2, depth = 2, name = \"matern2.5\", linked_idx = c(1)) ## Auto-generating a 2-layered DGP structure ... done ## Initializing the DGP emulator ... done ## Training the DGP emulator: ## Iteration 500: Layer 2: 100%|██████████| 500/500 [00:02<00:00, 232.30it/s] ## Imputing ... done plot(m2) Initializing ... done Post-processing LOO results ... done Plotting ... done"},{"path":"http://mingdeyu.github.io/dgpsi-R/dev/articles/linked_DGP.html","id":"emulation-of-model-3","dir":"Articles","previous_headings":"","what":"Emulation of Model 3","title":"Linked (D)GP Emulation","text":"now construct three-layered DGP emulator Matérn-2.5 kernels emulate Model 3: Since m3 takes outputs m1 layer 1 m2 layer 2, set linked_idx = list( c(1), c(1) ). first vector list says output dimension 1 emulators (.e., m1) first layer feeds m3 second vector list says output dimension 1 emulators (.e., m2) second layer feeds m3. Note dimensions X3 ordered consistent linked_idx, .e., first second columns X3 correspond output m1 m2 respectively. following plot visualizes LOO trained DGP emulator m3:","code":"m3 <- dgp( X3, Y3, depth = 3, name = \"matern2.5\", linked_idx = list( c(1), c(1) ) ) ## Auto-generating a 3-layered DGP structure ... done ## Initializing the DGP emulator ... done ## Training the DGP emulator: ## Iteration 500: Layer 3: 100%|██████████| 500/500 [00:06<00:00, 72.56it/s] ## Imputing ... done plot(m3) Initializing ... done Post-processing LOO results ... done Plotting ... done"},{"path":"http://mingdeyu.github.io/dgpsi-R/dev/articles/linked_DGP.html","id":"emulation-of-linked-model","dir":"Articles","previous_headings":"","what":"Emulation of Linked Model","title":"Linked (D)GP Emulation","text":"GP emulator m1 (Model 1), DGP emulator m2 (Model 2), DGP emulator m3 (Model 3) hand, now ready build linked emulator first using combine() construct system hierarchy struc applying lgp() linked emulator. Note layer emulator system represented list. case, layer contains single emulator. Therefore, need put corresponding emulator list using list(). can check relations emulators different layers applying summary() m_link: comparison, construct GP emulator whole system generating 15 training data points Model 1 Model 2: Finally, make predictions GP emulator linked emulator 300 testing data points \\([0,1]\\): plot predictions compare emulation performances: can seen plots linked emulator outperforms GP emulator significantly better mean predictions predictive uncertainties. real-life applications, rarely able generate many testing data points underlying computer simulators evaluate emulators whole input space. However, still able retain available realizations computer simulators linked emulator validation. Say able afford 20 runs linked computer system: , can conduct OOS validations GP emulator:  linked emulator: show linked emulator outperforms GP emulator significantly better predictive accuracy lower NRMSE.","code":"struc <- combine(list(m1), list(m2), list(m3)) m_link <- lgp(struc) summary(m_link) ## +-----------+--------------+------+----------------------------+-----------------+ ## | Layer No. | Emulator No. | Type |         Connection         | External Inputs | ## +-----------+--------------+------+----------------------------+-----------------+ ## |  Layer 1  |    Emu 1     |  GP  |     Global input: [1]      |       No        | ## |  Layer 2  |    Emu 1     | DGP  | Emu 1 in Layer 1: output 1 |       No        | ## |  Layer 3  |    Emu 1     | DGP  | Emu 1 in Layer 1: output 1 |       No        | ## |           |              |      | Emu 1 in Layer 2: output 1 |                 | ## +-----------+--------------+------+----------------------------+-----------------+ ## 1. 'Connection' gives the indices of emulators and the associated output dimensions that are linked to the emulator referred by 'Layer No.' and 'Emulator No.'. ## 2. 'External Inputs' indicates if the emulator (referred by 'Layer No.' and 'Emulator No.') has external inputs that are not provided by the feeding emulators. X_gp <- seq(0, 1, length = 15) Y_gp <- sapply(X_gp, f123) m_gp <- gp(X_gp, Y_gp, name = 'matern2.5') ## Auto-generating a GP structure ... done ## Initializing the GP emulator ... done ## Training the GP emulator ... done # Testing input test_x <- seq(0, 1, length = 300) # Testing output test_y <- sapply(test_x, f123) # linked emulator m_link <- predict(m_link, x = test_x) # GP emulator m_gp <- predict(m_gp, x = test_x) # extract predictive means and variances from the linked emulator mu <- m_link$results$mean$emulator1 sd <- sqrt(m_link$results$var$emulator1) up <- mu + 2*sd lo <- mu - 2*sd  # extract predictive means and variances from the GP emulator mu_gp <- m_gp$results$mean sd_gp <- sqrt(m_gp$results$var) up_gp <- mu_gp + 2*sd_gp lo_gp <- mu_gp - 2*sd_gp  par(cex=0.7, mar = c(5, 5, 0.9, 0.9)+0.2) # GP emulator par(fig = c(0, 0.5, 0.2, 0.8)) plot(test_x, mu_gp, type = 'l', lty = 2, lwd = 1.5, col = 'black', main = \"GP Emulator\", xlab = 'x1', ylab = 'y3', ylim=c(-0.1,0.65)) polygon(c(test_x, rev(test_x)), c(up_gp, rev(lo_gp)), col = 'grey80', border = F) lines(test_x, test_y, type = 'l', col = \"#D55E00\", lwd = 2)  lines(test_x, mu_gp, type = 'l', lty = 2, lwd = 1.5, col = 'black') # linked emulator par(fig = c(0.5, 1, 0.2, 0.8), new = TRUE) plot(test_x, mu, type = 'l', lty = 2, lwd = 1.5, col = 'black', main = \"Linked Emulator\", xlab = 'x1', ylab = 'y3', ylim=c(-0.1,0.65)) polygon(c(test_x, rev(test_x)), c(up, rev(lo)), col = 'grey80', border = F) lines(test_x, test_y, type = 'l', col = \"#D55E00\", lwd = 2)  lines(test_x, mu, type = 'l', lty = 2, lwd = 1.5, col = 'black') # OOS testing input test_x_oos <- sample(seq(0, 1, length = 300), 20) # OOS testing output test_y_oos <- sapply(test_x_oos, f123) plot(m_gp, test_x_oos, test_y_oos, style = 2) ## Initializing ... done ## Post-processing OOS results ... done ## Plotting ... done plot(m_link, test_x_oos, test_y_oos, style = 2) ## Initializing ... done ## Post-processing OOS results ... done ## Plotting ... done"},{"path":"http://mingdeyu.github.io/dgpsi-R/dev/articles/motorcycle.html","id":"load-packages-and-data","dir":"Articles","previous_headings":"","what":"Load packages and data","title":"DGP Emulation with the Heteroskedastic Gaussian Likelihood\n","text":"start first loading packages setting required Python environment via init_py() init_py() provides automatic Python environment setup initialization routine must run every time package loaded. now load training data points, scale , plot :  constructing emulator, first split training data set testing data set:","code":"library(dgpsi) library(MASS) library(patchwork) init_py() ## Connecting to Python ... done ## Importing required Python modules ... done ## The Python environment for 'dgpsi' is successfully loaded. X <- mcycle$times Y <- mcycle$accel X <- (X - min(X))/(max(X)-min(X)) Y <- scale(Y, center = TRUE, scale = TRUE) plot(X, Y, pch = 16, cex = 1, xlab = 'Time', ylab = 'Acceleration', cex.axis = 1.3, cex.lab = 1.3) test_idx <- sample(seq_len(length(X)), size = 20)  train_X <- X[-test_idx] train_Y <- Y[-test_idx,] test_x <- X[test_idx] test_y <- Y[test_idx,]"},{"path":"http://mingdeyu.github.io/dgpsi-R/dev/articles/motorcycle.html","id":"construct-and-train-a-dgp-emulator","dir":"Articles","previous_headings":"","what":"Construct and train a DGP emulator","title":"DGP Emulation with the Heteroskedastic Gaussian Likelihood\n","text":"consider three-layered DGP emulator squared exponential kernels: choose heteroskedastic Gaussian likelihood setting likelihood = \"Hetero\" since data drawn plot show varying noises. lengthscale set c(0.5, 0.2) 0.5 initial lengthscale value kernel functions GP nodes first layer 0.2 initial lengthscale value kernel functions GP nodes second layer. set training = FALSE dgp() constructs DGP structure can use summary() check specifications DGP emulator correct proceeding training: DGP emulator, can use continue() invoke training constructed m_dgp instead re-building everything scratch re-running dgp(): comparison, also build GP emulator (gp()) incorporates homogeneous noises setting nugget_est = T initial nugget value \\(0.01\\). set training FALSE can use summary() check generated GP structure training: now train GP emulator re-running function training = TRUE, default setting: validate constructed emulators, can summarize trained DGP emulator: GP emulator:","code":"m_dgp <- dgp(train_X, train_Y, depth = 3, lengthscale = c(0.5, 0.2), likelihood = \"Hetero\", training = FALSE) ## Auto-generating a 3-layered DGP structure ... done ## Initializing the DGP emulator ... done ## Imputing ... done summary(m_dgp) ## +-----------+----------+---------------------+-----------------+---------------+-------------------+------------+-------------------+ ## | Layer No. | Node No. |        Type         | Length-scale(s) |   Variance    |      Nugget       | Input Dims | Global Connection | ## +-----------+----------+---------------------+-----------------+---------------+-------------------+------------+-------------------+ ## |  Layer 1  |  Node 1  |  GP (Squared-Exp)   |     [0.500]     | 1.000 (fixed) | 1.000e-06 (fixed) |    [1]     |        No         | ## |  Layer 2  |  Node 1  |  GP (Squared-Exp)   |     [0.200]     |     1.000     | 1.000e-06 (fixed) |    [1]     |        [1]        | ## |  Layer 2  |  Node 2  |  GP (Squared-Exp)   |     [0.200]     |     1.000     | 1.000e-06 (fixed) |    [1]     |        [1]        | ## |  Layer 3  |  Node 1  | Likelihood (Hetero) |       NA        |      NA       |        NA         |   [1, 2]   |        NA         | ## +-----------+----------+---------------------+-----------------+---------------+-------------------+------------+-------------------+ ## 1. 'Input Dims' presents the indices of GP nodes in the feeding layer whose outputs feed into the GP node referred by 'Layer No.' and 'Node No.'. ## 2. 'Global Connection' indicates the dimensions (i.e., column indices) of the global input data that are used as additional input dimensions to the GP node referred by 'Layer No.' and 'Node No.'. m_dgp <- continue(m_dgp) ## Continue the training: ## Iteration 500: Layer 3: 100%|██████████| 500/500 [00:18<00:00, 27.49it/s] ## Imputing ... done m_gp <- gp(train_X, train_Y, nugget_est = T, nugget = 1e-2, training = FALSE) summary(m_gp) ## Auto-generating a GP structure ... done ## Initializing the GP emulator ... done ## +-------------+-----------------+----------+--------+------------+ ## | Kernel Fun  | Length-scale(s) | Variance | Nugget | Input Dims | ## +-------------+-----------------+----------+--------+------------+ ## | Squared-Exp |     [0.200]     |  1.000   | 0.010  |    [1]     | ## +-------------+-----------------+----------+--------+------------+ ## 'Input Dims' indicates the dimensions (i.e., column indices) of your input data that are used for GP emulator training. m_gp <- gp(train_X, train_Y, nugget_est = T, nugget = 1e-2) ## Auto-generating a GP structure ... done ## Initializing the GP emulator ... done ## Training the GP emulator ... done summary(m_dgp) ## +-----------+----------+---------------------+-----------------+---------------+-------------------+------------+-------------------+ ## | Layer No. | Node No. |        Type         | Length-scale(s) |   Variance    |      Nugget       | Input Dims | Global Connection | ## +-----------+----------+---------------------+-----------------+---------------+-------------------+------------+-------------------+ ## |  Layer 1  |  Node 1  |  GP (Squared-Exp)   |     [0.683]     | 1.000 (fixed) | 1.000e-06 (fixed) |    [1]     |        No         | ## |  Layer 2  |  Node 1  |  GP (Squared-Exp)   |     [0.905]     |     0.833     | 1.000e-06 (fixed) |    [1]     |        [1]        | ## |  Layer 2  |  Node 2  |  GP (Squared-Exp)   |     [1.962]     |    26.665     | 1.000e-06 (fixed) |    [1]     |        [1]        | ## |  Layer 3  |  Node 1  | Likelihood (Hetero) |       NA        |      NA       |        NA         |   [1, 2]   |        NA         | ## +-----------+----------+---------------------+-----------------+---------------+-------------------+------------+-------------------+ ## 1. 'Input Dims' presents the indices of GP nodes in the feeding layer whose outputs feed into the GP node referred by 'Layer No.' and 'Node No.'. ## 2. 'Global Connection' indicates the dimensions (i.e., column indices) of the global input data that are used as additional input dimensions to the GP node referred by 'Layer No.' and 'Node No.'. summary(m_gp) ## +-------------+-----------------+----------+--------+------------+ ## | Kernel Fun  | Length-scale(s) | Variance | Nugget | Input Dims | ## +-------------+-----------------+----------+--------+------------+ ## | Squared-Exp |     [0.127]     |  0.728   | 0.321  |    [1]     | ## +-------------+-----------------+----------+--------+------------+ ## 'Input Dims' indicates the dimensions (i.e., column indices) of your input data that are used for GP emulator training."},{"path":"http://mingdeyu.github.io/dgpsi-R/dev/articles/motorcycle.html","id":"validation","dir":"Articles","previous_headings":"","what":"Validation","title":"DGP Emulation with the Heteroskedastic Gaussian Likelihood\n","text":"now ready validate emulators via validate() 20 --sample testing positions generated earlier: Note using validate() plotting can saving computations involved plot() validate() stores validation results emulator objects. Finally, plot OOS validations GP emulator:  DGP emulator:  Note still need provide test_x test_y plot() even already provided validate(). Otherwise, plot() draw LOO cross validation plot. visualizations show DGP emulator gives better performance GP emulator modeling heteroskedastic noises embedded underlying data set, even though quite similar NRMSEs.","code":"m_dgp <- validate(m_dgp, test_x, test_y) ## Initializing the OOS ... done ## Calculating the OOS ... done ## Saving results to the slot 'oos' in the dgp object ... done m_gp <- validate(m_gp, test_x, test_y) ## Initializing the OOS ... done ## Calculating the OOS ... done ## Saving results to the slot 'oos' in the gp object ... done plot(m_gp, test_x, test_y) ## Initializing ... done ## Post-processing OOS results ... done ## Plotting ... done plot(m_dgp, test_x, test_y) ## Initializing ... done ## Post-processing OOS results ... done ## Plotting ... done"},{"path":[]},{"path":"http://mingdeyu.github.io/dgpsi-R/dev/articles/seq_design.html","id":"load-the-packages","dir":"Articles","previous_headings":"","what":"Load the packages","title":"Sequential Design I","text":"","code":"library(tidyverse) library(lhs) library(ggplot2) library(dgpsi) init_py() ## Connecting to Python ... done ## Importing required Python modules ... done ## The Python environment for 'dgpsi' is successfully loaded."},{"path":"http://mingdeyu.github.io/dgpsi-R/dev/articles/seq_design.html","id":"construct-a-synthetic-simulator","dir":"Articles","previous_headings":"","what":"Construct a synthetic simulator","title":"Sequential Design I","text":"consider non-stationary synthetic simulator 2-dimensional input functional form (Ba Joseph 2018) defined : Note provide simulator sequential design , defined function input x output matrices. commands generate contour function:  can see figure synthetic simulator exhibits fluctuations bottom left input space top-right part simulator shows little variations. now generate initial design 5 design points using maximin Latin hypercube sampler: track qualities constructed emulators sequential design, generate validation dataset:","code":"f <- function(x) {  sin(1/((0.7*x[,1,drop=F]+0.3)*(0.7*x[,2,drop=F]+0.3)))  } x1 <- seq(0, 1, length.out = 100) x2 <- seq(0, 1, length.out = 100) dat <- expand_grid(x1 = x1, x2 = x2) dat <- mutate(dat, f = f(cbind(x1, x2))) ggplot(dat, aes(x1, x2, fill = f)) + geom_tile() +    scale_fill_continuous(type = \"viridis\") X <- maximinLHS(5,2) Y <- f(X) validate_x <- maximinLHS(200,2) validate_y <- f(validate_x)"},{"path":"http://mingdeyu.github.io/dgpsi-R/dev/articles/seq_design.html","id":"dgp-emulation-with-sequential-designs","dir":"Articles","previous_headings":"","what":"DGP emulation with sequential designs","title":"Sequential Design I","text":"start sequential design, initialize two-layered DGP emulator using generated initial design: specify boundaries input parameters f sequential design locate design points added: boundaries input parameters defined matrix row giving lower upper limits input parameter. boundaries specified, ready conduct sequential design adaptively improve emulator m via design(). function design() provides simple flexible implementation sequential designs DGP emulators. vignette, demonstrate basic usage refer users ?design advanced specifications, e.g., checkpoints manually control design progress schedules re-fit validate emulators. illustrative purpose, implement three waves sequential designs m: sequential design done, can inspect enriched design applying draw() m: can seen figure added design points concentrate bottom-left corner input space simulator f exhibits variations thus needs data well-emulated. can also visualize changes qualities (terms RMSEs wrt validation dataset) emulators constructed three waves sequential designs:","code":"m <- dgp(X, Y) ## Auto-generating a 2-layered DGP structure ... done ## Initializing the DGP emulator ... done ## Training the DGP emulator:  ## Iteration 500: Layer 2: 100%|██████████| 500/500 [00:01<00:00, 257.04it/s] ## Imputing ... done lim_1 <- c(0, 1) lim_2 <- c(0, 1) lim <- rbind(lim_1, lim_2) # 1st wave with 15 steps m <- design(m, N=15, limits = lim, f = f, x_test = validate_x, y_test = validate_y) ## Initializing ... done ##  * RMSE: 0.713616 ## Iteration 1: ##  - Locating ... done ##  * Next design point: 0.583678 0.010377 ##  - Updating and re-fitting ... done ##  - Validating ... done ##  * RMSE: 0.698092 ##  ## ... ##  ## Iteration 15: ##  - Locating ... done ##  * Next design point: 0.338114 0.062508 ##  - Updating and re-fitting ... done ##  - Validating ... done ##  * RMSE: 0.093493 # 2nd wave with 10 steps m <- design(m, N=10, limits = lim, f = f, x_test = validate_x, y_test = validate_y) ## Initializing ... done ##  * RMSE: 0.093493 ## Iteration 1: ##  - Locating ... done ##  * Next design point: 0.616983 0.144902 ##  - Updating and re-fitting ... done ##  - Validating ... done ##  * RMSE: 0.073895 ##    ##  ... ##   ## Iteration 10: ##  - Locating ... done ##  * Next design point: 0.002427 0.388461 ##  - Updating and re-fitting ... done ##  - Validating ... done ##  * RMSE: 0.015002 # 3rd wave with 10 steps m <- design(m, N=10, limits = lim, f = f, x_test = validate_x, y_test = validate_y) ## Initializing ... done ##  * RMSE: 0.015002 ## Iteration 1: ##  - Locating ... done ##  * Next design point: 0.405092 0.593121 ##  - Updating and re-fitting ... done ##  - Validating ... done ##  * RMSE: 0.008219 ##   ##  ... ##   ## Iteration 10: ##  - Locating ... done ##  * Next design point: 0.061111 0.002298 ##  - Updating and re-fitting ... done ##  - Validating ... done ##  * RMSE: 0.009890 draw(m, 'design') draw(m, 'rmse')"},{"path":"http://mingdeyu.github.io/dgpsi-R/dev/articles/seq_design.html","id":"comparison-to-dgp-emulators-with-space-filling-designs","dir":"Articles","previous_headings":"","what":"Comparison to DGP emulators with space-filling designs","title":"Sequential Design I","text":"build four DGP emulators static space-filling Latin hypercube designs (LHD) size 10, 20, 30, 40 respectively: extract RMSEs add sequential design validation plot (log-scale) comparisons:  can seen plot static space-filling designs, quality emulator may improved design size increases. increasing size space-filling design may capture regions simulator exhibits variations, thus cause DGP emulators higher RMSEs constructed sequential design.","code":"# DGP emulator with a LHD of size 10 X1 <- maximinLHS(10,2) Y1 <- f(X1) m1 <- dgp(X1, Y1, verb = F) # DGP emulator with a LHD of size 20 X2 <- maximinLHS(20,2) Y2 <- f(X2) m2 <- dgp(X2, Y2, verb = F) # DGP emulator with a LHD of size 30 X3 <- maximinLHS(30,2) Y3 <- f(X3) m3 <- dgp(X3, Y3, verb = F) # DGP emulator with a LHD of size 40 X4 <- maximinLHS(40,2) Y4 <- f(X4) m4 <- dgp(X4, Y4, verb = F) # validation of the DGP emulator with the LHD of size 10 m1 <- validate(m1, x_test = validate_x, y_test = validate_y, verb = F) rmse1 <- m1$oos$rmse # validation of the DGP emulator with the LHD of size 20 m2 <- validate(m2, x_test = validate_x, y_test = validate_y, verb = F) rmse2 <- m2$oos$rmse # validation of the DGP emulator with the LHD of size 30 m3 <- validate(m3, x_test = validate_x, y_test = validate_y, verb = F) rmse3 <- m3$oos$rmse # validation of the DGP emulator with the LHD of size 40 m4 <- validate(m4, x_test = validate_x, y_test = validate_y, verb = F) rmse4 <- m4$oos$rmse # create a dataframe that stores the RMSEs of the four DGP emulators rmse_static <- data.frame('N' = c(10, 20, 30, 40), 'rmse' = c(rmse1, rmse2, rmse3, rmse4), 'design' = c('lhd-10', 'lhd-20', 'lhd-30', 'lhd-40')) draw(m, 'rmse', log = T) +    geom_point(data = rmse_static, mapping = aes(x = N, y = rmse, group = design, shape = design), color = '#E69F00', size = 1.5) +   scale_shape_manual(values = c(2, 3, 4, 8))"},{"path":"http://mingdeyu.github.io/dgpsi-R/dev/articles/seq_design.html","id":"see-also","dir":"Articles","previous_headings":"Comparison to DGP emulators with space-filling designs","what":"See also","title":"Sequential Design I","text":"See Sequential Design II sequential design bundle DGP emulators automatic terminations.","code":""},{"path":[]},{"path":"http://mingdeyu.github.io/dgpsi-R/dev/articles/seq_design_2.html","id":"load-the-packages","dir":"Articles","previous_headings":"","what":"Load the packages","title":"Sequential Design II","text":"","code":"library(lhs) library(ggplot2) library(patchwork) library(dgpsi) init_py() ## Connecting to Python ... done ## Importing required Python modules ... done ## The Python environment for 'dgpsi' is successfully loaded."},{"path":"http://mingdeyu.github.io/dgpsi-R/dev/articles/seq_design_2.html","id":"construct-a-synthetic-simulator","dir":"Articles","previous_headings":"","what":"Construct a synthetic simulator","title":"Sequential Design II","text":"construct synthetic simulator one-dimensional input [0, 1] three-dimensional output. Note function defined way input x output matrices. following figure shows true functional forms three outputs simulator [0, 1]:  now generate initial design 5 design points using maximin Latin hypercube sampler: generate validation dataset track stop sequential design:","code":"f <- function(x) {   y1 = sin(30*((2*x-1)/2-0.4)^5)*cos(20*((2*x-1)/2-0.4))   y2 = 1/3*sin(2*(2*x - 1))+2/3*exp(-30*(2*(2*x-1))^2)+1/3   y3 = (sin(7.5*x)+1)/2   return(cbind(y1, y2, y3)) } dense_x <- seq(0, 1, length = 200) dense_y <- f(dense_x) output1 <- data.frame('x' = dense_x, 'y' = dense_y[,1]) output2 <- data.frame('x' = dense_x, 'y' = dense_y[,2]) output3 <- data.frame('x' = dense_x, 'y' = dense_y[,3]) p1 <- ggplot(data = output1, aes(x = x, y = y)) + geom_line(color = 'dodgerblue2') + ggtitle('Output 1') + theme(plot.title = element_text(size = 10)) p2 <- ggplot(data = output2, aes(x = x, y = y)) + geom_line(color = '#E31A1C') + ggtitle('Output 2') + theme(plot.title = element_text(size = 10)) p3 <- ggplot(data = output3, aes(x = x, y = y)) + geom_line(color = 'green4') + ggtitle('Output 3') + theme(plot.title = element_text(size = 10)) wrap_plots(list(p1, p2, p3)) + plot_annotation(title = 'Synthetic Simulator') X <- maximinLHS(5, 1) Y <- f(X) validate_x <- maximinLHS(200, 1) validate_y <- f(validate_x)"},{"path":"http://mingdeyu.github.io/dgpsi-R/dev/articles/seq_design_2.html","id":"construct-a-bundle-of-dgp-emulators","dir":"Articles","previous_headings":"","what":"Construct a bundle of DGP emulators","title":"Sequential Design II","text":"start sequential design, build three DGP emulators emulate three outputs simulator f independently: Note global connection turned first two DGP emulators found yields better emulation performances. build bundle three DGP emulators using pack():","code":"m1 <- dgp(X, Y[,1], connect = F) ## Auto-generating a 2-layered DGP structure ... done ## Initializing the DGP emulator ... done ## Training the DGP emulator:  ## Iteration 500: Layer 2: 100%|██████████| 500/500 [00:01<00:00, 274.42it/s] ## Imputing ... done m2 <- dgp(X, Y[,2], connect = F) ## Auto-generating a 2-layered DGP structure ... done ## Initializing the DGP emulator ... done ## Training the DGP emulator:  ## Iteration 500: Layer 2: 100%|██████████| 500/500 [00:01<00:00, 262.53it/s] ## Imputing ... done m3 <- dgp(X, Y[,3]) ## Auto-generating a 2-layered DGP structure ... done ## Initializing the DGP emulator ... done ## Training the DGP emulator:  ## Iteration 500: Layer 2: 100%|██████████| 500/500 [00:01<00:00, 276.28it/s] ## Imputing ... done m <- pack(m1, m2, m3)"},{"path":"http://mingdeyu.github.io/dgpsi-R/dev/articles/seq_design_2.html","id":"sequential-designs-of-the-bundle-emulator","dir":"Articles","previous_headings":"","what":"Sequential designs of the bundle emulator","title":"Sequential Design II","text":"start sequential design, specify limit input: set target RMSE stop sequential design: choose 0.01 equivalent 1% normalized error given ranges outputs [0,1]. can course set different targets different outputs, e.g., setting target <- c(0.005, 0.02, 0.01). start first-wave sequential design 10 steps: can seen second step, DGP emulator third output already reached target, rest steps refinements (.e., additions design points third DGP emulator) performed. end first wave, DGP emulators first second outputs reached target yet. point, can proceed second wave repeating command , show alternative way, define aggregation function aggregates criterion scores across three outputs design points added three emulators step (instead different design points emulator). define aggregation function g aggregate scores calculating weighted average: Since third emulator already reached target, assign zero weight . second emulator much closer target first one first wave, assign larger weight first emulator: now pass aggregate function g() weight argument design() second wave sequential design 15 steps: second emulator reached target step 6 refinements performed. first emulator finally reached target step 8 second wave. sequential designs three emulators can plotted draw():  figure shows first emulator design points added 0.5 whilst second emulator design points concentrate around 0.5. third emulator, resulting design space-filling. can seen design point distributions consistent functional complexities three outputs.","code":"lim <- c(0, 1) target <- 0.01 # 1st wave of the sequential design with 10 steps m <- design(m, N = 10, limits = lim, f = f, x_test = validate_x, y_test = validate_y, target = target) ## Initializing ... done ##  * RMSE: 0.385266 0.243889 0.067941 ## Iteration 1: ##  - Locating ... done ##  * Next design point (Emulator1): 0.002366 ##  * Next design point (Emulator2): 0.002366 ##  * Next design point (Emulator3): 0.002366 ##  - Updating and re-fitting ... done ##  - Validating ... done ##  * RMSE: 0.439944 0.221835 0.071280 ## Iteration 2: ##  - Locating ... done ##  * Next design point (Emulator1): 0.628569 ##  * Next design point (Emulator2): 0.631532 ##  * Next design point (Emulator3): 0.995940 ##  - Updating and re-fitting ... done ##  - Validating ... done ##  * RMSE: 0.395738 0.129002 0.008318 ##   ##  ... ##   ## Iteration 10: ##  - Locating ... done ##  * Next design point (Emulator1): 0.219642 ##  * Next design point (Emulator2): 0.839753 ##  * Next design point (Emulator3): None (target reached) ##  - Updating and re-fitting ... done ##  - Validating ... done ##  * RMSE: 0.129432 0.018298 0.008318 ## Targets are not reached for all emulators at the end of the sequential design. g <- function(x, weight){   x[,1] <- x[,1]*weight[1]   x[,2] <- x[,2]*weight[2]   x[,3] <- x[,3]*weight[3]   return(rowSums(x)) } weight <- c(0.8, 0.2, 0) # 2nd wave with 10 steps m <- design(m, N = 15, limits = lim, f = f, x_test = validate_x, y_test = validate_y, aggregate = g, target = 0.01, weight = weight) ## Initializing ... done ##  * RMSE: 0.129432 0.018298 0.008318 ## Iteration 1: ##  - Locating ... done ##  * Next design point: 0.352218 ##  - Updating and re-fitting ... done ##  - Validating ... done ##  * RMSE: 0.116559 0.012756 0.008318 ##   ##  ... ##  ## Iteration 5: ##  - Locating ... done ##  * Next design point: 0.123698 ##  - Updating and re-fitting ... done ##  - Validating ... done ##  * RMSE: 0.019050 0.010625 0.008318 ## Iteration 6: ##  - Locating ... done ##  * Next design point: 0.281299 ##  - Updating and re-fitting ... done ##  - Validating ... done ##  * RMSE: 0.013004 0.005781 0.008318 ##   ##  ...  ##   ## Iteration 8: ##  - Locating ... done ##  * Next design point: 0.164019 ##  - Updating and re-fitting ... done ##  - Validating ... done ##  * RMSE: 0.007637 0.005781 0.008318 ## Target reached! The sequential design stops at step 8. draw(m, 1, 'design') + draw(m, 2, 'design') + draw(m, 3, 'design') +   plot_layout() & theme(legend.position = 'bottom')"},{"path":"http://mingdeyu.github.io/dgpsi-R/dev/articles/seq_design_2.html","id":"comparison-to-dgp-emulators-with-space-filling-designs","dir":"Articles","previous_headings":"","what":"Comparison to DGP emulators with space-filling designs","title":"Sequential Design II","text":"build three independent DGP emulators three outputs static space-filling Latin hypercube designs (LHD) size 10, 20, 30 respectively: extract RMSEs add sequential design validation plot (log-scale) comparisons:  can seen plot sequential design, emulators bundle can achieve higher similar accuracy smaller number design points.","code":"# DGP emulators with a LHD of size 10 X1 <- maximinLHS(10, 1) Y1 <- f(X1) m11 <- dgp(X1, Y1[,1], connect = F, verb = F) m12 <- dgp(X1, Y1[,2], connect = F, verb = F) m13 <- dgp(X1, Y1[,3], verb = F) # DGP emulator with a LHD of size 20 X2 <- maximinLHS(20, 1) Y2 <- f(X2) m21 <- dgp(X2, Y2[,1], connect = F, verb = F) m22 <- dgp(X2, Y2[,2], connect = F, verb = F) m23 <- dgp(X2, Y2[,3], verb = F) # DGP emulator with a LHD of size 30 X3 <- maximinLHS(30, 1) Y3 <- f(X3) m31 <- dgp(X3, Y3[,1], connect = F, verb = F) m32 <- dgp(X3, Y3[,2], connect = F, verb = F) m33 <- dgp(X3, Y3[,3], verb = F) # validations of the first DGP emulator m11 <- validate(m11, x_test = validate_x, y_test = validate_y[,1], verb = F) m21 <- validate(m21, x_test = validate_x, y_test = validate_y[,1], verb = F) m31 <- validate(m31, x_test = validate_x, y_test = validate_y[,1], verb = F) rmse_static_1 <- data.frame('N' = c(10, 20, 30), 'rmse' = c(m11$oos$rmse, m21$oos$rmse, m31$oos$rmse), 'design' = c('lhd-10', 'lhd-20', 'lhd-30')) # validations of the second DGP emulator m12 <- validate(m12, x_test = validate_x, y_test = validate_y[,2], verb = F) m22 <- validate(m22, x_test = validate_x, y_test = validate_y[,2], verb = F) m32 <- validate(m32, x_test = validate_x, y_test = validate_y[,2], verb = F) rmse_static_2 <- data.frame('N' = c(10, 20, 30), 'rmse' = c(m12$oos$rmse, m22$oos$rmse, m32$oos$rmse), 'design' = c('lhd-10', 'lhd-20', 'lhd-30')) # # validations of the third DGP emulator m13 <- validate(m13, x_test = validate_x, y_test = validate_y[,3], verb = F) m23 <- validate(m23, x_test = validate_x, y_test = validate_y[,3], verb = F) m33 <- validate(m33, x_test = validate_x, y_test = validate_y[,3], verb = F) rmse_static_3 <- data.frame('N' = c(10, 20, 30), 'rmse' = c(m13$oos$rmse, m23$oos$rmse, m33$oos$rmse), 'design' = c('lhd-10', 'lhd-20', 'lhd-30')) p1 <- draw(m, emulator = 1, type = 'rmse', log = T) +    geom_point(data = rmse_static_1, mapping = aes(x = N, y = rmse, group = design, shape = design), color = '#E69F00', size = 1.5) +   scale_shape_manual(values = c(3, 4, 8)) p2 <- draw(m, emulator = 2, type = 'rmse', log = T) +    geom_point(data = rmse_static_2, mapping = aes(x = N, y = rmse, group = design, shape = design), color = '#E69F00', size = 1.5) +   scale_shape_manual(values = c(3, 4, 8)) p3 <- draw(m, emulator = 3, type = 'rmse', log = T) +    geom_point(data = rmse_static_3, mapping = aes(x = N, y = rmse, group = design, shape = design), color = '#E69F00', size = 1.5) +   scale_shape_manual(values = c(3, 4, 8)) p1 + p2 + p3 + plot_layout(guides = 'collect') & theme(legend.position = 'bottom')"},{"path":"http://mingdeyu.github.io/dgpsi-R/dev/articles/seq_design_2.html","id":"see-also","dir":"Articles","previous_headings":"Comparison to DGP emulators with space-filling designs","what":"See also","title":"Sequential Design II","text":"See Sequential Design sequential design DGP emulator 2D simulator.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/dev/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Deyu Ming. Author, maintainer, copyright holder. Daniel Williamson. Author.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/dev/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Ming, D. Guillas, S. (2021) Linked Gaussian process emulation systems computer models using Matérn kernels adaptive design, SIAM/ASA Journal Uncertainty Quantification. 9(4), 1615-1642. URL https://epubs.siam.org/doi/abs/10.1137/20M1323771 Ming, D., Williamson, D., Guillas, S. (2022) Deep Gaussian process emulation using stochastic imputation, Technometrics. (0)0, 1-12. URL https://doi.org/10.1080/00401706.2022.2124311","code":"@Article{,   title = {Linked Gaussian process emulation for systems of computer models using Matérn kernels and adaptive design},   author = {Deyu Ming and Serge Guillas},   journal = {SIAM/ASA Journal on Uncertainty Quantification},   year = {2021},   volume = {9},   number = {4},   pages = {1615--1642},   url = {https://epubs.siam.org/doi/abs/10.1137/20M1323771}, } @Article{,   title = {Deep Gaussian process emulation using stochastic imputation},   author = {Deyu Ming and Daniel Williamson and Serge Guillas},   journal = {Technometrics},   year = {2022},   volume = {0},   number = {0},   pages = {1--12},   url = {https://doi.org/10.1080/00401706.2022.2124311}, }"},{"path":"http://mingdeyu.github.io/dgpsi-R/dev/index.html","id":"dgpsi","dir":"","previous_headings":"","what":"R Interface to dgpsi","title":"R Interface to dgpsi","text":"R package dgpsi provides R interface Python package dgpsi deep linked Gaussian process emulations. Hassle-free Python Setup don’t need prior knowledge Python start using package, need single click R (see Installation section ) automatically installs activates required Python environment !","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/dev/index.html","id":"features","dir":"","previous_headings":"","what":"Features","title":"R Interface to dgpsi","text":"dgpsi currently following features: Gaussian process emulations separable non-separable squared exponential Matérn-2.5 kernels. multiple layers; multiple GP nodes; separable non-separable squared exponential Matérn-2.5 kernels; global input connections; non-Gaussian likelihoods (Poisson, Negative-Binomial, heteroskedastic Gaussian). Linked emulations feed-forward systems computer models linking (D)GP emulators deterministic individual computer models. Fast Leave-One-(LOO) --Sample (OOS) validations GP, DGP, linked (D)GP emulators. Multi-core predictions validations GP, DGP, Linked (D)GP emulators. (Development Version) Sequential designs (D)GP emulators bundles (D)GP emulators.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/dev/index.html","id":"getting-started","dir":"","previous_headings":"","what":"Getting started","title":"R Interface to dgpsi","text":"Check Quick Guide dgpsi get started package. Check Sequential Design Sequential Design II taste new feature available development version.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/dev/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"R Interface to dgpsi","text":"can install package CRAN: development version GitHub: installation, run install activate required Python environment. ’s , package now ready use! Note Always run init_py() library(dgpsi), telling R invoke required Python environment. Warning Linux users encountered importing errors similar execution init_py(), please try reinstall python environment: restart R.","code":"install.packages('dgpsi') devtools::install_github('mingdeyu/dgpsi-R') library(dgpsi) init_py() /usr/lib/x86_64-linux-gnu/libstdc++.so.6: version 'GLIBCXX_3.4.30' not found init_py(reinstall = T)"},{"path":"http://mingdeyu.github.io/dgpsi-R/dev/index.html","id":"references","dir":"","previous_headings":"","what":"References","title":"R Interface to dgpsi","text":"Ming, D., Williamson, D., Guillas, S. (2022) Deep Gaussian process emulation using stochastic imputation. Technometrics. 0(0), 1-12. Ming, D. Guillas, S. (2021) Linked Gaussian process emulation systems computer models using Matérn kernels adaptive design, SIAM/ASA Journal Uncertainty Quantification. 9(4), 1615-1642.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/dev/reference/Hetero.html","id":null,"dir":"Reference","previous_headings":"","what":"Initialize a heteroskedastic Gaussian likelihood node — Hetero","title":"Initialize a heteroskedastic Gaussian likelihood node — Hetero","text":"function constructs likelihood object represent heteroskedastic Gaussian likelihood node.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/dev/reference/Hetero.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Initialize a heteroskedastic Gaussian likelihood node — Hetero","text":"","code":"Hetero(input_dim = NULL)"},{"path":"http://mingdeyu.github.io/dgpsi-R/dev/reference/Hetero.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initialize a heteroskedastic Gaussian likelihood node — Hetero","text":"input_dim vector length two contains indices two GP nodes feeding layer whose outputs feed likelihood node. set NULL, outputs GP nodes feeding layer feed likelihood node, case one needs ensure two GP nodes specified feeding layer. Defaults NULL.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/dev/reference/Hetero.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Initialize a heteroskedastic Gaussian likelihood node — Hetero","text":"'python' object represent heteroskedastic Gaussian likelihood node.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/dev/reference/Hetero.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Initialize a heteroskedastic Gaussian likelihood node — Hetero","text":"See examples tutorials https://mingdeyu.github.io/dgpsi-R/.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/dev/reference/Hetero.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Initialize a heteroskedastic Gaussian likelihood node — Hetero","text":"heteroskedastic Gaussian likelihood node can linked two feeding GP nodes.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/dev/reference/Hetero.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Initialize a heteroskedastic Gaussian likelihood node — Hetero","text":"","code":"if (FALSE) {  # Check https://mingdeyu.github.io/dgpsi-R/ for examples # on how to customize DGP structures using Hetero(). }"},{"path":"http://mingdeyu.github.io/dgpsi-R/dev/reference/NegBin.html","id":null,"dir":"Reference","previous_headings":"","what":"Initialize a negative Binomial likelihood node — NegBin","title":"Initialize a negative Binomial likelihood node — NegBin","text":"function constructs likelihood object represent negative Binomial likelihood node.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/dev/reference/NegBin.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Initialize a negative Binomial likelihood node — NegBin","text":"","code":"NegBin(input_dim = NULL)"},{"path":"http://mingdeyu.github.io/dgpsi-R/dev/reference/NegBin.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initialize a negative Binomial likelihood node — NegBin","text":"input_dim vector length two contains indices two GP nodes feeding layer whose outputs feed likelihood node. set NULL, outputs GP nodes feeding layer feed likelihood node, case one needs ensure two GP nodes specified feeding layer. Defaults NULL.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/dev/reference/NegBin.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Initialize a negative Binomial likelihood node — NegBin","text":"'python' object represent negative Binomial likelihood node.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/dev/reference/NegBin.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Initialize a negative Binomial likelihood node — NegBin","text":"See examples tutorials https://mingdeyu.github.io/dgpsi-R/.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/dev/reference/NegBin.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Initialize a negative Binomial likelihood node — NegBin","text":"negative Binomial likelihood node can linked two feeding GP nodes.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/dev/reference/NegBin.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Initialize a negative Binomial likelihood node — NegBin","text":"","code":"if (FALSE) {  # Check https://mingdeyu.github.io/dgpsi-R/ for examples # on how to customize DGP structures using NegBin(). }"},{"path":"http://mingdeyu.github.io/dgpsi-R/dev/reference/Poisson.html","id":null,"dir":"Reference","previous_headings":"","what":"Initialize a Poisson likelihood node — Poisson","title":"Initialize a Poisson likelihood node — Poisson","text":"function constructs likelihood object represent Poisson likelihood node.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/dev/reference/Poisson.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Initialize a Poisson likelihood node — Poisson","text":"","code":"Poisson(input_dim = NULL)"},{"path":"http://mingdeyu.github.io/dgpsi-R/dev/reference/Poisson.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initialize a Poisson likelihood node — Poisson","text":"input_dim vector length one contains indices one GP node feeding layer whose outputs feed likelihood node. set NULL, outputs GP nodes feeding layer feed likelihood node, case one needs ensure one GP node specified feeding layer. Defaults NULL.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/dev/reference/Poisson.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Initialize a Poisson likelihood node — Poisson","text":"'python' object represent Poisson likelihood node.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/dev/reference/Poisson.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Initialize a Poisson likelihood node — Poisson","text":"See examples tutorials https://mingdeyu.github.io/dgpsi-R/.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/dev/reference/Poisson.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Initialize a Poisson likelihood node — Poisson","text":"Poisson likelihood node can linked one feeding GP node.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/dev/reference/Poisson.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Initialize a Poisson likelihood node — Poisson","text":"","code":"if (FALSE) {  # Check https://mingdeyu.github.io/dgpsi-R/ for examples # on how to customize DGP structures using Poisson(). }"},{"path":"http://mingdeyu.github.io/dgpsi-R/dev/reference/combine.html","id":null,"dir":"Reference","previous_headings":"","what":"Combine layers — combine","title":"Combine layers — combine","text":"function combines customized layers DGP linked (D)GP structure.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/dev/reference/combine.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Combine layers — combine","text":"","code":"combine(...)"},{"path":"http://mingdeyu.github.io/dgpsi-R/dev/reference/combine.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Combine layers — combine","text":"... sequence lists: DGP emulations, list represents DGP layer contains GP nodes (produced kernel()), likelihood nodes (produced Poisson(), Hetero(), NegBin()). linked (D)GP emulations, list represents system layer contains emulators (produced gp() dgp()) layer.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/dev/reference/combine.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Combine layers — combine","text":"list defining DGP structure (struc dgp()) linked (D)GP structure (struc lgp()).","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/dev/reference/combine.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Combine layers — combine","text":"See examples tutorials https://mingdeyu.github.io/dgpsi-R/.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/dev/reference/combine.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Combine layers — combine","text":"","code":"if (FALSE) {  # See lgp() for an example. }"},{"path":"http://mingdeyu.github.io/dgpsi-R/dev/reference/continue.html","id":null,"dir":"Reference","previous_headings":"","what":"Continue the training of a DGP emulator — continue","title":"Continue the training of a DGP emulator — continue","text":"function implements additional training iterations DGP emulator.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/dev/reference/continue.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Continue the training of a DGP emulator — continue","text":"","code":"continue(object, N = 500, ess_burn = 10, verb = TRUE, burnin = NULL, B = 50)"},{"path":"http://mingdeyu.github.io/dgpsi-R/dev/reference/continue.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Continue the training of a DGP emulator — continue","text":"object instance dgp class. N additional number iterations DGP emulator training. Defaults 500. ess_burn number burnin steps ESS-within-Gibbs -step training. Defaults 10. verb bool indicating progress bar printed training: FALSE: training progress bar displayed. TRUE: training progress bar displayed. Defaults TRUE. burnin number training iterations discarded point estimates calculation. Must smaller overall training iterations -far implemented. specified, last 25% iterations used. overrides value burnin set dgp(). Defaults NULL. B number imputations produce predictions. Increase value account imputation uncertainties. overrides value B set dgp(). Defaults 50.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/dev/reference/continue.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Continue the training of a DGP emulator — continue","text":"updated object.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/dev/reference/continue.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Continue the training of a DGP emulator — continue","text":"See examples tutorials https://mingdeyu.github.io/dgpsi-R/.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/dev/reference/continue.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Continue the training of a DGP emulator — continue","text":"One can also use function fit untrained DGP emulator constructed dgp() training = FALSE. following slots: loo oos created validate(); results created predict() object removed contained returned object.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/dev/reference/continue.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Continue the training of a DGP emulator — continue","text":"","code":"if (FALSE) {  # See dgp() for an example. }"},{"path":"http://mingdeyu.github.io/dgpsi-R/dev/reference/design.html","id":null,"dir":"Reference","previous_headings":"","what":"Sequential design of a (D)GP emulator or a bundle of (D)GP emulators — design","title":"Sequential design of a (D)GP emulator or a bundle of (D)GP emulators — design","text":"function implements sequential design (D)GP emulator bundle (D)GP emulators.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/dev/reference/design.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sequential design of a (D)GP emulator or a bundle of (D)GP emulators — design","text":"","code":"design(   object,   N,   x_cand,   y_cand,   n_cand,   limits,   batch_size,   f,   freq,   x_test,   y_test,   target,   method,   nugget_s,   verb,   check_point,   cores,   ... )  # S3 method for gp design(   object,   N,   x_cand = NULL,   y_cand = NULL,   n_cand = 200,   limits = NULL,   batch_size = 1,   f = NULL,   freq = c(1, 1),   x_test = NULL,   y_test = NULL,   target = NULL,   method = \"ALM\",   nugget_s = 1,   verb = TRUE,   check_point = NULL,   cores = c(1, 1),   ... )  # S3 method for dgp design(   object,   N,   x_cand = NULL,   y_cand = NULL,   n_cand = 200,   limits = NULL,   batch_size = 1,   f = NULL,   freq = c(1, 1),   x_test = NULL,   y_test = NULL,   target = NULL,   method = \"ALM\",   nugget_s = 1,   verb = TRUE,   check_point = NULL,   cores = c(1, 1),   threading = FALSE,   train_N = 100,   aggregate = NULL,   ... )  # S3 method for bundle design(   object,   N,   x_cand = NULL,   y_cand = NULL,   n_cand = 200,   limits = NULL,   batch_size = 1,   f = NULL,   freq = c(1, 1),   x_test = NULL,   y_test = NULL,   target = NULL,   method = \"ALM\",   nugget_s = 1,   verb = TRUE,   check_point = NULL,   cores = c(1, 1),   threading = FALSE,   train_N = 100,   aggregate = NULL,   ... )"},{"path":"http://mingdeyu.github.io/dgpsi-R/dev/reference/design.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sequential design of a (D)GP emulator or a bundle of (D)GP emulators — design","text":"object can one following: S3 class gp. S3 class dgp. S3 class bundle. N number steps sequential design, .e., number design points added emulator object. x_cand matrix (row design point column input dimension) gives candidate set next design point determined. x_cand = NULL, candidate set generated using n_cand limits. Defaults NULL. y_cand matrix (row simulator evaluation column output dimension) gives realizations simulator input positions x_cand. Defaults NULL. n_cand integer gives size candidate set next design point determined, x_cand = NULL; size sub-set sampled candidate set x_cand step sequential design determine next design point, x_cand NULL. Defaults 200 limits two-column matrix gives ranges input dimension, vector length two one input dimension. vector provided, converted two-column row matrix. rows matrix correspond input dimensions, first second columns correspond minimum maximum values input dimensions. limits = NULL, ranges input dimensions determined training data contained object. argument used x_cand = NULL y_cand = NULL. Defaults NULL. batch_size integer vector integers gives number design points (simulator output dimension aggregate = NULL) chosen step sequential design. integer given, applied steps sequential design. vector given, must length N. Defaults 1. f R function represents simulator. f needs specified following basic rules: first argument function matrix rows different design points columns input dimensions. output function can either matrix rows different outputs (corresponding input design points) columns output dimensions. one output dimension, matrix still needs returned single column. list first element output matrix described , optionally, additional named elements update values arguments names passed via .... list output can useful additional arguments f aggregate need updated step sequential design. freq vector two integers first element giving frequency (number steps) re-fit emulator, second element giving frequency implement emulator validation (RMSE). Defaults c(1, 1). x_test matrix (row input testing data point column input dimension) gives testing input data evaluate emulator step sequential design. Set NULL LOO-based emulator validation. Defaults NULL. y_test testing output data correspond x_test emulator validation step sequential design: object instance gp class, y_test matrix one column row testing output data point. object instance dgp class, y_test matrix rows testing output data points columns output dimensions. Set NULL LOO-based emulator validation. Defaults NULL. target numeric vector gives target RMSEs sequential design terminated. Defaults NULL, case sequential design stops N steps. See Note section information target. method criterion used locate design points. two built-criterion: ALM (\"ALM\") MICE (\"MICE\"), see references . customized criterion can also used supplying R function argument. function provided, must specified following basic form: first argument emulator object can either instance gp class (produced gp()) dgp class (produced dgp()). second argument matrix represents set design points scores criterion calculated. row matrix gives one design point. output matrix rows corresponding different design points columns corresponding different output dimensions. Defaults \"ALM\". nugget_s value smoothing nugget term used method = \"MICE\". Defaults 1.0. verb bool indicating trace information printed sequential design. Defaults TRUE. check_point vector integers indicates steps sequential design pause ask confirmation user sequential design continue terminated. Set NULL suspend manual intervention. Defaults NULL. cores vector two integers gives number cores/workers used criterion calculations emulator validations, respectively. either element set NULL, number cores set (max physical cores available - 1). Defaults c(1, 1). ... arguments (names different arguments used design()) used f, aggregate, method (function supplied) can passed . design() pass relevant arguments f, aggregate, method based names additional arguments provided. threading bool indicating whether use multi-threading accelerate criterion calculations emulator validations object instance dgp class. Turning option improve speed validations DGP emulator built moderately large number training data points Matérn-2.5 kernel. train_N integer vector integers gives number training iterations used re-fit DGP emulator step sequential design: train_N integer, step DGP emulator re-fitted (based frequency re-fit specified freq) train_N iterations. train_N vector, size must N even re-fit frequency specified freq one. Defaults 100. aggregate R function aggregates scores criterion specified method across different output dimensions (object instance dgp class) across different emulators (object instance bundle class). function specified following basic form: first argument matrix representing scores. rows matrix correspond different design points candidate set. number columns matrix equals : emulator output dimension object instance dgp class; number emulators contained object object instance bundle class. output vector gives aggregations scores different design points. Set NULL disable aggregation. Defaults NULL.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/dev/reference/design.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sequential design of a (D)GP emulator or a bundle of (D)GP emulators — design","text":"updated object returned slot called design contains: S slots, named wave1, wave2,..., waveS, contain information S waves sequential designs applied emulator. slot contains following elements: N, integer gives numbers steps implemented corresponding wave; rmse, matrix gives RMSEs emulators constructed corresponding wave; freq, integer gives frequency emulator validations implemented corresponding wave. aggregation, bool indicates aggregation applied (.e., aggregate supplied) locate design points DGP emulator bundle (D)GP emulators corresponding wave. batch_size, vector size N contains information given argument batch_size. enrichment, vector size N gives number new design points added step sequential design (object instance gp dgp class), matrix gives number new design points added emulators bundle step sequential design (object instance bundle class). target NULL, following additional elements also included: target, target RMSE(s) stop sequential design. reached, bool (object instance gp dgp class) vector bools (object instance bundle class) indicate target RMSEs reached end sequential design. slot called type gives type validations, either LOO (loo) OOS (oos) used calculate RMSEs emulators constructed sequential design. See validate() information LOO OOS. two slots called x_test y_test contain data points OOS validation type slot oos. See Note section information.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/dev/reference/design.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Sequential design of a (D)GP emulator or a bundle of (D)GP emulators — design","text":"See examples tutorials https://mingdeyu.github.io/dgpsi-R/.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/dev/reference/design.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Sequential design of a (D)GP emulator or a bundle of (D)GP emulators — design","text":"re-fitting validation emulator forced final step sequential design even N multiples elements freq. loo oos slot already exists object cleaned, new slot called loo oos created returned object depending whether x_test y_test provided. new slot gives validation information emulator constructed final step sequential design. See validate() information slots loo oos. object previously used design() sequential designs, information current wave sequential design replace old waves contained returned object, unless following conditions met: validation type (LOO OOS) current wave sequential design validation types previous waves, validation type OOS, x_test y_test current wave sequential design identical previous waves. conditions met, information current wave sequential design added design slot returned object name waveS. object instance gp class, matrix rmse slot single-columned. object instance dgp bundle class, matrix rmse slot can multiple columns correspond different output dimensions different emulators bundle. object instance gp class, target needs single value giving RMSE threshold. object instance dgp bundle class, target can vector values gives RMSE thresholds different output dimensions different emulators. single value provided, used RMSE threshold output dimensions (object instance dgp) emulators (object instance bundle). defining f aggregate, important ensure : column order first argument f consistent training input used emulator; column order output matrix f consistent order emulator output dimensions (object instance dgp class), order emulators placed object (object instance bundle class); column order first argument aggregate consistent order emulator output dimensions (object instance dgp class), order emulators placed object object instance bundle class; R vector detected x_test y_test treated column vector automatically converted single-column R matrix. Thus, x_test y_test single testing data point multiple dimensions, must given matrix.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/dev/reference/design.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Sequential design of a (D)GP emulator or a bundle of (D)GP emulators — design","text":"MacKay, D. J. (1992). Information-based objective functions active data selection. Neural Computation, 4(4), 590-604. Beck, J., & Guillas, S. (2016). Sequential design mutual information computer experiments (MICE): emulation tsunami model. SIAM/ASA Journal Uncertainty Quantification, 4(1), 739-766.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/dev/reference/design.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sequential design of a (D)GP emulator or a bundle of (D)GP emulators — design","text":"","code":"if (FALSE) {  # load packages and the Python env library(lhs) library(dgpsi) init_py()  # construct a 2D non-stationary function that takes a matrix as the input f <- function(x) {   sin(1/((0.7*x[,1,drop=F]+0.3)*(0.7*x[,2,drop=F]+0.3))) }  # generate the initial design X <- maximinLHS(5,2) Y <- f(X)  # generate the validation data validate_x <- maximinLHS(30,2) validate_y <- f(validate_x)  # training a 2-layered DGP emulator with the initial design m <- dgp(X, Y)  # specify the ranges of the input dimensions lim_1 <- c(0, 1) lim_2 <- c(0, 1) lim <- rbind(lim_1, lim_2)  # 1st wave of the sequential design with 10 steps m <- design(m, N=10, limits = lim, f = f, x_test = validate_x, y_test = validate_y)  # 2nd wave of the sequential design with 10 steps m <- design(m, N=10, limits = lim, f = f, x_test = validate_x, y_test = validate_y)  # 3rd wave of the sequential design with 10 steps m <- design(m, N=10, limits = lim, f = f, x_test = validate_x, y_test = validate_y)  # draw the design created by the sequential design draw(m,'design')  # inspect the trace of RMSEs during the sequential design draw(m,'rmse')  # reduce the number of imputations for faster OOS m_faster <- set_imp(m, 10)  # plot the OOS validation with the faster DGP emulator plot(m_faster, x_test = validate_x, y_test = validate_y) }"},{"path":"http://mingdeyu.github.io/dgpsi-R/dev/reference/dgp.html","id":null,"dir":"Reference","previous_headings":"","what":"Deep Gaussian process emulator construction — dgp","title":"Deep Gaussian process emulator construction — dgp","text":"function builds trains DGP emulator.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/dev/reference/dgp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Deep Gaussian process emulator construction — dgp","text":"","code":"dgp(   X,   Y,   struc = NULL,   depth = 2,   name = \"sexp\",   lengthscale = 1,   share = TRUE,   nugget_est = FALSE,   nugget = 1e-06,   scale_est = TRUE,   scale = 1,   connect = TRUE,   likelihood = NULL,   training = TRUE,   verb = TRUE,   check_rep = TRUE,   rff = FALSE,   M = NULL,   N = 500,   ess_burn = 10,   burnin = NULL,   B = 50,   internal_input_idx = NULL,   linked_idx = NULL )"},{"path":"http://mingdeyu.github.io/dgpsi-R/dev/reference/dgp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Deep Gaussian process emulator construction — dgp","text":"X matrix row input training data point column input dimension. Y matrix containing observed training output data. matrix rows output data points columns output dimensions. likelihood (see ) NULL, Y must matrix one column. struc list specifies user-defined DGP structure. contain L (number DGP layers) sub-lists, represents layer contains number GP nodes (defined kernel()) corresponding layer. final layer DGP structure (.e., final sub-list struc) can likelihood layer contains likelihood function (e.g., Poisson()). struc = NULL, DGP structure automatically generated can checked applying summary() output dgp() training = FALSE. argument used (.e., user provides customized DGP structure), arguments depth, name, lengthscale, nugget_est, nugget, scale_est, scale, connect, likelihood, internal_input_idx used. Defaults NULL. depth number layers (including likelihood layer) DGP structure. depth must least 2. Defaults 2. argument used struc = NULL. name kernel function used. Either \"sexp\" squared exponential kernel \"matern2.5\" Matérn-2.5 kernel. Defaults \"sexp\". argument used struc = NULL. lengthscale initial lengthscales GP nodes DGP emulator. can single numeric value vector: single numeric value, value applied initial lengthscales GP nodes DGP hierarchy. vector, element vector specifies initial lengthscales applied GP nodes corresponding layer. vector length depth likelihood = NULL length depth - 1 likelihood NULL. Defaults numeric value 1.0. argument used struc = NULL. share bool indicating input dimensions GP node share common lengthscale. Defaults TRUE. argument used struc = NULL. nugget_est bool bool vector indicates nuggets GP nodes () final layer estimated. single bool provided, applied GP nodes () final layer. bool vector (must length ncol(Y)) provided, bool element vector applied corresponding GP node () final layer. value bool following effects: FALSE: nugget corresponding GP final layer fixed corresponding value defined nugget (see ). TRUE: nugget corresponding GP final layer estimated initial value given correspondence nugget (see ). Defaults FALSE. argument used struc = NULL. nugget initial nugget value(s) GP nodes () final layer. single numeric value, applied GP nodes () final layer. vector (must length ncol(Y)), numeric vector applied corresponding GP node () final layer. Set nugget small value corresponding bool nugget_est FASLE deterministic emulations emulator interpolates training data points. Set nugget reasonable larger value corresponding bool nugget_est TRUE stochastic emulations computer model outputs assumed follow homogeneous Gaussian distribution. Defaults 1e-6. argument used struc = NULL. scale_est bool bool vector indicates variance GP nodes () final layer estimated. single bool provided, applied GP nodes () final layer. bool vector (must length ncol(Y)) provided, bool element vector applied corresponding GP node () final layer. value bool following effects: FALSE: variance corresponding GP final layer fixed corresponding value defined scale (see ). TRUE: variance corresponding GP final layer estimated initial value given correspondence scale (see ). Defaults TRUE. argument used struc = NULL. scale initial variance value(s) GP nodes () final layer. single numeric value, applied GP nodes () final layer. vector (must length ncol(Y)), numeric vector applied corresponding GP node () final layer. Defaults 1. argument used struc = NULL. connect bool indicating whether implement global input connection DGP structure. Setting FALSE may produce better emulator cases cost slower training. Defaults TRUE. argument used struc = NULL. likelihood likelihood type DGP emulator: NULL: likelihood layer included emulator. \"Hetero\": heteroskedastic Gaussian likelihood layer added stochastic emulation computer model outputs assumed follow heteroskedastic Gaussian distribution (.e., computer model outputs varying noises). \"Poisson\": Poisson likelihood layer added stochastic emulation computer model outputs assumed Poisson distribution. \"NegBin\": negative Binomial likelihood layer added stochastic emulation computer model outputs assumed follow negative Binomial distribution. likelihood NULL, values nugget_est nugget overridden FALSE 1e-6 respectively. Defaults NULL. argument used struc = NULL. training bool indicating initialized DGP emulator trained. set FALSE, dgp() returns untrained DGP emulator, one can apply summary() inspect specifications (especially customized struc provided) apply predict() check emulation performance training. Defaults TRUE. verb bool indicating trace information DGP emulator construction training printed function execution. Defaults TRUE. check_rep bool indicating whether check repetitions dataset, .e., one input position multiple outputs. Defaults TRUE. rff bool indicating whether use random Fourier features approximate correlation matrices training. Turning option help accelerate training training data relatively large may reduce quality resulting emulator. Defaults FALSE. M number features used random Fourier approximation. used rff set TRUE. Defaults NULL. NULL, M automatically set max(100, ceiling(sqrt(nrow(X))*log(nrow(X)))). N number iterations training. Defaults 500. argument used training = TRUE. ess_burn number burnin steps ESS-within-Gibbs -step training. Defaults 10. argument used training = TRUE. burnin number training iterations discarded point estimates model parameters. Must smaller training iterations N. specified, last 25% iterations used. Defaults NULL. argument used training = TRUE. B number imputations produce later predictions. Increase value account imputation uncertainties. Decrease value lower imputation uncertainties faster predictions. Defaults 50. internal_input_idx column indices X generated linked emulators preceding layers. Set internal_input_idx = NULL DGP emulator first layer system columns X generated linked emulators preceding layers. Defaults NULL. argument used struc = NULL. linked_idx either vector list vectors: linked_idx vector, gives indices columns pooled output matrix (formed column-combined outputs emulators feeding layer) feed DGP emulator. DGP emulator first layer linked emulator system, vector gives column indices global input (formed column-combining input matrices emulators first layer) DGP emulator use. length vector shall equal length internal_input_idx internal_input_idx NULL. DGP emulator first layer linked emulator system, linked_idx can list gives information connections DGP emulator emulators preceding layers. length list equal number layers DGP emulator. element list vector gives indices columns pooled output matrix (formed column-combined outputs emulators) corresponding layer feed DGP emulator. DGP emulator connections emulator certain layer, set NULL corresponding position list. order input dimensions X[,internal_input_idx] consistent linked_idx. example, DGP emulator 4th-layer fed output dimension 2 4 emulators layer 2 output dimension 1 3 emulators layer 3 linked_idx = list( NULL, c(2,4), c(1,2,3) ). addition, first second columns X[,internal_input_idx] correspond output dimensions 2 4 layer 2, third fifth columns X[,internal_input_idx] correspond output dimensions 1 3 layer 3. Set linked_idx = NULL DGP emulator used linked emulations. However, longer case, one can use set_linked_idx() add linking information DGP emulator. Defaults NULL.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/dev/reference/dgp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Deep Gaussian process emulator construction — dgp","text":"S3 class named dgp contains four slots: data: list contains two elements: X Y training input output data respectively. constructor_obj: 'python' object stores information constructed DGP emulator. container_obj: 'python' object stores information linked emulation. emulator_obj: 'python' object stores information predictions DGP emulator. returned dgp object can used predict() DGP predictions. continue() additional DGP training iterations. validate() LOO OOS validations. plot() validation plots. lgp() linked (D)GP emulator constructions. design() sequential designs.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/dev/reference/dgp.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Deep Gaussian process emulator construction — dgp","text":"See examples tutorials https://mingdeyu.github.io/dgpsi-R/ learn customize DGP structure.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/dev/reference/dgp.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Deep Gaussian process emulator construction — dgp","text":"R vector detected X Y treated column vector automatically converted single-column R matrix. Thus, X single data point multiple dimensions, must given matrix.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/dev/reference/dgp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Deep Gaussian process emulator construction — dgp","text":"","code":"if (FALSE) {  # load the package and the Python env library(dgpsi) init_py()  # construct a step function f <- function(x) {   if (x < 0.5) return(-1)   if (x >= 0.5) return(1)   }  # generate training data X <- seq(0, 1, length = 10) Y <- sapply(X, f)  # training a 3-layered DGP emulator m <- dgp(X, Y, depth = 3)  # continue for further training iterations m <- continue(m)  # summarizing summary(m)  # trace plot trace_plot(m)  # LOO cross validation m <- validate(m) plot(m)  # prediction test_x <- seq(0, 1, length = 200) m <- predict(m, x = test_x)  # OOS validation validate_x <- sample(test_x, 10) validate_y <- sapply(validate_x, f) plot(m, validate_x, validate_y)  # write and read the constructed emulator write(m, 'step_dgp') m <- read('step_dgp') }"},{"path":"http://mingdeyu.github.io/dgpsi-R/dev/reference/draw.html","id":null,"dir":"Reference","previous_headings":"","what":"Validation plots of a sequential design — draw","title":"Validation plots of a sequential design — draw","text":"function draws validation plots sequential design (D)GP emulator bundle (D)GP emulators.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/dev/reference/draw.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validation plots of a sequential design — draw","text":"","code":"draw(object, ...)  # S3 method for gp draw(object, type = \"rmse\", log = FALSE, ...)  # S3 method for dgp draw(object, type = \"rmse\", log = FALSE, ...)  # S3 method for bundle draw(object, emulator = 1, type = \"rmse\", log = FALSE, ...)"},{"path":"http://mingdeyu.github.io/dgpsi-R/dev/reference/draw.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validation plots of a sequential design — draw","text":"object can one following emulator classes: S3 class gp. S3 class dgp. S3 class bundle. ... N/. type either rmse, trace plot RMSEs emulators constructed sequential designs, design, visualizations input designs created sequential design procedure. Defaults rmse. log bool indicates whether plot RMSEs log-scale type = \"rmse\". Defaults FALSE. emulator index emulator packed object object instance bundle class.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/dev/reference/draw.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validation plots of a sequential design — draw","text":"patchwork object.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/dev/reference/draw.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Validation plots of a sequential design — draw","text":"See examples tutorials https://mingdeyu.github.io/dgpsi-R/.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/dev/reference/draw.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Validation plots of a sequential design — draw","text":"","code":"if (FALSE) {  # See design() for an example. }"},{"path":"http://mingdeyu.github.io/dgpsi-R/dev/reference/gp.html","id":null,"dir":"Reference","previous_headings":"","what":"Gaussian process emulator construction — gp","title":"Gaussian process emulator construction — gp","text":"function builds trains GP emulator.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/dev/reference/gp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gaussian process emulator construction — gp","text":"","code":"gp(   X,   Y,   struc = NULL,   name = \"sexp\",   lengthscale = rep(0.2, ncol(X)),   nugget_est = FALSE,   nugget = 1e-06,   scale_est = TRUE,   scale = 1,   training = TRUE,   verb = TRUE,   internal_input_idx = NULL,   linked_idx = NULL )"},{"path":"http://mingdeyu.github.io/dgpsi-R/dev/reference/gp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Gaussian process emulator construction — gp","text":"X matrix row input data point column input dimension. Y matrix one column row output data point. struc object produced kernel() gives user-defined GP specifications. struc = NULL, GP specifications automatically generated using information provided name, lengthscale, nugget_est, nugget, scale_est, scale,internal_input_idx. Defaults NULL. name kernel function used. Either \"sexp\" squared exponential kernel \"matern2.5\" Matérn-2.5 kernel. Defaults \"sexp\". argument used struc = NULL. lengthscale initial values lengthscales kernel function. can single numeric value vector: single numeric value, assumed kernel functions across input dimensions share lengthscale; vector (must length ncol(X)), assumed kernel functions across input dimensions different lengthscales. Defaults vector 0.2. argument used struc = NULL. nugget_est bool indicating nugget term estimated: FALSE: nugget term fixed nugget. TRUE: nugget term estimated. Defaults FALSE. argument used struc = NULL. nugget initial nugget value. nugget_est = FALSE, assigned value fixed training. Set nugget small value (e.g., 1e-6) corresponding bool nugget_est FASLE deterministic emulations emulator interpolates training data points. Set nugget reasonable larger value corresponding bool nugget_est TRUE stochastic emulations computer model outputs assumed follow homogeneous Gaussian distribution. Defaults 1e-6. argument used struc = NULL. scale_est bool indicating variance estimated: FALSE: variance fixed scale. TRUE: variance term estimated. Defaults TRUE. argument used struc = NULL. scale initial variance value. scale_est = FALSE, assigned value fixed training. Defaults 1. argument used struc = NULL. training bool indicating initialized GP emulator trained. set FALSE, gp() returns untrained GP emulator, one can apply summary() inspect specifications (especially customized struc provided) apply predict() check emulation performance training. Defaults TRUE. verb bool indicating trace information GP emulator construction training printed function execution. Defaults TRUE. internal_input_idx column indices X generated linked emulators preceding layers. Set internal_input_idx = NULL GP emulator first layer system columns X generated linked emulators preceding layers. Defaults NULL. argument used struc = NULL. linked_idx either vector list vectors: linked_idx vector, gives indices columns pooled output matrix (formed column-combined outputs emulators feeding layer) feed GP emulator. GP emulator first layer linked emulator system, vector gives column indices global input (formed column-combining input matrices emulators first layer) GP emulator use. length vector shall equal length internal_input_idx internal_input_idx NULL. GP emulator first layer linked emulator system, linked_idx can list gives information connections GP emulator emulators preceding layers. length list equal number layers GP emulator. element list vector gives indices columns pooled output matrix (formed column-combined outputs emulators) corresponding layer feed GP emulator. GP emulator connections emulator certain layer, set NULL corresponding position list. order input dimensions X[,internal_input_idx] consistent linked_idx. example, GP emulator second layer fed output dimension 1 3 emulators layer 1 linked_idx = list( c(1,3) ). addition, first second columns X[,internal_input_idx] correspond output dimensions 1 3 layer 1. Set linked_idx = NULL GP emulator used linked emulations. However, longer case, one can use set_linked_idx() add linking information GP emulator. Defaults NULL.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/dev/reference/gp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Gaussian process emulator construction — gp","text":"S3 class named gp contains four slots: data: list contains two elements: X Y training input output data respectively. constructor_obj: 'python' object stores information constructed GP emulator. container_obj: 'python' object stores information linked emulation. emulator_obj: 'python' object stores information predictions GP emulator. returned gp object can used predict() GP predictions. validate() LOO OOS validations. plot() validation plots. lgp() linked (D)GP emulator constructions. design() sequential designs.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/dev/reference/gp.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Gaussian process emulator construction — gp","text":"See examples tutorials https://mingdeyu.github.io/dgpsi-R/.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/dev/reference/gp.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Gaussian process emulator construction — gp","text":"R vector detected X Y treated column vector automatically converted single-column R matrix. Thus, X single data point multiple dimensions, must given matrix.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/dev/reference/gp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Gaussian process emulator construction — gp","text":"","code":"if (FALSE) { # load the package and the Python env library(dgpsi) init_py()  # construct a step function f <- function(x) {    if (x < 0.5) return(-1)    if (x >= 0.5) return(1)   }  # generate training data X <- seq(0, 1, length = 10) Y <- sapply(X, f)  # training m <- gp(X, Y)  # summarizing summary(m)  # LOO cross validation m <- validate(m) plot(m)  # prediction test_x <- seq(0, 1, length = 200) m <- predict(m, x = test_x)  # OOS validation validate_x <- sample(test_x, 10) validate_y <- sapply(validate_x, f) plot(m, validate_x, validate_y)  # write and read the constructed emulator write(m, 'step_gp') m <- read('step_gp') }"},{"path":"http://mingdeyu.github.io/dgpsi-R/dev/reference/init_py.html","id":null,"dir":"Reference","previous_headings":"","what":"'python' environment initialization — init_py","title":"'python' environment initialization — init_py","text":"function initializes 'python' environment package.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/dev/reference/init_py.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"'python' environment initialization — init_py","text":"","code":"init_py(py_ver = NULL, dgpsi_ver = NULL, reinstall = FALSE)"},{"path":"http://mingdeyu.github.io/dgpsi-R/dev/reference/init_py.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"'python' environment initialization — init_py","text":"py_ver string gives 'python' version installed. py_ver = NULL, default 'python' version '3.9.13' installed. dgpsi_ver string gives 'python' version 'dgpsi' used. dgpsi_ver = NULL, latest 'python' version 'dgpsi' used, package installed CRAN; development 'python' version 'dgpsi' used, package installed GitHub. reinstall bool indicates whether reinstall 'python' version 'dgpsi' specified dgpsi_ver already installed. argument useful development version R package installed one may want regularly update development 'python' version 'dgpsi'. Defaults FALSE.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/dev/reference/init_py.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"'python' environment initialization — init_py","text":"return value, called install required 'python' environment.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/dev/reference/init_py.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"'python' environment initialization — init_py","text":"See examples tutorials https://mingdeyu.github.io/dgpsi-R/.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/dev/reference/init_py.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"'python' environment initialization — init_py","text":"","code":"if (FALSE) {  # See gp(), dgp(), or lgp() for an example. }"},{"path":"http://mingdeyu.github.io/dgpsi-R/dev/reference/kernel.html","id":null,"dir":"Reference","previous_headings":"","what":"Initialize a Gaussian process node — kernel","title":"Initialize a Gaussian process node — kernel","text":"function constructs kernel object represent properties Gaussian process node.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/dev/reference/kernel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Initialize a Gaussian process node — kernel","text":"","code":"kernel(   length,   scale = 1,   nugget = 1e-06,   name = \"sexp\",   prior_name = \"ga\",   prior_coef = c(1.6, 0.3),   nugget_est = FALSE,   scale_est = FALSE,   input_dim = NULL,   connect = NULL )"},{"path":"http://mingdeyu.github.io/dgpsi-R/dev/reference/kernel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initialize a Gaussian process node — kernel","text":"length vector lengthscales. length vector equals : either one lengthscales kernel function assumed across input dimensions; total number input dimensions, sum number feeding GP nodes last layer (defined argument input_dim) number connected global input dimensions (defined argument connect), lengthscales kernel function assumed different across input dimensions. scale variance GP node. Defaults 1. nugget nugget term GP node. Defaults 1e-6. name kernel function used. Either \"sexp\" squared exponential kernel \"matern2.5\" Matérn-2.5 kernel. Defaults \"sexp\". prior_name prior options lengthscales nugget term. Either gamma (\"ga\") inverse gamma (\"inv_ga\") distribution lengthscales nugget term. Set NULL disable prior. Defaults \"ga\". prior_coef vector contains two values specifying shape rate parameters gamma prior, shape scale parameters inverse gamma prior. Defaults c(1.6,0.3). nugget_est set TRUE estimate nugget term FALSE fix nugget term specified argument nugget. set TRUE, value set argument nugget used initial value. Defaults FALSE. scale_est set TRUE estimate variance (.e., scale) FALSE fix variance (.e., scale) specified argument scale. Defaults FALSE. input_dim vector contains either indices GP nodes feeding layer whose outputs feed GP node; indices global input dimensions linked outputs feeding emulators, GP node first layer GP DGP, used linked emulation. set NULL, outputs GP nodes feeding layer feed GP node; global input dimensions feed GP node. Defaults NULL. connect vector contains indices dimensions global input connecting GP node additional input dimensions. set NULL, global input connection implemented. Defaults NULL. GP node first layer GP DGP emulator, consequently used linked emulation, connect gives indices global input dimensions connected feeding emulators. case, set input_dim vector indices remaining input dimensions connected feeding emulators.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/dev/reference/kernel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Initialize a Gaussian process node — kernel","text":"'python' object represent GP node.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/dev/reference/kernel.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Initialize a Gaussian process node — kernel","text":"See examples tutorials https://mingdeyu.github.io/dgpsi-R/.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/dev/reference/kernel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Initialize a Gaussian process node — kernel","text":"","code":"if (FALSE) {  # Check https://mingdeyu.github.io/dgpsi-R/ for examples # on how to customize DGP structures using kernel(). }"},{"path":"http://mingdeyu.github.io/dgpsi-R/dev/reference/lgp.html","id":null,"dir":"Reference","previous_headings":"","what":"Linked (D)GP emulator construction — lgp","title":"Linked (D)GP emulator construction — lgp","text":"function constructs linked (D)GP emulator.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/dev/reference/lgp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Linked (D)GP emulator construction — lgp","text":"","code":"lgp(struc, B = 50)"},{"path":"http://mingdeyu.github.io/dgpsi-R/dev/reference/lgp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Linked (D)GP emulator construction — lgp","text":"struc list contains L (number layers systems computer models) sub-lists, represents layer contains (D)GP emulators (represented instances S3 class gp dgp) computer models. sub-lists placed list order specified computer model system's hierarchy. B number imputations produce predictions. Increase value account imputation uncertainties. Decrease value lower imputation uncertainties faster predictions. system consists GP emulators, B set 1 automatically. Defaults 50.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/dev/reference/lgp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Linked (D)GP emulator construction — lgp","text":"S3 class named lgp contains slot called emulator_obj, 'python' object stores information predictions linked emulator. returned lgp object can used predict() linked (D)GP predictions. validate() OOS validation. plot() validation plots.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/dev/reference/lgp.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Linked (D)GP emulator construction — lgp","text":"See examples tutorials https://mingdeyu.github.io/dgpsi-R/.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/dev/reference/lgp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Linked (D)GP emulator construction — lgp","text":"","code":"if (FALSE) {  # load the package and the Python env library(dgpsi) init_py()  # model 1 f1 <- function(x) {   (sin(7.5*x)+1)/2 } # model 2 f2 <- function(x) {   2/3*sin(2*(2*x - 1))+4/3*exp(-30*(2*(2*x-1))^2)-1/3 } # linked model f12 <- function(x) {   f2(f1(x)) }  # training data for Model 1 X1 <- seq(0, 1, length = 9) Y1 <- sapply(X1, f1) # training data for Model 2 X2 <- seq(0, 1, length = 13) Y2 <- sapply(X2, f2)  # emulation of model 1 m1 <- gp(X1, Y1, name = \"matern2.5\", linked_idx = c(1)) # emulation of model 2 m2 <- dgp(X2, Y2, depth = 2, name = \"matern2.5\") # assign linking information after the emulation construction m2 <- set_linked_idx(m2, c(1))  # emulation of the linked model struc <- combine(list(m1), list(m2)) m_link <- lgp(struc)  # summarizing summary(m_link)  # prediction test_x <- seq(0, 1, length = 300) m_link <- predict(m_link, x = test_x)  # OOS validation validate_x <- sample(test_x, 20) validate_y <- sapply(validate_x, f12) plot(m_link, validate_x, validate_y, style = 2)  # write and read the constructed linked emulator write(m_link, 'linked_emulator') m_link <- read('linked_emulator') }"},{"path":"http://mingdeyu.github.io/dgpsi-R/dev/reference/locate.html","id":null,"dir":"Reference","previous_headings":"","what":"Locate the next design point for a (D)GP emulator or a bundle of (D)GP emulators — locate","title":"Locate the next design point for a (D)GP emulator or a bundle of (D)GP emulators — locate","text":"function searches candidate set locate next design point added (D)GP bundle (D)GP emulators.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/dev/reference/locate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Locate the next design point for a (D)GP emulator or a bundle of (D)GP emulators — locate","text":"","code":"locate(   object,   x_cand,   n_cand,   limits,   batch_size,   method,   nugget_s,   verb,   cores,   ... )  # S3 method for gp locate(   object,   x_cand = NULL,   n_cand = 200,   limits = NULL,   batch_size = 1,   method = \"ALM\",   nugget_s = 1,   verb = TRUE,   cores = 1,   ... )  # S3 method for dgp locate(   object,   x_cand = NULL,   n_cand = 200,   limits = NULL,   batch_size = 1,   method = \"ALM\",   nugget_s = 1,   verb = TRUE,   cores = 1,   threading = FALSE,   aggregate = NULL,   ... )  # S3 method for bundle locate(   object,   x_cand = NULL,   n_cand = 200,   limits = NULL,   batch_size = 1,   method = \"ALM\",   nugget_s = 1,   verb = TRUE,   cores = 1,   threading = FALSE,   aggregate = NULL,   ... )"},{"path":"http://mingdeyu.github.io/dgpsi-R/dev/reference/locate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Locate the next design point for a (D)GP emulator or a bundle of (D)GP emulators — locate","text":"object can one following: S3 class gp. S3 class dgp. S3 class bundle. x_cand matrix (row design point column input dimension) gives candidate set next design point determined. x_cand = NULL, candidate set generated using n_cand limits. Defaults NULL. n_cand integer gives size candidate set next design point determined. argument used x_cand = NULL. Defaults 200 limits two-column matrix gives ranges input dimension, vector length two one input dimension. vector provided, converted two-column row matrix. rows matrix correspond input dimensions, first second columns correspond minimum maximum values input dimensions. limits = NULL, ranges input dimensions determined training data contained object. argument used x_cand = NULL. Defaults NULL. batch_size integer gives number design points (simulator output dimension aggregate = NULL) chosen. Defaults 1. method criterion used locate next design point. two built-criterion: ALM (\"ALM\") MICE (\"MICE\"), see references . customized criterion can also used supplying R function argument. function provided, must specified following basic form: first argument emulator object can either instance gp class (produced gp()) dgp class (produced dgp()). second argument matrix represents set design points scores criterion calculated. row matrix gives one design point. output matrix rows corresponding different design points columns corresponding different output dimensions. Defaults \"ALM\". nugget_s value smoothing nugget term used method = \"MICE\". Defaults 1.0. verb bool indicating trace information printed function execution. Defaults TRUE. cores number cores/workers used criterion calculation. set NULL, number cores set (max physical cores available - 1). Defaults 1. ... arguments (names different arguments used locate()) used aggregate method (function supplied) can passed . locate() pass relevant arguments aggregate method based names additional arguments provided. threading bool indicating whether use multi-threading accelerate criterion calculation. Turning option improve speed criterion calculations emulator built moderately large number training data points Matérn-2.5 kernel. aggregate R function aggregates scores criterion specified method across different output dimensions (object instance dgp class) across different emulators (object instance bundle class). function specified following basic form: first argument matrix representing scores. rows matrix correspond different design points candidate set. number columns matrix equals : emulator output dimension object instance dgp class; number emulators contained object object instance bundle class. output vector gives aggregations scores different design points. Set NULL disable aggregation. Defaults NULL.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/dev/reference/locate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Locate the next design point for a (D)GP emulator or a bundle of (D)GP emulators — locate","text":"object instance gp class, list returned: x_cand = NULL, list one slot called location contains single-row matrix gives position determined design point, batch_size = 1; number slots named position1,...,positionS S = batch_size, single-row matrix giving position determined design point, batch_size greater 1. x_cand NULL, list additional slot called index contains row index next design point x_cand, batch_size = 1; number slots named position1,...,positionS giving indices next design points x_cand, batch_size greater 1. object instance dgp class, list returned: x_cand = NULL aggregate = NULL, list one slot called location contains matrix whose rows give positions determined design points respect different output dimensions, batch_size = 1; number slots named position1,...,positionS S = batch_size, matrix giving position determined design points respect different output dimensions, batch_size greater 1. x_cand NULL, list additional slot called index contains vector giving row indices determined design points x_cand respect different output dimensions, batch_size = 1; number vectors named position1,...,positionS, gives indices determined design points x_cand respect different output dimensions, batch_size greater 1. x_cand = NULL aggregate provided, list one slot called location contains single-row matrix gives position determined design point, batch_size = 1; number slots named position1,...,positionS S = batch_size, single-row matrix giving position determined design point, batch_size greater 1. x_cand NULL, list additional slot called index contains row index next design point x_cand, batch_size = 1; number slots named position1,...,positionS, gives index determined design point x_cand, batch_size greater 1. object instance bundle class, list returned: x_cand = NULL aggregate = NULL, list one slot called location contains matrix whose rows give positions determined design points respect different emulators bundle, batch_size = 1; number slots named position1,...,positionS S = batch_size, matrix giving position determined design points respect different emulators bundle, batch_size greater 1. x_cand NULL, list additional slot called index contains vector giving row indices determined design points x_cand respect different emulators bundle, batch_size = 1; number vectors named position1,...,positionS, gives indices determined design points x_cand respect different emulators bundle, batch_size greater 1. x_cand = NULL aggregate provided, list one slot called location contains single-row matrix gives position determined design point, batch_size = 1; number slots named position1,...,positionS S = batch_size, single-row matrix giving position determined design point, batch_size greater 1. x_cand NULL, list additional slot called index contains row index next design point x_cand, batch_size = 1; number slots named position1,...,positionS, gives index determined design point x_cand, batch_size greater 1.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/dev/reference/locate.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Locate the next design point for a (D)GP emulator or a bundle of (D)GP emulators — locate","text":"See examples tutorials https://mingdeyu.github.io/dgpsi-R/.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/dev/reference/locate.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Locate the next design point for a (D)GP emulator or a bundle of (D)GP emulators — locate","text":"function applicable GP emulators, DGP emulators without likelihood layers, bundles (D)GP emulators created pack(). R vector detected x_cand treated column vector automatically converted single-column R matrix.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/dev/reference/locate.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Locate the next design point for a (D)GP emulator or a bundle of (D)GP emulators — locate","text":"MacKay, D. J. (1992). Information-based objective functions active data selection. Neural Computation, 4(4), 590-604. Beck, J., & Guillas, S. (2016). Sequential design mutual information computer experiments (MICE): emulation tsunami model. SIAM/ASA Journal Uncertainty Quantification, 4(1), 739-766.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/dev/reference/locate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Locate the next design point for a (D)GP emulator or a bundle of (D)GP emulators — locate","text":"","code":"if (FALSE) {  # load packages and the Python env library(lhs) library(dgpsi) init_py()  # construct a 1D non-stationary function f <- function(x) {  sin(30*((2*x-1)/2-0.4)^5)*cos(20*((2*x-1)/2-0.4)) }  # generate the initial design X <- maximinLHS(10,1) Y <- f(X)  # training a 2-layered DGP emulator with the global connection off m <- dgp(X, Y, connect = F)  # specify the range of the input dimension lim <- c(0,1)  # locate the next design point next_point <- locate(m, limits = lim) X_new <- next_point$location  # obtain the corresponding output at the located design point Y_new <- f(X_new)  # combine the new input-output pair to the existing data X <- rbind(X, X_new) Y <- rbind(Y, Y_new)  # update the DGP emulator with the new input and output data and refit with 500 training iterations m <- update(m, X, Y, refit = TRUE, N = 500)  # plot the LOO validation plot(m) }"},{"path":"http://mingdeyu.github.io/dgpsi-R/dev/reference/nllik.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate negative predicted log-likelihood — nllik","title":"Calculate negative predicted log-likelihood — nllik","text":"function computes negative predicted log-likelihood DGP emulator likelihood layer.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/dev/reference/nllik.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate negative predicted log-likelihood — nllik","text":"","code":"nllik(object, x, y)"},{"path":"http://mingdeyu.github.io/dgpsi-R/dev/reference/nllik.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate negative predicted log-likelihood — nllik","text":"object instance dgp class produced dgp() one following two settings: struc = NULL, likelihood NULL; customized structure provided struc, final layer must likelihood layer containing one likelihood node produced Poisson(), Hetero(), NegBin(). x matrix row input testing data point column input dimension. y matrix one column row scalar-valued testing output data point.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/dev/reference/nllik.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate negative predicted log-likelihood — nllik","text":"updated object returned additional slot named NLL contains two elements. first one, named meanNLL, scalar gives average negative predicted log-likelihood across testing data points. second one, named allNLL, vector gives negative predicted log-likelihood testing data point.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/dev/reference/nllik.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate negative predicted log-likelihood — nllik","text":"See examples tutorials https://mingdeyu.github.io/dgpsi-R/.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/dev/reference/nllik.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Calculate negative predicted log-likelihood — nllik","text":"R vector detected x y treated column vector automatically converted single-column R matrix. Thus, x single testing data point multiple dimensions, must given matrix.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/dev/reference/nllik.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate negative predicted log-likelihood — nllik","text":"","code":"if (FALSE) {  # Check https://mingdeyu.github.io/dgpsi-R/ for examples # on how to compute the negative predicted log-likelihood # using nllik(). }"},{"path":"http://mingdeyu.github.io/dgpsi-R/dev/reference/pack.html","id":null,"dir":"Reference","previous_headings":"","what":"Pack GP and DGP emulators into a bundle — pack","title":"Pack GP and DGP emulators into a bundle — pack","text":"function packs GP emulators DGP emulators (without likelihood layers) bundle class sequential designs emulator emulates one output dimension underlying simulator.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/dev/reference/pack.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pack GP and DGP emulators into a bundle — pack","text":"","code":"pack(...)"},{"path":"http://mingdeyu.github.io/dgpsi-R/dev/reference/pack.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pack GP and DGP emulators into a bundle — pack","text":"... sequence emulators produced gp() dgp().","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/dev/reference/pack.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pack GP and DGP emulators into a bundle — pack","text":"S3 class named bundle used design() sequential designs. : N slots, contains GP DGP emulator, N number emulators provided function. slot called data contains two elements X Y. X contains N matrices named emulator1,...,emulatorN training input data different emulators. Y contains N single-column matrices named emulator1,...,emulatorN training output data different emulators.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/dev/reference/pack.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Pack GP and DGP emulators into a bundle — pack","text":"See examples tutorials https://mingdeyu.github.io/dgpsi-R/.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/dev/reference/pack.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Pack GP and DGP emulators into a bundle — pack","text":"","code":"if (FALSE) {  # load packages and the Python env library(lhs) library(dgpsi) init_py()  # construct a function with a two-dimensional output f <- function(x) {  y1 = sin(30*((2*x-1)/2-0.4)^5)*cos(20*((2*x-1)/2-0.4))  y2 = 1/3*sin(2*(2*x - 1))+2/3*exp(-30*(2*(2*x-1))^2)+1/3  return(cbind(y1,y2)) }  # generate the initial design X <- maximinLHS(10,1) Y <- f(X)  # generate the validation data validate_x <- maximinLHS(30,1) validate_y <- f(validate_x)  # training a 2-layered DGP emulator with respect to each output with the global connection off m1 <- dgp(X, Y[,1], connect=F) m2 <- dgp(X, Y[,2], connect=F)  # specify the range of the input dimension lim <- c(0, 1)  # pack emulators to form an emulator bundle m <- pack(m1, m2)  # 1st wave of the sequential design with 10 steps with target RMSE 0.01 m <- design(m, N=10, limits = lim, f = f, x_test = validate_x, y_test = validate_y, target = 0.01)  # 2rd wave of the sequential design with 10 steps, the same target, and the aggregation # function that takes the average of the criterion scores across the two outputs g <- function(x){   return(rowMeans(x)) } m <- design(m, N=10, limits = lim, f = f, x_test = validate_x,                     y_test = validate_y, aggregate = g, target = 0.01)  # draw sequential designs of the two packed emulators draw(m, emulator = 1, type = 'design') draw(m, emulator = 2, type = 'design')  # inspect the traces of RMSEs of the two packed emulators draw(m, emulator = 1, type = 'rmse') draw(m, emulator = 2, type = 'rmse')  # unpack the bundle into individual emulators m_unpacked <- unpack(m)  # plot OOS validations of individual emulators plot(m_unpacked[[1]], x_test = validate_x, y_test = validate_y[,1]) plot(m_unpacked[[2]], x_test = validate_x, y_test = validate_y[,2]) }"},{"path":"http://mingdeyu.github.io/dgpsi-R/dev/reference/plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Validation plots of a constructed GP, DGP, or linked (D)GP emulator — plot","title":"Validation plots of a constructed GP, DGP, or linked (D)GP emulator — plot","text":"function draws validation plots GP, DGP, linked (D)GP emulator.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/dev/reference/plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validation plots of a constructed GP, DGP, or linked (D)GP emulator — plot","text":"","code":"# S3 method for dgp plot(   x,   x_test = NULL,   y_test = NULL,   dim = NULL,   method = \"mean_var\",   style = 1,   min_max = TRUE,   verb = TRUE,   force = FALSE,   cores = 1,   threading = FALSE,   ... )  # S3 method for lgp plot(   x,   x_test = NULL,   y_test = NULL,   dim = NULL,   method = \"mean_var\",   style = 1,   min_max = TRUE,   verb = TRUE,   force = FALSE,   cores = 1,   threading = FALSE,   ... )  # S3 method for gp plot(   x,   x_test = NULL,   y_test = NULL,   dim = NULL,   method = \"mean_var\",   style = 1,   min_max = TRUE,   verb = TRUE,   force = FALSE,   cores = 1,   ... )"},{"path":"http://mingdeyu.github.io/dgpsi-R/dev/reference/plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validation plots of a constructed GP, DGP, or linked (D)GP emulator — plot","text":"x can one following emulator classes: S3 class gp. S3 class dgp. S3 class lgp. x_test validate(). y_test validate(). dim dim = NULL, index emulator's input shown x-axis validation plots. Otherwise, dim indicates dimension emulator's input shown x-axis validation plots: x instance gp dgp class, dim integer. x instance lgp class, dim can integer referring dimension global input emulators first layer linked emulator system; vector three integers referring dimension (specified third integer) global input emulator (specified second integer) layer (specified first integer) first layer linked emulator system. argument used style = 1 emulator input least two-dimensional. Defaults NULL. method validate(). style either 1 2, indicating two different types validation plots. min_max bool indicating min-max normalization used scale testing output, RMSE, predictive mean std emulator. Defaults TRUE. verb bool indicating trace information plotting printed function execution. Defaults TRUE. force validate(). cores validate(). threading validate(). ... N/.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/dev/reference/plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validation plots of a constructed GP, DGP, or linked (D)GP emulator — plot","text":"patchwork object.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/dev/reference/plot.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Validation plots of a constructed GP, DGP, or linked (D)GP emulator — plot","text":"See examples tutorials https://mingdeyu.github.io/dgpsi-R/.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/dev/reference/plot.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Validation plots of a constructed GP, DGP, or linked (D)GP emulator — plot","text":"plot() calls validate() internally obtain validation results plotting. However, plot() export emulator object validation results. Instead, returns plotting object. small-scale validations (.e., small training testing data points), direct execution plot() fine. However, moderate- large-scale validations, recommended first run validate() obtain store validation results emulator object, supply object plot(). emulator object validation results stored, time plot() invoked, unnecessary evaluations repetitive LOO OOS validation implemented. plot() uses information provided x_test y_test produce OOS validation plots. Therefore, validation results already stored x, unless x_test y_test identical used validate(), plot() re-evaluate OOS validations plotting. R vector detected x_test y_test treated column vector automatically converted single-column R matrix. Thus, x_test y_test single testing data point multiple dimensions, must given matrix. returned patchwork object contains ggplot2 objects. One can modify included individual ggplots accessing double-bracket indexing. See https://patchwork.data-imaginist.com/ information.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/dev/reference/plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Validation plots of a constructed GP, DGP, or linked (D)GP emulator — plot","text":"","code":"if (FALSE) {  # See gp(), dgp(), or lgp() for an example. }"},{"path":"http://mingdeyu.github.io/dgpsi-R/dev/reference/predict.html","id":null,"dir":"Reference","previous_headings":"","what":"Predictions from GP, DGP, or linked (D)GP emulators — predict","title":"Predictions from GP, DGP, or linked (D)GP emulators — predict","text":"function implements single-core multi-core predictions (without multi-threading) GP, DGP, linked (D)GP emulators.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/dev/reference/predict.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Predictions from GP, DGP, or linked (D)GP emulators — predict","text":"","code":"# S3 method for dgp predict(   object,   x,   method = \"mean_var\",   full_layer = FALSE,   sample_size = 50,   cores = 1,   chunks = NULL,   threading = FALSE,   ... )  # S3 method for lgp predict(   object,   x,   method = \"mean_var\",   full_layer = FALSE,   sample_size = 50,   cores = 1,   chunks = NULL,   threading = FALSE,   ... )  # S3 method for gp predict(   object,   x,   method = \"mean_var\",   sample_size = 50,   cores = 1,   chunks = NULL,   ... )"},{"path":"http://mingdeyu.github.io/dgpsi-R/dev/reference/predict.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Predictions from GP, DGP, or linked (D)GP emulators — predict","text":"object instance gp, dgp, lgp class. x testing input data: object instance gp dgp class, x matrix row input testing data point column input dimension. object instance lgp class, x can matrix list: x matrix, global testing input data feed emulators first layer system. rows x represent different input data points columns represent input dimensions across emulators first layer system. case, assumed global input system input emulators first layer global input emulators layers. x list, L (number layers emulator system) elements. first element matrix represents global testing input data feed emulators first layer system. remaining L-1 elements L-1 sub-lists, contains number (number emulators corresponding layer) matrices (rows testing input data points columns input dimensions) represent global testing input data emulators corresponding layer. matrices must placed sub-lists based corresponding emulators placed struc argument lgp(). global input data certain emulator, set NULL corresponding sub-list x. method prediction approach: mean-variance (\"mean_var\") sampling (\"sampling\") approach. Defaults \"mean_var\". full_layer bool indicating whether output predictions layers. Defaults FALSE. used object DGP linked (D)GP emulator. sample_size number samples draw given imputation method = \"sampling\". Defaults 50. cores number cores/workers used. set NULL, number cores set (max physical cores available - 1). Defaults 1. chunks number chunks testing input matrix x divided multi-cores work . used cores 1. specified (.e., chunks = NULL), number chunks set value cores. Defaults NULL. threading bool indicating whether use multi-threading accelerate predictions DGP linked (D)GP emulators. Turn option use Matérn-2.5 kernel moderately large number training data points case gain faster predictions. Defaults FALSE. ... N/.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/dev/reference/predict.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Predictions from GP, DGP, or linked (D)GP emulators — predict","text":"object instance gp class: method = \"mean_var\": updated object returned additional slot called results contains two matrices named mean predictive means var predictive variances. matrix one column rows corresponding testing positions (.e., rows x). method = \"sampling\": updated object returned additional slot called results contains matrix whose rows correspond testing positions columns correspond sample_size number samples drawn predictive distribution GP. object instance dgp class: method = \"mean_var\"  full_layer = FALSE: updated object returned additional slot called results contains two matrices named mean predictive means var predictive variances respectively. matrix rows corresponding testing positions columns corresponding DGP global output dimensions (.e., number GP/likelihood nodes final layer). method = \"mean_var\"  full_layer = TRUE: updated object returned additional slot called results contains two sub-lists named mean predictive means var predictive variances respectively. sub-list contains L (.e., number layers) matrices named layer1, layer2,..., layerL. matrix rows corresponding testing positions columns corresponding output dimensions (.e., number GP/likelihood nodes associated layer). method = \"sampling\"  full_layer = FALSE: updated object returned additional slot called results contains D (.e., number GP/likelihood nodes final layer) matrices named output1, output2,..., outputD. matrix rows corresponding testing positions columns corresponding samples size: B * sample_size, B number imputations specified dgp(). method = \"sampling\"  full_layer = TRUE: updated object returned additional slot called results contains L (.e., number layers) sub-lists named layer1, layer2,..., layerL. sub-list represents samples drawn GP/likelihood nodes corresponding layer, contains D (.e., number GP/likelihood nodes corresponding layer) matrices named output1, output2,..., outputD. matrix gives samples output one D GP/likelihood nodes, rows corresponding testing positions columns corresponding samples size: B * sample_size, B number imputations specified dgp(). object instance lgp class: method = \"mean_var\"  full_layer = FALSE: updated object returned additional slot called results contains two sub-lists named mean predictive means var predictive variances respectively. sub-list contains M number (number emulators final layer system) matrices named emulator1, emulator2,..., emulatorM. matrix rows corresponding global testing positions columns corresponding output dimensions associated emulator final layer. method = \"mean_var\"  full_layer = TRUE: updated object returned additional slot called results contains two sub-lists named mean predictive means var predictive variances respectively. sub-list contains L (.e., number layers emulated system) components named layer1, layer2,..., layerL. component represents layer contains M number (number emulators corresponding layer system) matrices named emulator1, emulator2,..., emulatorM. matrix rows corresponding global testing positions columns corresponding output dimensions associated GP/DGP emulator corresponding layer. method = \"sampling\"  full_layer = FALSE: updated object returned additional slot called results contains M number (number emulators final layer system) sub-lists named emulator1, emulator2,..., emulatorM. sub-list corresponds emulator final layer, contains D matrices, named output1, output2,..., outputD, correspond output dimensions GP/DGP emulator. matrix rows corresponding testing positions columns corresponding samples size: B * sample_size, B number imputations specified lgp(). method = \"sampling\"  full_layer = TRUE: updated object returned additional slot called results contains L (.e., number layers emulated system) sub-lists named layer1, layer2,..., layerL. sub-list represents layer contains M number (number emulators corresponding layer system) components named emulator1, emulator2,..., emulatorM. component corresponds emulator associated layer, contains D matrices, named output1, output2,..., outputD, correspond output dimensions GP/DGP emulator. matrix rows corresponding testing positions columns corresponding samples size: B * sample_size, B number imputations specified lgp().","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/dev/reference/predict.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Predictions from GP, DGP, or linked (D)GP emulators — predict","text":"See examples tutorials https://mingdeyu.github.io/dgpsi-R/.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/dev/reference/predict.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Predictions from GP, DGP, or linked (D)GP emulators — predict","text":"R vector detected x treated column vector automatically converted single-column R matrix. Thus, x single testing data point multiple dimensions, must given matrix.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/dev/reference/predict.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Predictions from GP, DGP, or linked (D)GP emulators — predict","text":"","code":"if (FALSE) {  # See gp(), dgp(), or lgp() for an example. }"},{"path":"http://mingdeyu.github.io/dgpsi-R/dev/reference/read.html","id":null,"dir":"Reference","previous_headings":"","what":"Load the stored emulator — read","title":"Load the stored emulator — read","text":"function loads .pkl file stores emulator.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/dev/reference/read.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load the stored emulator — read","text":"","code":"read(pkl_file)"},{"path":"http://mingdeyu.github.io/dgpsi-R/dev/reference/read.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load the stored emulator — read","text":"pkl_file path name .pkl file emulator stored.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/dev/reference/read.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Load the stored emulator — read","text":"GP, DGP linked (D)GP emulator S3 class.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/dev/reference/read.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Load the stored emulator — read","text":"See examples tutorials https://mingdeyu.github.io/dgpsi-R/.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/dev/reference/read.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Load the stored emulator — read","text":"","code":"if (FALSE) {  # See gp(), dgp(), or lgp() for an example. }"},{"path":"http://mingdeyu.github.io/dgpsi-R/dev/reference/set_imp.html","id":null,"dir":"Reference","previous_headings":"","what":"Reset number of imputations for a DGP emulator — set_imp","title":"Reset number of imputations for a DGP emulator — set_imp","text":"function resets number imputations predictions DGP emulator.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/dev/reference/set_imp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reset number of imputations for a DGP emulator — set_imp","text":"","code":"set_imp(object, B = 10)"},{"path":"http://mingdeyu.github.io/dgpsi-R/dev/reference/set_imp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reset number of imputations for a DGP emulator — set_imp","text":"object instance S3 class dgp. B number imputations produce predictions object. Defaults 10 faster predictions.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/dev/reference/set_imp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reset number of imputations for a DGP emulator — set_imp","text":"updated object information B incorporated.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/dev/reference/set_imp.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Reset number of imputations for a DGP emulator — set_imp","text":"See examples tutorials https://mingdeyu.github.io/dgpsi-R/.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/dev/reference/set_imp.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Reset number of imputations for a DGP emulator — set_imp","text":"function useful DGP emulator trained one wants make faster predictions decreasing number imputations without rebuilding emulator. following slots: loo oos created validate(); results created predict() object removed contained returned object.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/dev/reference/set_imp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reset number of imputations for a DGP emulator — set_imp","text":"","code":"if (FALSE) {  # See design() for an example. }"},{"path":"http://mingdeyu.github.io/dgpsi-R/dev/reference/set_linked_idx.html","id":null,"dir":"Reference","previous_headings":"","what":"Set linked indices — set_linked_idx","title":"Set linked indices — set_linked_idx","text":"function sets linked indices GP DGP emulator information provided emulator constructed gp() dgp().","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/dev/reference/set_linked_idx.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set linked indices — set_linked_idx","text":"","code":"set_linked_idx(object, idx)"},{"path":"http://mingdeyu.github.io/dgpsi-R/dev/reference/set_linked_idx.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set linked indices — set_linked_idx","text":"object instance S3 class gp dgp. idx indices columns pooled output matrix (formed column-combining outputs emulators feeding layer) feed GP DGP emulator represented object.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/dev/reference/set_linked_idx.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set linked indices — set_linked_idx","text":"updated object information idx incorporated.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/dev/reference/set_linked_idx.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Set linked indices — set_linked_idx","text":"See examples tutorials https://mingdeyu.github.io/dgpsi-R/.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/dev/reference/set_linked_idx.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Set linked indices — set_linked_idx","text":"function useful different models emulated different teams. team can create (D)GP emulator even without knowing different emulators connected together. information available different emulators collected, connection information emulators can assigned individual emulators function.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/dev/reference/set_linked_idx.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set linked indices — set_linked_idx","text":"","code":"if (FALSE) {  # See lgp() for an example. }"},{"path":"http://mingdeyu.github.io/dgpsi-R/dev/reference/summary.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary of a constructed GP, DGP, or linked (D)GP emulator — summary","title":"Summary of a constructed GP, DGP, or linked (D)GP emulator — summary","text":"function summarizes key information GP, DGP linked (D)GP emulator.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/dev/reference/summary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary of a constructed GP, DGP, or linked (D)GP emulator — summary","text":"","code":"# S3 method for gp summary(object, ...)  # S3 method for dgp summary(object, ...)  # S3 method for lgp summary(object, ...)"},{"path":"http://mingdeyu.github.io/dgpsi-R/dev/reference/summary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary of a constructed GP, DGP, or linked (D)GP emulator — summary","text":"object can one following: S3 class gp. S3 class dgp. S3 class lgp. ... N/.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/dev/reference/summary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summary of a constructed GP, DGP, or linked (D)GP emulator — summary","text":"table summarizing key information contained object.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/dev/reference/summary.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Summary of a constructed GP, DGP, or linked (D)GP emulator — summary","text":"See examples tutorials https://mingdeyu.github.io/dgpsi-R/.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/dev/reference/summary.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summary of a constructed GP, DGP, or linked (D)GP emulator — summary","text":"","code":"if (FALSE) {  # See gp(), dgp(), or lgp() for an example. }"},{"path":"http://mingdeyu.github.io/dgpsi-R/dev/reference/trace_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot of DGP model parameter traces — trace_plot","title":"Plot of DGP model parameter traces — trace_plot","text":"function plots traces model parameters chosen GP node DGP emulator.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/dev/reference/trace_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot of DGP model parameter traces — trace_plot","text":"","code":"trace_plot(object, layer = NULL, node = 1)"},{"path":"http://mingdeyu.github.io/dgpsi-R/dev/reference/trace_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot of DGP model parameter traces — trace_plot","text":"object instance dgp class. layer index layer. Defaults NULL final layer. node index GP node layer specified layer. Defaults 1 first GP node corresponding layer.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/dev/reference/trace_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot of DGP model parameter traces — trace_plot","text":"ggplot object.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/dev/reference/trace_plot.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot of DGP model parameter traces — trace_plot","text":"See examples tutorials https://mingdeyu.github.io/dgpsi-R/.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/dev/reference/trace_plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot of DGP model parameter traces — trace_plot","text":"","code":"if (FALSE) {  # See dgp() for an example. }"},{"path":"http://mingdeyu.github.io/dgpsi-R/dev/reference/unpack.html","id":null,"dir":"Reference","previous_headings":"","what":"Unpack a bundle of (D)GP emulators — unpack","title":"Unpack a bundle of (D)GP emulators — unpack","text":"function unpacks bundle (D)GP emulators safely manipulations unpacked individual emulators impact ones bundle.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/dev/reference/unpack.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Unpack a bundle of (D)GP emulators — unpack","text":"","code":"unpack(object)"},{"path":"http://mingdeyu.github.io/dgpsi-R/dev/reference/unpack.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Unpack a bundle of (D)GP emulators — unpack","text":"object instance class bundle.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/dev/reference/unpack.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Unpack a bundle of (D)GP emulators — unpack","text":"named list contains individual emulators (named emulator1,...,emulatorS) packed object, S number emulators object.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/dev/reference/unpack.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Unpack a bundle of (D)GP emulators — unpack","text":"See examples tutorials https://mingdeyu.github.io/dgpsi-R/.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/dev/reference/unpack.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Unpack a bundle of (D)GP emulators — unpack","text":"","code":"if (FALSE) {  # See pack() for an example. }"},{"path":"http://mingdeyu.github.io/dgpsi-R/dev/reference/update.html","id":null,"dir":"Reference","previous_headings":"","what":"Update a GP or DGP emulator — update","title":"Update a GP or DGP emulator — update","text":"function updates training input output GP DGP emulator option refit emulator.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/dev/reference/update.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update a GP or DGP emulator — update","text":"","code":"update(object, X, Y, refit, verb, ...)  # S3 method for dgp update(   object,   X,   Y,   refit = FALSE,   verb = TRUE,   N = 100,   ess_burn = 10,   B = NULL,   ... )  # S3 method for gp update(object, X, Y, refit = FALSE, verb = TRUE, ...)"},{"path":"http://mingdeyu.github.io/dgpsi-R/dev/reference/update.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update a GP or DGP emulator — update","text":"object can one following: S3 class gp. S3 class dgp. X new input data matrix row input training data point column input dimension. Y new output data: object instance gp class, Y matrix one column row output data point. object instance dgp class, Y matrix rows output data points columns output dimensions. likelihood (see ) NULL, Y must matrix one column. refit bool indicating whether re-fit emulator object training input output updated. Defaults FALSE. verb bool indicating trace information printed function execution. Defaults TRUE. ... N/. N number training iterations used re-fit emulator object instance dgp class. Defaults 100. ess_burn number burnin steps ESS-within-Gibbs -step training emulator object instance dgp class. Defaults 10. B number imputations predictions updated emulator object instance dgp class. overrides number imputations set object. Set NULL use number imputations set object. Defaults NULL.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/dev/reference/update.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Update a GP or DGP emulator — update","text":"updated object.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/dev/reference/update.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Update a GP or DGP emulator — update","text":"See examples tutorials https://mingdeyu.github.io/dgpsi-R/.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/dev/reference/update.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Update a GP or DGP emulator — update","text":"following slots: loo oos created validate(); results created predict(); design created design() object removed contained returned object. R vector detected X Y treated column vector automatically converted single-column R matrix. Thus, X single data point multiple dimensions, must given matrix.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/dev/reference/update.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Update a GP or DGP emulator — update","text":"","code":"if (FALSE) {  # See locate() for an example. }"},{"path":"http://mingdeyu.github.io/dgpsi-R/dev/reference/validate.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate a constructed GP, DGP, or linked (D)GP emulator — validate","title":"Validate a constructed GP, DGP, or linked (D)GP emulator — validate","text":"function validate constructed GP, DGP, linked (D)GP emulator via Leave-One-(LOO) cross validation --Sample (OOS) validation.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/dev/reference/validate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate a constructed GP, DGP, or linked (D)GP emulator — validate","text":"","code":"validate(object, x_test, y_test, method, verb, force, cores, ...)  # S3 method for gp validate(   object,   x_test = NULL,   y_test = NULL,   method = \"mean_var\",   verb = TRUE,   force = FALSE,   cores = 1,   ... )  # S3 method for dgp validate(   object,   x_test = NULL,   y_test = NULL,   method = \"mean_var\",   verb = TRUE,   force = FALSE,   cores = 1,   threading = FALSE,   ... )  # S3 method for lgp validate(   object,   x_test = NULL,   y_test = NULL,   method = \"mean_var\",   verb = TRUE,   force = FALSE,   cores = 1,   threading = FALSE,   ... )"},{"path":"http://mingdeyu.github.io/dgpsi-R/dev/reference/validate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate a constructed GP, DGP, or linked (D)GP emulator — validate","text":"object can one following: S3 class gp. S3 class dgp. S3 class lgp. x_test OOS testing input data: x instance gp dgp class, x_test matrix row input testing data point column input dimension. x instance lgp class, x_test can matrix list: x_test matrix, global testing input data feed emulators first layer system. rows x_test represent different input data points columns represent input dimensions across emulators first layer system. case, assumed global input system input emulators first layer global input emulators layers. x_test list, L (number layers emulator system) elements. first element matrix represents global testing input data feed emulators first layer system. remaining L-1 elements L-1 sub-lists, contains number (number emulators corresponding layer) matrices (rows testing input data points columns input dimensions) represent global testing input data emulators corresponding layer. matrices must placed sub-lists based corresponding emulators placed struc argument lgp(). global input data certain emulator, set NULL corresponding sub-list x_test. x_test must provided validation x instance lgp. Defaults NULL. y_test OOS testing output data correspond x_test: x instance gp class, y_test matrix one column row testing output data point. x instance dgp class, y_test matrix rows testing output data points columns output dimensions. x instance lgp class, y_test can single matrix list matrices: y_test single matrix, one emulator final layer linked emulator system y_test represents emulator's output rows testing positions columns output dimensions. y_test list, y_test M number (number emulators final layer system) matrices. matrix rows corresponding testing positions columns corresponding output dimensions associated emulator final layer. y_test must provided validation x instance lgp. Defaults NULL. method prediction approach validations: mean-variance (\"mean_var\") sampling (\"sampling\") approach. Defaults \"mean_var\". verb bool indicating trace information validations printed function execution. Defaults TRUE. force bool indicating whether force LOO OOS re-evaluation loo oos slot already exists object. force = FALSE, validate() try determine automatically LOO OOS re-evaluation needed. Set force TRUE LOO OOS re-evaluation required. Defaults FALSE. cores number cores/workers used LOO OOS validation. set NULL, number cores set (max physical cores available - 1). Defaults 1. ... N/. threading bool indicating whether use multi-threading accelerate LOO OOS. Turning option improve speed validations emulator built moderately large number training data points Matérn-2.5 kernel.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/dev/reference/validate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate a constructed GP, DGP, or linked (D)GP emulator — validate","text":"object instance gp class, updated object returned additional slot called loo (LOO cross validation) oos (OOS validation) contains: two slots called x_train (x_test) y_train (y_test) contain validation data points LOO (OOS). column matrix called mean, method = \"mean_var\", median, method = \"sampling\", contains predictive means medians GP emulator validation positions. three column matrices called std, lower, upper contain predictive standard deviations credible intervals GP emulator validation positions. method = \"mean_var\", upper lower bounds credible interval two standard deviations predictive mean. method = \"sampling\", upper lower bounds credible interval 2.5th 97.5th percentiles. numeric value called rmse contains root mean/median squared error GP emulator. numeric value called nrmse contains (min-max) normalized root mean/median squared error GP emulator. min-max normalization based maximum minimum values validation outputs contained y_train (y_test). rows matrices (mean, median, std, lower, upper) correspond validation positions. object instance dgp class, updated object returned additional slot called loo (LOO cross validation) oos (OOS validation) contains: two slots called x_train (x_test) y_train (y_test) contain validation data points LOO (OOS). matrix called mean, method = \"mean_var\", median, method = \"sampling\", contains predictive means medians DGP emulator validation positions. three matrices called std, lower, upper contain predictive standard deviations credible intervals DGP emulator validation positions. method = \"mean_var\", upper lower bounds credible interval two standard deviations predictive mean. method = \"sampling\", upper lower bounds credible interval 2.5th 97.5th percentiles. vector called rmse contains root mean/median squared errors DGP emulator across different output dimensions. vector called nrmse contains (min-max) normalized root mean/median squared errors DGP emulator across different output dimensions. min-max normalization based maximum minimum values validation outputs contained y_train (y_test). rows columns matrices (mean, median, std, lower, upper) correspond validation positions DGP emulator output dimensions, respectively. object instance lgp class, updated object returned additional slot called oos (OOS validation) contains: two slots called x_test y_test contain validation data points OOS. list called mean, method = \"mean_var\", median, method = \"sampling\", contains predictive means medians linked (D)GP emulator validation positions. three lists called std, lower, upper contain predictive standard deviations credible intervals linked (D)GP emulator validation positions. method = \"mean_var\", upper lower bounds credible interval two standard deviations predictive mean. method = \"sampling\", upper lower bounds credible interval 2.5th 97.5th percentiles. list called rmse contains root mean/median squared errors linked (D)GP emulator. list called nrmse contains (min-max) normalized root mean/median squared errors linked (D)GP emulator. min-max normalization based maximum minimum values validation outputs contained y_test. element mean, median, std, lower, upper, rmse, nrmse corresponds (D)GP emulator final layer linked (D)GP emulator.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/dev/reference/validate.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Validate a constructed GP, DGP, or linked (D)GP emulator — validate","text":"See examples tutorials https://mingdeyu.github.io/dgpsi-R/.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/dev/reference/validate.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Validate a constructed GP, DGP, or linked (D)GP emulator — validate","text":"x_test y_test NULL, LOO cross validation implemented. Otherwise, OOS validation implemented. LOO validation applicable GP DGP emulator (.e., x instance gp dgp class). linked (D)GP emulator (.e., x instance lgp class) provided, x_test y_test must also provided OOS validation. R vector detected x_test y_test treated column vector automatically converted single-column R matrix. Thus, x_test y_test single testing data point multiple dimensions, must given matrix.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/dev/reference/validate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Validate a constructed GP, DGP, or linked (D)GP emulator — validate","text":"","code":"if (FALSE) {  # See gp(), dgp(), or lgp() for an example. }"},{"path":"http://mingdeyu.github.io/dgpsi-R/dev/reference/write.html","id":null,"dir":"Reference","previous_headings":"","what":"Save the constructed emulator — write","title":"Save the constructed emulator — write","text":"function saves constructed emulator .pkl file.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/dev/reference/write.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Save the constructed emulator — write","text":"","code":"write(object, pkl_file)"},{"path":"http://mingdeyu.github.io/dgpsi-R/dev/reference/write.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Save the constructed emulator — write","text":"object instance S3 class gp, dgp, lgp. pkl_file path name .pkl file emulator object saved.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/dev/reference/write.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Save the constructed emulator — write","text":"return value. object save local .pkl file specified pkl_file.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/dev/reference/write.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Save the constructed emulator — write","text":"See examples tutorials https://mingdeyu.github.io/dgpsi-R/.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/dev/reference/write.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Save the constructed emulator — write","text":"Since constructed emulators 'python' objects, save() R work R objects.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/dev/reference/write.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Save the constructed emulator — write","text":"","code":"if (FALSE) {  # See gp(), dgp(), or lgp() for an example. }"},{"path":"http://mingdeyu.github.io/dgpsi-R/dev/news/index.html","id":"dgpsi-215-9000-development-version","dir":"Changelog","previous_headings":"","what":"dgpsi 2.1.5-9000 (development version)","title":"dgpsi 2.1.5-9000 (development version)","text":"bug found multi-core predictions predict() object instance lgp class x list. bug fixed development version 2.1.5-9000 fixed next dgpsi release version 2.1.6. single-core predictions current release version 2.1.5 affected bug. issue (/usr/lib/x86_64-linux-gnu/libstdc++..6: version 'GLIBCXX_3.4.30' found) encountered Linux machines fixed automatically execution init_py(). gp() dgp() allow users specify value scale parameters whether estimate parameters. Training data now contained S3 classes gp dgp. RMSEs (without min-max normalization) emulators now contained S3 classes gp, dgp, lgp execution validate(). min-max normalization can now switched plot() setting value min_max. new function set_imp() made available change number imputations trained DGP emulator one can make faster predictions reducing number imputations without re-training emulator. implementation sequential designs (vignette) made available.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/dev/news/index.html","id":"dgpsi-215","dir":"Changelog","previous_headings":"","what":"dgpsi 2.1.5","title":"dgpsi 2.1.5","text":"CRAN release: 2022-09-29 Initial release R interface Python package dgpsi v2.1.5.","code":""}]
