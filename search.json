[{"path":"http://mingdeyu.github.io/dgpsi-R/articles/dgpsi.html","id":"load-packages-and-data","dir":"Articles","previous_headings":"","what":"Load packages and data","title":"A Quick Guide to dgpsi\n","text":"start first loading package setting required Python environment via init_py() init_py() provides automatic Python environment setup initialization routine must run every time package loaded. load training data points, scale , plot :","code":"library(dgpsi) library(MASS) init_py() X <- mcycle$times Y <- mcycle$accel X <- as.matrix((X - min(X))/(max(X)-min(X))) Y <- as.matrix(scale(Y, center = TRUE, scale = TRUE)) plot(X, Y, pch = 16, cex = 1, xlab = 'Time', ylab = 'Acceleration', cex.axis = 1.3, cex.lab = 1.3)"},{"path":"http://mingdeyu.github.io/dgpsi-R/articles/dgpsi.html","id":"construct-the-dgp-structure","dir":"Articles","previous_headings":"","what":"Construct the DGP structure","title":"A Quick Guide to dgpsi\n","text":"consider three-layered DGP structure: first layer DGP contains single GP node produced kernel() using squared exponential kernel length-scale 0.5. second layer contains two GP nodes, squared exponential kernel length-scale 0.2. switch estimation prior variances two GPs model mean variance heteroskedastic Gaussian likelihood node final layer. choose heteroskedastic likelihood node since data show varying noises. constructed DGP structure stored m can use summary() view key information specified DGP structure: comparison, also construct simple GP model (gp()) incorporates homogeneous noises: Note nugget estimation switched account noises. summary constructed GP model given ","code":"layer1 <- c(kernel(length = c(0.5), name = 'sexp')) layer2 <- c(kernel(length = c(0.2), name = 'sexp', scale_est = TRUE, connect = c(1)),             kernel(length = c(0.2), name = 'sexp', scale_est = TRUE, connect = c(1))) layer3 <- c(Hetero()) all_layer <- combine(layer1, layer2, layer3) m <- dgp(X, Y, all_layer) summary(m) ## +-----------+----------+---------------------+-----------------+---------------+-------------------+------------+-------------------+ ## | Layer No. | Node No. |        Type         | Length-scale(s) |   Variance    |      Nugget       | Input Dims | Global Connection | ## +-----------+----------+---------------------+-----------------+---------------+-------------------+------------+-------------------+ ## |  Layer 1  |  Node 1  |  GP (Squared-Exp)   |     [0.500]     | 1.000 (fixed) | 1.000e-06 (fixed) |    [1]     |        No         | ## |  Layer 2  |  Node 1  |  GP (Squared-Exp)   |     [0.200]     |     1.000     | 1.000e-06 (fixed) |    [1]     |        [1]        | ## |  Layer 2  |  Node 2  |  GP (Squared-Exp)   |     [0.200]     |     1.000     | 1.000e-06 (fixed) |    [1]     |        [1]        | ## |  Layer 3  |  Node 1  | Likelihood (Hetero) |       NA        |      NA       |        NA         |   [1, 2]   |        NA         | ## +-----------+----------+---------------------+-----------------+---------------+-------------------+------------+-------------------+ ## 1. 'Input Dims' presents the indices of GP nodes in the feeding layer whose outputs are used as the input to the current GP. ## 2. 'Global Connection' indicates the dimensions (i.e., column numbers) of the global input data that are used as additional input dimensions to the current GP. gp_node <- kernel(length = c(0.5), name = 'sexp', nugget = 1e-2, nugget_est = T, scale_est = T) m_gp <- gp(X, Y, gp_node) summary(m_gp) ## +-------------+-----------------+----------+--------+------------+ ## | Kernel Fun  | Length-scale(s) | Variance | Nugget | Input Dims | ## +-------------+-----------------+----------+--------+------------+ ## | Squared-Exp |     [0.500]     |  1.000   | 0.010  |    [1]     | ## +-------------+-----------------+----------+--------+------------+ ## 'Input Dims' indicates the dimensions (i.e., columns) of your input data that are actually used for GP training."},{"path":"http://mingdeyu.github.io/dgpsi-R/articles/dgpsi.html","id":"training-and-prediction","dir":"Articles","previous_headings":"","what":"Training and prediction","title":"A Quick Guide to dgpsi\n","text":"now able train constructed DGP GP models: DGP model, need construct separate emulator estimate() emulator() predictions: make predictions, can summarize trained GP: DGP: now ready make predictions models via predict() 200 testing positions \\([0,1]\\): Finally, plot predictions models check emulation performance:  visualization shows DGP model gives better performance GP model modeling heteroskedastic noises embedded underlying dataset.","code":"m_trained <- train(m) # training of DGP m_gp_trained <- train(m_gp) # training of GP ## Iteration 500: Layer 3: 100%|██████████| 500/500 [00:20<00:00, 24.80it/s] trained_struc=estimate(m_trained) emu <- emulator(trained_struc) summary(m_gp_trained) ## +-------------+-----------------+----------+--------+------------+ ## | Kernel Fun  | Length-scale(s) | Variance | Nugget | Input Dims | ## +-------------+-----------------+----------+--------+------------+ ## | Squared-Exp |     [0.132]     |  0.780   | 0.282  |    [1]     | ## +-------------+-----------------+----------+--------+------------+ ## 'Input Dims' indicates the dimensions (i.e., columns) of your input data that are actually used for GP training. summary(emu) ## +-----------+----------+---------------------+-----------------+---------------+-------------------+------------+-------------------+ ## | Layer No. | Node No. |        Type         | Length-scale(s) |   Variance    |      Nugget       | Input Dims | Global Connection | ## +-----------+----------+---------------------+-----------------+---------------+-------------------+------------+-------------------+ ## |  Layer 1  |  Node 1  |  GP (Squared-Exp)   |     [0.890]     | 1.000 (fixed) | 1.000e-06 (fixed) |    [1]     |        No         | ## |  Layer 2  |  Node 1  |  GP (Squared-Exp)   |     [0.530]     |     0.797     | 1.000e-06 (fixed) |    [1]     |        [1]        | ## |  Layer 2  |  Node 2  |  GP (Squared-Exp)   |     [0.848]     |    26.668     | 1.000e-06 (fixed) |    [1]     |        [1]        | ## |  Layer 3  |  Node 1  | Likelihood (Hetero) |       NA        |      NA       |        NA         |   [1, 2]   |        NA         | ## +-----------+----------+---------------------+-----------------+---------------+-------------------+------------+-------------------+ ## 1. 'Input Dims' presents the indices of GP nodes in the feeding layer whose outputs are used as the input to the current GP. ## 2. 'Global Connection' indicates the dimensions (i.e., column numbers) of the global input data that are used as additional input dimensions to the current GP. test_x <- as.matrix(seq(0, 1, length = 200)) res_dgp <- predict(emu, x = test_x) res_gp <- predict(m_gp_trained, x = test_x) # extract predictive means and variances from DGP mu_dgp <- res_dgp$mean # predictive means sd_dgp <- sqrt(res_dgp$var) # predictive variances and compute predictive standard deviations up_dgp <- mu_dgp + 2*sd_dgp # predictive upper bound lo_dgp <- mu_dgp - 2*sd_dgp # predictive lower bound  # extract predictive means and variances from GP mu_gp <- res_gp$mean sd_gp <- sqrt(res_gp$var) up_gp <- mu_gp + 2*sd_gp lo_gp <- mu_gp - 2*sd_gp  par(cex=0.7, mar = c(5, 5, 0.9, 0.9)+0.2) #GP par(fig = c(0, 0.5, 0.2, 0.8)) plot(test_x, mu_gp, type = 'l', lwd = 1.5, col = 'cornflowerblue', main = \"GP\", xlab = 'Time', ylab = 'Acceleration', ylim = c(-3.2,3.2)) polygon(c(test_x, rev(test_x)), c(up_gp, rev(lo_gp)), col = 'grey80', border = F) lines(X, Y, type = 'p',pch = 16, cex = 0.8) lines(test_x, mu_gp, type = 'l', lwd = 1.5, col = 'cornflowerblue') #DGP par(fig = c(0.5, 1, 0.2, 0.8), new = TRUE) plot(test_x, mu_dgp, type = 'l', lwd = 1.5, col = 'cornflowerblue', main = \"DGP\", xlab = 'Time', ylab = 'Acceleration', ylim = c(-3.2,3.2)) polygon(c(test_x, rev(test_x)), c(up_dgp, rev(lo_dgp)), col = 'grey80', border = F) lines(X, Y, type = 'p',pch = 16, cex = 0.8) lines(test_x, mu_dgp, type = 'l', lwd = 1.5, col = 'cornflowerblue')"},{"path":[]},{"path":"http://mingdeyu.github.io/dgpsi-R/articles/linked_DGP.html","id":"load-the-package","dir":"Articles","previous_headings":"","what":"Load the package","title":"Linked Emulation","text":"","code":"library(dgpsi) init_py()"},{"path":"http://mingdeyu.github.io/dgpsi-R/articles/linked_DGP.html","id":"construct-two-synthetic-models-and-their-linked-model","dir":"Articles","previous_headings":"","what":"Construct two synthetic models and their linked model","title":"Linked Emulation","text":"first define functional forms two synthetic models linked model: generate 9 training data points Model 1 13 training data points Model 2: also generate 300 testing data points \\([0,1]\\):","code":"# Model 1 f1 <- function(x) {   (sin(7.5*x)+1)/2 } # Model 2 f2 <- function(x) {   2/3*sin(2*(2*x - 1))+4/3*exp(-30*(2*(2*x-1))^2)-1/3   } # Linked Model  f12 <- function(x) {   f2(f1(x)) } # Model 1 X1 <- as.matrix(seq(0, 1, length = 9)) Y1 <- as.matrix(sapply(X1, f1)) # Model 2 X2 <- as.matrix(seq(0, 1, length = 13)) Y2 <- as.matrix(sapply(X2, f2)) # Model 1 test_x1 <- as.matrix(seq(0, 1, length = 300)) test_y1 <- as.matrix(sapply(test_x1, f1)) # Model 2 test_x2 <- as.matrix(seq(0, 1, length = 300)) test_y2 <- as.matrix(sapply(test_x2, f2)) # Linked Model test_y <- as.matrix(sapply(test_x1, f12))"},{"path":"http://mingdeyu.github.io/dgpsi-R/articles/linked_DGP.html","id":"emulation-of-model-1","dir":"Articles","previous_headings":"","what":"Emulation of Model 1","title":"Linked Emulation","text":"construct simple GP model Matérn-2.5 kernel length-scale initialized 1.0: now train GP model: make predictions trained model evaluate emulation performance Model 1 \\([0,1]\\):  emulation performance GP looks good now export (export()) GP node contained GP model contained (via container()) later use linked emulator construction: Note need explicitly inform container() columns output matrix (feeding layer) GP emulator Model 1 use input. Since input GP emulator Model 1 global input global input (column vector) feeds Model 1, column indices provide container() 1.","code":"m1 <- gp(X1, Y1, kernel(length = c(1.0), name = 'matern2.5', scale_est = TRUE)) m1_trained <- train(m1) res1 <- predict(m1_trained, x = test_x1)  mu1 <- res1$mean # predictive mean sd1 <- sqrt(res1$var) # predictive standard deviations up1 <- mu1 + 2*sd1 # predictive upper bound lo1 <- mu1 - 2*sd1 # predictive lower bound  plot(test_x1, mu1, type = 'l', lty = 2, lwd = 1.5, col = 'black', xlab = 'x1', cex.axis = 1, cex.lab = 1, ylab = 'y1 (x2)', ylim = c(-0.2,1.2))  # predictive means  polygon(c(test_x1, rev(test_x1)), c(up1,rev(lo1)), col = 'grey80', border = F) # predictive bounds lines(test_x1, test_y1, type = 'l', col = 'cornflowerblue', lwd = 2) # Underlying truth lines(test_x1, mu1, type = 'l', lty = 2, lwd = 1.5, col = 'black') lines(X1, Y1, type = 'p', pch = 16, cex = 1) # Training data points c1 <- container(export(m1), c(1))"},{"path":"http://mingdeyu.github.io/dgpsi-R/articles/linked_DGP.html","id":"emulation-of-model-2","dir":"Articles","previous_headings":"","what":"Emulation of Model 2","title":"Linked Emulation","text":"construct two-layered DGP model Matérn-2.5 kernels emulate Model 2: training DGP model taken care train(): use estimate() emulator() build DGP emulator trained DGP model m2_trained: following plot visualizes emulation performance DGP emulator:  DGP emulation Model 2 looks good well can export (objective produced estimate()) container() later use. Note DGP emulator absorbs output produced feeding layer (contains GP emulator Model 1). Since output feeding layer (.e., layer 1) column vector, column indices need inform container DGP emulator c(1).","code":"layer1 <- c(kernel(length = c(1.), name = 'matern2.5')) layer2 <- c(kernel(length = c(1.), name = 'matern2.5', scale_est = TRUE)) all_layer <- combine(layer1, layer2) m2 <- dgp(X2, Y2, all_layer) m2_trained <- train(m2) ## Iteration 500: Layer 2: 100%|██████████| 500/500 [00:03<00:00, 163.72it/s] # construct emulator trained_struc <- estimate(m2_trained) emu <- emulator(trained_struc) # make predictions res2 <- predict(emu, x = test_x2)  mu2 <- res2$mean sd2 <- sqrt(res2$var) up2 <- mu2 + 2*sd2 lo2 <- mu2 - 2*sd2  plot(test_x2, mu2, type = 'l', lty = 2, lwd = 1.5, col = 'black', xlab = 'x2 (y1)', cex.axis = 1, cex.lab = 1, ylab = 'y2', ylim = c(-1.2,1.7))  # predictive means  polygon(c(test_x2, rev(test_x2)), c(up2, rev(lo2)), col = 'grey80', border = F) # predictive bounds lines(test_x2, test_y2, type = 'l', col = 'cornflowerblue', lwd = 2) # underlying truth lines(test_x2, mu2, type = 'l', lty = 2, lwd = 1.5, col = 'black') lines(X2, Y2, type = 'p', pch = 16, cex = 1) # training data points c2 <- container(trained_struc, c(1))"},{"path":"http://mingdeyu.github.io/dgpsi-R/articles/linked_DGP.html","id":"emulation-of-model-1-model-2","dir":"Articles","previous_headings":"","what":"Emulation of Model 1 + Model 2","title":"Linked Emulation","text":"containers c1 (Model 1) c2 (Model 2) hand, now ready build linked emulator first using combine() construct system hierarchy struc applying lgp() linked emulator. Note layer computer model system represented list. case, one GP emulator first layer DGP emulator second layer. Therefore, need put corresponding containers list using c() list(). can check relations connected emulators using summary() lm: comparison, construct GP emulator whole system generating 13 training data points Model 1 Model 2: final step, make predictions GP emulator linked emulator: plot predictions compare emulation performances:","code":"struc <- combine(c(c1), c(c2)) lm <- lgp(struc) summary(lm) ## +-----------+--------------+------+----------------------------+-----------------+ ## | Layer No. | Emulator No. | Type |         Connection         | External Inputs | ## +-----------+--------------+------+----------------------------+-----------------+ ## |  Layer 1  |    Emu 1     |  GP  |     Global input: [1]      |       No        | ## |  Layer 2  |    Emu 1     | DGP  | Emu 1 in Layer 1: output 1 |       No        | ## +-----------+--------------+------+----------------------------+-----------------+ ## 1. 'Connection' gives the indices of emulators and the associated output dimensions that are linked to the current emulator. ## 2. 'External Inputs' indicates if the current emulator has external inputs that are not provided by the feeding emulators. X_gp <- as.matrix(seq(0, 1, length = 13)) Y_gp <- as.matrix(sapply(X_gp, f12)) m_gp <- gp(X_gp, Y_gp, kernel(length = c(1.0), name = 'matern2.5', scale_est = TRUE)) m_gp_trained <- train(m_gp) # linked emulator res <- predict(lm, x = test_x1) # GP emulator res_gp <- predict(m_gp_trained, x = test_x1) # extract predictive means and variances from the linked emulator mu <- res$mean$emulator1 sd <- sqrt(res$var$emulator1) up <- mu + 2*sd lo <- mu - 2*sd  # extract predictive means and variances from the GP emulator mu_gp <- res_gp$mean sd_gp <- sqrt(res_gp$var) up_gp <- mu_gp + 2*sd_gp lo_gp <- mu_gp - 2*sd_gp  par(cex=0.7, mar = c(5, 5, 0.9, 0.9)+0.2) # GP emulator par(fig = c(0, 0.5, 0.2, 0.8)) plot(test_x1, mu_gp, type = 'l', lty = 2, lwd = 1.5, col = 'black', main = \"GP Emulator\", xlab = 'x1', ylab = 'y2', ylim=c(-1.7,1.7)) polygon(c(test_x1, rev(test_x1)), c(up_gp, rev(lo_gp)), col = 'grey80', border = F) lines(test_x1, test_y, type = 'l', col = 'cornflowerblue', lwd = 2)  lines(test_x1, mu_gp, type = 'l', lty = 2, lwd = 1.5, col = 'black') # linked emulator par(fig = c(0.5, 1, 0.2, 0.8), new = TRUE) plot(test_x1, mu, type = 'l', lty = 2, lwd = 1.5, col = 'black', main = \"Linked Emulator\", xlab = 'x1', ylab = 'y2', ylim=c(-1.7,1.7)) polygon(c(test_x1, rev(test_x1)), c(up, rev(lo)), col = 'grey80', border = F) lines(test_x1, test_y, type = 'l', col = 'cornflowerblue', lwd = 2)  lines(test_x1, mu, type = 'l', lty = 2, lwd = 1.5, col = 'black')"},{"path":"http://mingdeyu.github.io/dgpsi-R/articles/step_fct.html","id":"load-the-package","dir":"Articles","previous_headings":"","what":"Load the package","title":"Step Function","text":"dgpsi R provides initialization function init_py() helps set initialize required Python environment automatically. just need run init_py() every time package loaded initiate underlying Python environment.","code":"library(dgpsi) init_py()"},{"path":"http://mingdeyu.github.io/dgpsi-R/articles/step_fct.html","id":"set-up-the-step-function","dir":"Articles","previous_headings":"","what":"Set up the step function","title":"Step Function","text":"first define step function: generate ten training data points: 200 testing data points \\([0,1]\\):","code":"f <- function(x) {   if (x < 0.5) return(-1)   if (x >= 0.5) return(1) } X <- as.matrix(seq(0, 1, length = 10)) Y <- as.matrix(sapply(X, f)) test_x <- as.matrix(seq(0, 1, length = 200)) test_y <- as.matrix(sapply(test_x, f))"},{"path":"http://mingdeyu.github.io/dgpsi-R/articles/step_fct.html","id":"construct-the-dgp-structure","dir":"Articles","previous_headings":"","what":"Construct the DGP structure","title":"Step Function","text":"now build DGP structure three layers: Note layer list contains one GP node defined kernel() function. case use squared exponential kernel GP nodes every layer initial length-scale unit. default, scale (.e., prior variance) GP node fixed 1.0 switch estimation scale GP node final layer attaches output data. use combine() function combine layers DGP hierarchy feeds dgp() form DGP object. key information constructed DGP structure can viewed using summary() function: summary table summarizes key information constructed DGP model. Note fixed nugget terms 1e-6 GP nodes emulating deterministic step function (.e., like emulator interpolate training data points). prior variances (.e., scales) GP nodes first second layers fixed 1 GP node final layer estimated (initial value 1.0) due attachment output. information attributes table change default setting individual GP nodes, see ?kernel.","code":"layer1 <- c(kernel(length = c(1.0), name = 'sexp')) layer2 <- c(kernel(length = c(1.0), name = 'sexp')) layer3 <- c(kernel(length = c(1.0), name = 'sexp', scale_est = TRUE)) all_layer <- combine(layer1, layer2, layer3) m <- dgp(X, Y, all_layer) summary(m) ## +-----------+----------+------------------+-----------------+---------------+-------------------+------------+-------------------+ ## | Layer No. | Node No. |       Type       | Length-scale(s) |   Variance    |      Nugget       | Input Dims | Global Connection | ## +-----------+----------+------------------+-----------------+---------------+-------------------+------------+-------------------+ ## |  Layer 1  |  Node 1  | GP (Squared-Exp) |     [1.000]     | 1.000 (fixed) | 1.000e-06 (fixed) |    [1]     |        No         | ## |  Layer 2  |  Node 1  | GP (Squared-Exp) |     [1.000]     | 1.000 (fixed) | 1.000e-06 (fixed) |    [1]     |        No         | ## |  Layer 3  |  Node 1  | GP (Squared-Exp) |     [1.000]     |     1.000     | 1.000e-06 (fixed) |    [1]     |        No         | ## +-----------+----------+------------------+-----------------+---------------+-------------------+------------+-------------------+ ## 1. 'Input Dims' presents the indices of GP nodes in the feeding layer whose outputs are used as the input to the current GP. ## 2. 'Global Connection' indicates the dimensions (i.e., column numbers) of the global input data that are used as additional input dimensions ## to the current GP."},{"path":"http://mingdeyu.github.io/dgpsi-R/articles/step_fct.html","id":"training-and-prediction","dir":"Articles","previous_headings":"","what":"Training and prediction","title":"Step Function","text":"DGP object constructed, can train model using train() function: progress bar displayed shows long takes finish training. able change default settings, e.g., longer training iterations switch progress bar. Note want continue training iterations, can simply m_trained_new <- train(m_trained) instead rebuilding DGP object. training finished, can construct emulator predictions: estimate() function extracts trained structure trained DGP object structure feeds emulator() form emulator object. point, use write() save emulator emu local file load using read() next time simply like make predictions emulator. following code produces table summarizes key information GP nodes contained emulator: Note variance (.e., scale) GP node final layer length-scales GP nodes changed due training. emulator ready, time make predictions : predict() function returns named list gives posterior predictive means variances testing positions. can extract information plot emulation results check predictive performance constructed DGP emulator:","code":"m_trained <- train(m) ## Iteration 500: Layer 3: 100%|██████████| 500/500 [00:04<00:00, 109.16it/s] trained_struc=estimate(m_trained) emu <- emulator(trained_struc) summary(emu) ## +-----------+----------+------------------+-----------------+---------------+-------------------+------------+-------------------+ ## | Layer No. | Node No. |       Type       | Length-scale(s) |   Variance    |      Nugget       | Input Dims | Global Connection | ## +-----------+----------+------------------+-----------------+---------------+-------------------+------------+-------------------+ ## |  Layer 1  |  Node 1  | GP (Squared-Exp) |     [0.544]     | 1.000 (fixed) | 1.000e-06 (fixed) |    [1]     |        No         | ## |  Layer 2  |  Node 1  | GP (Squared-Exp) |     [0.890]     | 1.000 (fixed) | 1.000e-06 (fixed) |    [1]     |        No         | ## |  Layer 3  |  Node 1  | GP (Squared-Exp) |     [1.413]     |     0.290     | 1.000e-06 (fixed) |    [1]     |        No         | ## +-----------+----------+------------------+-----------------+---------------+-------------------+------------+-------------------+ ## 1. 'Input Dims' presents the indices of GP nodes in the feeding layer whose outputs are used as the input to the current GP. ## 2. 'Global Connection' indicates the dimensions (i.e., column numbers) of the global input data that are used as additional input dimensions to the current GP. res <- predict(emu, x = test_x) mu <- res$mean # extract the predictive means  sd <- sqrt(res$var) # extract the predictive variance and compute the predictive standard deviations # compute predictive bounds which are two predictive standard deviations above and below the predictive means up <- mu + 2*sd  lo <- mu - 2*sd  plot(test_x, mu, type = 'l', lty = 2, lwd = 1.5, col = 'black', xlab = 'x', cex.axis = 1.3, cex.lab = 1.3, ylab = 'y', ylim = c(-1.5,1.5))  # predictive means  polygon(c(test_x, rev(test_x)), c(up,rev(lo)), col = 'grey80', border = F) # predictive bounds lines(test_x, test_y, type = 'l', col = 'cornflowerblue', lwd = 2) # Underlying truth lines(test_x, mu, type = 'l', lty = 2, lwd = 1.5, col = 'black') lines(X, Y, type = 'p', pch = 16, cex = 1) # Training data points"},{"path":"http://mingdeyu.github.io/dgpsi-R/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Deyu Ming. Maintainer.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Ming, D. Guillas, S. (2021) Linked Gaussian process emulation systems computer models using Matérn kernels adaptive design, SIAM/ASA Journal Uncertainty Quantification. 9(4), 1615-1642. URL https://epubs.siam.org/doi/abs/10.1137/20M1323771. Ming, D., Williamson, D., Guillas, S. (2022) Deep Gaussian process emulation using stochastic imputation, Technometrics (appear). URL https://arxiv.org/abs/2107.01590.","code":"@Article{,   title = {Linked Gaussian process emulation for systems of computer models using Matérn kernels and adaptive design},   author = {Deyu Ming and Serge Guillas},   journal = {SIAM/ASA Journal on Uncertainty Quantification},   year = {2021},   volume = {9},   number = {4},   pages = {1615--1642},   url = {https://epubs.siam.org/doi/abs/10.1137/20M1323771}, } @Article{,   title = {Deep Gaussian process emulation using stochastic imputation},   author = {Deyu Ming and Daniel Williamson and Serge Guillas},   journal = {Technometrics (to appear)},   year = {2022},   url = {https://arxiv.org/abs/2107.01590}, }"},{"path":"http://mingdeyu.github.io/dgpsi-R/index.html","id":"dgpsi-r","dir":"","previous_headings":"","what":"R Interface to dgpsi","title":"R Interface to dgpsi","text":"R package dgpsi provides R interface Python package dgpsi deep linked Gaussian process emulations. package currently following features: multiple layers; multiple GP nodes; separable non-separable squared exponential Matérn2.5 kernels; global input connections; non-Gaussian likelihoods (Poisson, Negative-Binomial, heteroskedastic Gaussian, come); linking GP emulators deterministic individual computer models; linking GP DGP emulators deterministic individual computer models; Multi-core predictions GP, DGP, Linked (D)GP emulators.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/index.html","id":"documentation","dir":"","previous_headings":"","what":"Documentation","title":"R Interface to dgpsi","text":"See https://mingdeyu.github.io/dgpsi-R learn package.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"R Interface to dgpsi","text":"now, can install package GitHub repo (way CRAN): RStudio Console, type: package depends {reticulate} {benchmarkme}. Restart RStudio. Load package initialize required Python environment:","code":"devtools::install_github('mingdeyu/dgpsi-R') library(dgpsi) init_py()"},{"path":"http://mingdeyu.github.io/dgpsi-R/index.html","id":"references","dir":"","previous_headings":"","what":"References","title":"R Interface to dgpsi","text":"Ming, D., Williamson, D., Guillas, S. (2022) Deep Gaussian process emulation using stochastic imputation. Technometrics (appear). Ming, D. Guillas, S. (2021) Linked Gaussian process emulation systems computer models using Matérn kernels adaptive design, SIAM/ASA Journal Uncertainty Quantification. 9(4), 1615-1642.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/reference/Hetero.html","id":null,"dir":"Reference","previous_headings":"","what":"Initialize the heteroskedastic Gaussian likelihood — Hetero","title":"Initialize the heteroskedastic Gaussian likelihood — Hetero","text":"function constructs object heteroskedastic Gaussian likelihood.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/reference/Hetero.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Initialize the heteroskedastic Gaussian likelihood — Hetero","text":"","code":"Hetero(input_dim = NULL)"},{"path":"http://mingdeyu.github.io/dgpsi-R/reference/Hetero.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initialize the heteroskedastic Gaussian likelihood — Hetero","text":"input_dim vector length two contains indices two GPs feeding layer whose outputs feed likelihood node. set NULL, outputs GPs feeding layer feed likelihood node, case one needs ensure two GP nodes specified feeding layer.. Defaults NULL.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/reference/Hetero.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Initialize the heteroskedastic Gaussian likelihood — Hetero","text":"object represent heteroskedastic Gaussian likelihood node.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/reference/Hetero.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Initialize the heteroskedastic Gaussian likelihood — Hetero","text":"See examples Articles https://mingdeyu.github.io/dgpsi-R.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/reference/Hetero.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Initialize the heteroskedastic Gaussian likelihood — Hetero","text":"heteroskedastic Gaussian likelihood node needs two feeding GP nodes.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/reference/NegBin.html","id":null,"dir":"Reference","previous_headings":"","what":"Initialize the negative Binomial likelihood — NegBin","title":"Initialize the negative Binomial likelihood — NegBin","text":"function constructs object negative Binomial likelihood.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/reference/NegBin.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Initialize the negative Binomial likelihood — NegBin","text":"","code":"NegBin(input_dim = NULL)"},{"path":"http://mingdeyu.github.io/dgpsi-R/reference/NegBin.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initialize the negative Binomial likelihood — NegBin","text":"input_dim vector length two contains indices two GPs feeding layer whose outputs feed likelihood node. set NULL, outputs GPs feeding layer feed likelihood node, case one needs ensure two GP nodes specified feeding layer. Defaults NULL.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/reference/NegBin.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Initialize the negative Binomial likelihood — NegBin","text":"object represent negative Binomial likelihood node.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/reference/NegBin.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Initialize the negative Binomial likelihood — NegBin","text":"See examples Articles https://mingdeyu.github.io/dgpsi-R.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/reference/NegBin.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Initialize the negative Binomial likelihood — NegBin","text":"negative Binomial likelihood node needs two feeding GP nodes.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/reference/Poisson.html","id":null,"dir":"Reference","previous_headings":"","what":"Initialize the Poisson likelihood — Poisson","title":"Initialize the Poisson likelihood — Poisson","text":"function constructs object Poisson likelihood.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/reference/Poisson.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Initialize the Poisson likelihood — Poisson","text":"","code":"Poisson(input_dim = NULL)"},{"path":"http://mingdeyu.github.io/dgpsi-R/reference/Poisson.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initialize the Poisson likelihood — Poisson","text":"input_dim vector length one contains indices one GP feeding layer whose outputs feed likelihood node. set NULL, outputs GPs feeding layer feed likelihood node, case one needs ensure one GP node specified feeding layer.. Defaults NULL.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/reference/Poisson.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Initialize the Poisson likelihood — Poisson","text":"object represent Poissonlikelihood node.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/reference/Poisson.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Initialize the Poisson likelihood — Poisson","text":"See examples Articles https://mingdeyu.github.io/dgpsi-R.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/reference/Poisson.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Initialize the Poisson likelihood — Poisson","text":"Poisson likelihood node needs one feeding GP node.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/reference/combine.html","id":null,"dir":"Reference","previous_headings":"","what":"Combine layers — combine","title":"Combine layers — combine","text":"function combines layers one list DGP linked (D)GP structure.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/reference/combine.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Combine layers — combine","text":"","code":"combine(...)"},{"path":"http://mingdeyu.github.io/dgpsi-R/reference/combine.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Combine layers — combine","text":"... sequence lists, contains GP nodes (produced kernel()), likelihood nodes (e.g., produced Poisson()), containers (produced container()) layer.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/reference/combine.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Combine layers — combine","text":"list layers defining DGP linked (D)GP structure.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/reference/combine.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Combine layers — combine","text":"See examples Articles https://mingdeyu.github.io/dgpsi-R.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/reference/container.html","id":null,"dir":"Reference","previous_headings":"","what":"Initialize the container object — container","title":"Initialize the container object — container","text":"function constructs object contains trained GP DGP emulator computer model linked (D)GP emulation.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/reference/container.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Initialize the container object — container","text":"","code":"container(structure, local_input_idx = NULL)"},{"path":"http://mingdeyu.github.io/dgpsi-R/reference/container.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initialize the container object — container","text":"structure list contains trained structure GP DGP computer model. GP, list exported export(). DGP, list exported estimate() . local_input_idx vector specifies indices (.e., columns) outputs (matrix) produced models feeding layer input emulator represented structure argument. indices ordered way extracted output feeding layer sorted order training input used GP/DGP emulator structure argument represents. emulator first layer, local_input_idx gives indices input global testing input set, see predict() descriptions global testing input set. Defaults NULL. argument NULL, one needs set value applying set_local_input() returned container object.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/reference/container.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Initialize the container object — container","text":"container object used linked GP emulation.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/reference/container.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Initialize the container object — container","text":"See examples Articles https://mingdeyu.github.io/dgpsi-R.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/reference/dgp.html","id":null,"dir":"Reference","previous_headings":"","what":"Initialize the DGP object — dgp","title":"Initialize the DGP object — dgp","text":"function constructs object deep Gaussian process training.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/reference/dgp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Initialize the DGP object — dgp","text":"","code":"dgp(X, Y, all_layer = NULL, check_rep = TRUE, rff = FALSE, M = NULL)"},{"path":"http://mingdeyu.github.io/dgpsi-R/reference/dgp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initialize the DGP object — dgp","text":"X matrix row input training data point column input dimension. Y matrix containing observed training output data.. matrix rows output data points columns output dimensions (number columns equals number GP nodes final layer). all_layer list contains L (number layers) sub-lists, contains GPs defined kernel() function layer. sub-lists placed list order specified DGP model. final layer DGP hierarchy can set likelihood layer putting object created likelihood function (e.g., Poisson()) final sub-list all_layer. Defaults NULL. DGP structure provided, input-connected two-layered DGP structure (deterministic model emulation) number GP nodes first layer equal dimension X automatically constructed. check_rep whether check repetitions dataset, .e., one input position multiple outputs. Defaults TRUE. rff whether use random Fourier features approximate correlation matrices imputation training. Defaults FALSE. M number features used random Fourier approximation. used rff set TRUE. Defaults NULL. specified, M set max(100, ceil(sqrt(Data Size)*log(Data Size)))).","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/reference/dgp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Initialize the DGP object — dgp","text":"DGP object used train() DGP training.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/reference/dgp.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Initialize the DGP object — dgp","text":"See examples Articles https://mingdeyu.github.io/dgpsi-R.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/reference/emulator.html","id":null,"dir":"Reference","previous_headings":"","what":"Initialize the emulator object — emulator","title":"Initialize the emulator object — emulator","text":"function constructs object deep Gaussian process predictions.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/reference/emulator.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Initialize the emulator object — emulator","text":"","code":"emulator(all_layer, N = 50, nb_parallel = FALSE)"},{"path":"http://mingdeyu.github.io/dgpsi-R/reference/emulator.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initialize the emulator object — emulator","text":"all_layer trained DGP model produced estimate(). N number imputation produce predictions. Increase value account imputation uncertainties. Defaults 50. nb_parallel whether use multi-threading accelerate predictions. Defaults FALSE.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/reference/emulator.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Initialize the emulator object — emulator","text":"emulator object used predict() ppredict() DGP predictions.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/reference/emulator.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Initialize the emulator object — emulator","text":"See examples Articles https://mingdeyu.github.io/dgpsi-R.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/reference/estimate.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimating the final DGP model — estimate","title":"Estimating the final DGP model — estimate","text":"function estimates final DGP model model trained using train() function.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/reference/estimate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimating the final DGP model — estimate","text":"","code":"estimate(obj, burnin = NULL)"},{"path":"http://mingdeyu.github.io/dgpsi-R/reference/estimate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimating the final DGP model — estimate","text":"obj DGP object produced train() function. burnin number SEM iterations discarded point estimate calculation. Must smaller SEM iterations implemented. specified, last 25% iterations used. Defaults NULL.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/reference/estimate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimating the final DGP model — estimate","text":"DGP object used construct emulator emulator() function.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/reference/estimate.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Estimating the final DGP model — estimate","text":"See examples Articles https://mingdeyu.github.io/dgpsi-R.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/reference/export.html","id":null,"dir":"Reference","previous_headings":"","what":"Export the trained GP model — export","title":"Export the trained GP model — export","text":"function exports GP model trained using train() used linked Gaussian process constructions.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/reference/export.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Export the trained GP model — export","text":"","code":"export(obj)"},{"path":"http://mingdeyu.github.io/dgpsi-R/reference/export.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Export the trained GP model — export","text":"obj GP model produced train() function.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/reference/export.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Export the trained GP model — export","text":"GP object representing trained GP.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/reference/export.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Export the trained GP model — export","text":"See examples Articles https://mingdeyu.github.io/dgpsi-R.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/reference/gp.html","id":null,"dir":"Reference","previous_headings":"","what":"Initialize the GP object — gp","title":"Initialize the GP object — gp","text":"function constructs object Gaussian process training.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/reference/gp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Initialize the GP object — gp","text":"","code":"gp(X, Y, kernel)"},{"path":"http://mingdeyu.github.io/dgpsi-R/reference/gp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initialize the GP object — gp","text":"X matrix row input data point column input dimension. Y matrix one column row input data point. kernel kernel object produced kernel() function.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/reference/gp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Initialize the GP object — gp","text":"GP object used train() GP training.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/reference/gp.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Initialize the GP object — gp","text":"See examples Articles https://mingdeyu.github.io/dgpsi-R.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/reference/init_py.html","id":null,"dir":"Reference","previous_headings":"","what":"Initialize the Python environment — init_py","title":"Initialize the Python environment — init_py","text":"Initialize Python environment","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/reference/init_py.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Initialize the Python environment — init_py","text":"","code":"init_py()"},{"path":"http://mingdeyu.github.io/dgpsi-R/reference/init_py.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Initialize the Python environment — init_py","text":"See examples Articles https://mingdeyu.github.io/dgpsi-R.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/reference/kernel.html","id":null,"dir":"Reference","previous_headings":"","what":"Initialize the kernel object — kernel","title":"Initialize the kernel object — kernel","text":"function constructs object represent properties Gaussian process node.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/reference/kernel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Initialize the kernel object — kernel","text":"","code":"kernel(   length,   scale = 1,   nugget = 1e-06,   name = \"sexp\",   prior_name = \"ga\",   prior_coef = c(1.6, 0.3),   nugget_est = FALSE,   scale_est = FALSE,   input_dim = NULL,   connect = NULL )"},{"path":"http://mingdeyu.github.io/dgpsi-R/reference/kernel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initialize the kernel object — kernel","text":"length vector lengthscales. length vector equals : either one lengthscales kernel function assumed across input dimensions; total number input dimensions, sum number feeding GPs last layer (defined argument input_dim) number connected global input dimensions (defined argument connect), lengthscales kernel function assumed different across input dimensions. scale variance GP. Defaults 1. nugget nugget term GP. Defaults 1e-6. name kernel function used. Either \"sexp\" squared exponential kernel \"matern2.5\" Matern2.5 kernel. Defaults \"sexp\". prior_name prior options lengthscales nugget term. Either gamma (\"ga\") inverse gamma (\"inv_ga\") distribution lengthscales nugget term. Set NULL disable prior. Defaults \"ga\". prior_coef vector contains two values specifying shape rate parameters gamma prior, shape scale parameters inverse gamma prior. Defaults c(1.6,0.3). nugget_est set TRUE estimate nugget term FALSE fix nugget term specified argument nugget. set TRUE, value set argument nugget used initial value. Defaults FALSE. scale_est set TRUE estimate variance FALSE fix variance specified argument scale. Defaults FALSE. input_dim vector contains either indices GPs feeding layer whose outputs feed GP; indices dimensions global input GP first layer. set NULL, outputs GPs feeding layer; global input dimensions feed GP. Defaults NULL. connect vector contains indices dimensions global input connecting GP additional input dimensions input obtained output GPs feeding layer (determined argument input_dim). set NULL, global input connection implemented. Defaults NULL. kernel() function used GP/DGP emulators linked emulation input dimensions computer models connected feeding computer models, set connect vector indices external global input dimensions, accordingly, set input_dim vector indices remaining input dimensions connected feeding computer models.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/reference/kernel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Initialize the kernel object — kernel","text":"kernel object represent GP node.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/reference/kernel.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Initialize the kernel object — kernel","text":"See examples Articles https://mingdeyu.github.io/dgpsi-R.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/reference/lgp.html","id":null,"dir":"Reference","previous_headings":"","what":"Initialize the linked (D)GP object — lgp","title":"Initialize the linked (D)GP object — lgp","text":"function constructs object linked (D)GP predictions.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/reference/lgp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Initialize the linked (D)GP object — lgp","text":"","code":"lgp(all_layer, N = 50, nb_parallel = FALSE)"},{"path":"http://mingdeyu.github.io/dgpsi-R/reference/lgp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initialize the linked (D)GP object — lgp","text":"all_layer list contains L (number layers systems computer models) sub-lists, represents layer contains GP/DGP emulators computer models represented containers constructed container(). sub-lists placed list order specified computer model system. N number imputation produce predictions. Increase value account imputation uncertainties. system consists GP emulators, N set 1 automatically. Defaults 50. nb_parallel whether use multi-threading accelerate predictions. Defaults FALSE.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/reference/lgp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Initialize the linked (D)GP object — lgp","text":"linked (D)GP object used predict() ppredict() linked (D)GP predictions.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/reference/lgp.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Initialize the linked (D)GP object — lgp","text":"See examples Articles https://mingdeyu.github.io/dgpsi-R.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/reference/nllik.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate negative predicted log-likelihood — nllik","title":"Calculate negative predicted log-likelihood — nllik","text":"function compute negative predicted log-likelihood trained DGP likelihood layer.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/reference/nllik.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate negative predicted log-likelihood — nllik","text":"","code":"nllik(obj, x, y)"},{"path":"http://mingdeyu.github.io/dgpsi-R/reference/nllik.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate negative predicted log-likelihood — nllik","text":"obj DGP object produced emulator() x matrix row input testing data point column input dimension. y matrix one column row scalar-valued testing output data point.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/reference/nllik.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate negative predicted log-likelihood — nllik","text":"named list two components. first one, named meanNLL, scalar gives average negative predicted log-likelihood across testing data points. second one, named NLL, vector gives negative predicted log-likelihood testing data point.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/reference/nllik.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate negative predicted log-likelihood — nllik","text":"See examples Articles https://mingdeyu.github.io/dgpsi-R.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/reference/ppredict.html","id":null,"dir":"Reference","previous_headings":"","what":"Multi-core predictions from GP, DGP, or linked (D)GP emulators — ppredict","title":"Multi-core predictions from GP, DGP, or linked (D)GP emulators — ppredict","text":"function implements multi-core prediction GP, DGP, linked (D)GP emulators.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/reference/ppredict.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Multi-core predictions from GP, DGP, or linked (D)GP emulators — ppredict","text":"","code":"ppredict(   obj,   x,   method = \"mean_var\",   full_layer = FALSE,   sample_size = 50,   chunk_num = NULL,   core_num = NULL )"},{"path":"http://mingdeyu.github.io/dgpsi-R/reference/ppredict.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Multi-core predictions from GP, DGP, or linked (D)GP emulators — ppredict","text":"obj predict(). x predict(). method predict(). full_layer predict(). sample_size predict(). chunk_num number chunks testing input matrix x divided . Defaults NULL. specified, number chunks set core_num. core_num number cores/workers used. Defaults NULL. specified, number cores set (max physical cores available - 1).","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/reference/ppredict.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Multi-core predictions from GP, DGP, or linked (D)GP emulators — ppredict","text":"predict().","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/reference/ppredict.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Multi-core predictions from GP, DGP, or linked (D)GP emulators — ppredict","text":"See examples Articles https://mingdeyu.github.io/dgpsi-R.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/reference/predict.html","id":null,"dir":"Reference","previous_headings":"","what":"Predictions from GP, DGP, or linked (D)GP emulators — predict","title":"Predictions from GP, DGP, or linked (D)GP emulators — predict","text":"function implements prediction GP, DGP, linked (D)GP emulators.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/reference/predict.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Predictions from GP, DGP, or linked (D)GP emulators — predict","text":"","code":"predict(obj, x, method = \"mean_var\", full_layer = FALSE, sample_size = 50)"},{"path":"http://mingdeyu.github.io/dgpsi-R/reference/predict.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Predictions from GP, DGP, or linked (D)GP emulators — predict","text":"obj GP, DGP, linked (D)GP object produced gp() (applying train()), emulator(), lgp(). x matrix row input testing data point column input dimension. method prediction approach: mean-variance (\"mean_var\") sampling (\"sampling\") approach. Defaults \"mean_var\". full_layer whether output predictions layers. Defaults FALSE. used obj DGP linked (D)GP. sample_size number samples draw given imputation method = \"sampling\". Defaults 50.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/reference/predict.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Predictions from GP, DGP, or linked (D)GP emulators — predict","text":"(GP case) obj produced train() object built gp(): method = \"mean_var\": named list returned contains two matrices named mean predictive means var predictive variances. matrix one column rows corresponding testing positions (.e., row x). method = \"sampling\": matrix returned whose rows corresponding testing positions columns corresponding sample_size number samples drawn predictive distribution GP. (DGP case) obj produced emulator(): method = \"mean_var\"  full_layer = FALSE: named list returned. list contains two matrices named mean predictive means var predictive variances respectively. matrix rows corresponding testing positions columns corresponding DGP global output dimensions (.e., number GP/likelihood nodes final layer). method = \"mean_var\"  full_layer = TRUE: named list returned. list contains two sub-lists named mean predictive means var predictive variances respectively. sub-list contains L (.e., number layers) matrices named layer1, layer2,..., layerL. matrix rows corresponding testing positions columns corresponding output dimensions (.e., number GP nodes associated layer case final layer, may number likelihood nodes). method = \"sampling\"  full_layer = FALSE: named list returned. list contains D (.e., number GP/likelihood nodes final layer) matrices named output1, output2,..., outputD. matrix rows corresponding testing positions columns corresponding samples size: N * sample_size, N number imputations specified emulator(). method = \"sampling\"  full_layer = TRUE: named list returned. list contains L (.e., number layers) sub-lists named layer1, layer2,..., layerL. sub-list represents samples drawn GPs/likelihoods corresponding layers, contains D (.e., number GP nodes corresponding layer likelihood nodes final layer) matrices named output1, output2,..., outputD. matrix gives samples output one D GPs/likelihoods testing positions, rows corresponding testing positions columns corresponding samples size: N * sample_size, N number imputations specified emulator(). (Linked (D)GP case) obj produced lgp(): method = \"mean_var\"  full_layer = FALSE: named list returned. list contains two sub-lists named mean predictive means var predictive variances respectively. sub-list contains M number (number computer models final layer system) matrices named emulator1, emulator2,..., emulatorM. matrix rows corresponding global testing positions columns corresponding output dimensions associated emulator final layer. method = \"mean_var\"  full_layer = TRUE: named list returned. list contains two sub-lists named mean predictive means var predictive variances respectively. sub-list contains L (.e., number layers emulated system) components named layer1, layer2,..., layerL. component represents layer contains M number (number emulators corresponding layer system) matrices named emulator1, emulator2,..., emulatorM. matrix rows corresponding global testing positions columns corresponding output dimensions associated GP/DGP emulator corresponding layer. method = \"sampling\"  full_layer = FALSE: named list returned. list contains M number (number emulators final layer system) sub-lists named emulator1, emulator2,..., emulatorM. sub-list corresponds emulator final layer, contains D matrices, named output1, output2,..., outputD, correspond output dimensions GP/DGP emulator. matrix rows corresponding testing positions columns corresponding samples size: N * sample_size, N number imputations specified emulator(). method = \"sampling\"  full_layer = TRUE: named list returned. list contains L (.e., number layers emulated system) sub-lists named layer1, layer2,..., layerL. sub-list represents layer contains M number (number emulators corresponding layer system) components named emulator1, emulator2,..., emulatorM. component corresponds emulator associated layer, contains D matrices, named output1, output2,..., outputD, correspond output dimensions GP/DGP emulator. matrix rows corresponding testing positions columns corresponding samples size: N * sample_size, N number imputations specified emulator().","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/reference/predict.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Predictions from GP, DGP, or linked (D)GP emulators — predict","text":"See examples Articles https://mingdeyu.github.io/dgpsi-R.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/reference/read.html","id":null,"dir":"Reference","previous_headings":"","what":"Load the stored emulator object — read","title":"Load the stored emulator object — read","text":"function loads .pkl file stores emulator.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/reference/read.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load the stored emulator object — read","text":"","code":"read(pkl_file)"},{"path":"http://mingdeyu.github.io/dgpsi-R/reference/read.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load the stored emulator object — read","text":"pkl_file path name .pkl file emulator stored.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/reference/read.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Load the stored emulator object — read","text":"emulator object. See write().","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/reference/read.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Load the stored emulator object — read","text":"See examples Articles https://mingdeyu.github.io/dgpsi-R.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/reference/set_local_input.html","id":null,"dir":"Reference","previous_headings":"","what":"Set local input indices — set_local_input","title":"Set local input indices — set_local_input","text":"function sets value local_input_idx container object value set container object constructed container().","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/reference/set_local_input.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set local input indices — set_local_input","text":"","code":"set_local_input(obj, idx)"},{"path":"http://mingdeyu.github.io/dgpsi-R/reference/set_local_input.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set local input indices — set_local_input","text":"obj container object produced container(). idx local_input_idx container().","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/reference/set_local_input.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set local input indices — set_local_input","text":"container object used linked GP emulation.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/reference/set_local_input.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Set local input indices — set_local_input","text":"See examples Articles https://mingdeyu.github.io/dgpsi-R.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/reference/set_local_input.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Set local input indices — set_local_input","text":"function useful different models emulated different teams. team can create container model even without knowing different models connected together. information available containers different emulators collected, connections emulators can set assigning values local_input_idx container function.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/reference/set_nb_parallel.html","id":null,"dir":"Reference","previous_headings":"","what":"Implement multi-threading in predictions — set_nb_parallel","title":"Implement multi-threading in predictions — set_nb_parallel","text":"function switch Numba's multi-threading implementation DGP linked (D)GP predictions.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/reference/set_nb_parallel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Implement multi-threading in predictions — set_nb_parallel","text":"","code":"set_nb_parallel(obj, nb_parallel)"},{"path":"http://mingdeyu.github.io/dgpsi-R/reference/set_nb_parallel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Implement multi-threading in predictions — set_nb_parallel","text":"obj object produced emulator() lgp() nb_parallel TRUE switch Numba's multi-threading implementation FALSE switch .","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/reference/set_nb_parallel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Implement multi-threading in predictions — set_nb_parallel","text":"object DGP linked (D)GP Numba's multi-threading implementation switched .","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/reference/set_nb_parallel.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Implement multi-threading in predictions — set_nb_parallel","text":"See examples Articles https://mingdeyu.github.io/dgpsi-R.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/reference/set_nb_parallel.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Implement multi-threading in predictions — set_nb_parallel","text":"One can switch Numba's multi-threading implementation prediction constructing DGP linked (D)GP objectives emulator() lgp(). function useful one wants change implementation prediction DGP linked (D)GP objectives already built.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/reference/summary.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary of constructed GP, DGP, and linked (D)GP structures — summary","title":"Summary of constructed GP, DGP, and linked (D)GP structures — summary","text":"function summarizes key information GP, DGP, linked (D)GP structures.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/reference/summary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary of constructed GP, DGP, and linked (D)GP structures — summary","text":"","code":"summary(obj)"},{"path":"http://mingdeyu.github.io/dgpsi-R/reference/summary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary of constructed GP, DGP, and linked (D)GP structures — summary","text":"obj can one following: * object produced kernel(). * object produced gp() (either applying train()). * object produced dgp() applying train(). * object produced emulator(). * object produced lgp().","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/reference/summary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summary of constructed GP, DGP, and linked (D)GP structures — summary","text":"table summarizing key information contained obj.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/reference/summary.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Summary of constructed GP, DGP, and linked (D)GP structures — summary","text":"See examples Articles https://mingdeyu.github.io/dgpsi-R.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/reference/trace_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot of DGP model parameter traces — trace_plot","title":"Plot of DGP model parameter traces — trace_plot","text":"function plots traces model parameters particular GP node trained DGP hierarchy.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/reference/trace_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot of DGP model parameter traces — trace_plot","text":"","code":"trace_plot(   obj,   layer_no,   ker_no,   width = 4,   height = 1,   ticksize = 5,   labelsize = 8,   hspace = 0.1 )"},{"path":"http://mingdeyu.github.io/dgpsi-R/reference/trace_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot of DGP model parameter traces — trace_plot","text":"obj DGP object produced train() function. layer_no index interested layer. ker_no index interested GP layer specified layer_no. width overall plot width. Defaults 4. height overall plot height. Defaults 1. ticksize size sub-plot ticks. Defaults 5. labelsize font size y labels. Defaults 8. hspace space sub-plots. Defaults 0.1.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/reference/trace_plot.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot of DGP model parameter traces — trace_plot","text":"See examples Articles https://mingdeyu.github.io/dgpsi-R.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/reference/train.html","id":null,"dir":"Reference","previous_headings":"","what":"Training of GP and DGP — train","title":"Training of GP and DGP — train","text":"function trains GP DGP model constructed gp() dgp() function.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/reference/train.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Training of GP and DGP — train","text":"","code":"train(obj, N = 500, ess_burn = 10, disable = FALSE)"},{"path":"http://mingdeyu.github.io/dgpsi-R/reference/train.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Training of GP and DGP — train","text":"obj GP DGP model produced gp() dgp() function. N number iterations stochastic EM. Defaults 500. used obj DGP object. ess_burn number burnin steps ESS-within-Gibbs -step SEM. Defaults 10. used obj DGP object. disable (bool, optional): whether disable training progress bar. Defaults FALSE. used obj DGP object.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/reference/train.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Training of GP and DGP — train","text":"Updated GP DGP object used GP DGP predictions.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/reference/train.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Training of GP and DGP — train","text":"See examples Articles https://mingdeyu.github.io/dgpsi-R.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/reference/train.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Training of GP and DGP — train","text":"function can re-applied returned trained DGP object continue training DGP model additional number SEM iterations.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/reference/write.html","id":null,"dir":"Reference","previous_headings":"","what":"Save the constructed emulator object — write","title":"Save the constructed emulator object — write","text":"function saves constructed emulator .pkl file.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/reference/write.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Save the constructed emulator object — write","text":"","code":"write(obj, pkl_file)"},{"path":"http://mingdeyu.github.io/dgpsi-R/reference/write.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Save the constructed emulator object — write","text":"obj emulator object. GP, one produced gp() (either applying train()). DGP, can one produced dgp() (either applying train()), one produced emulator(). linked (D)GP, one produced lgp(). pkl_file path name .pkl file emulator object obj saved.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/reference/write.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Save the constructed emulator object — write","text":"See examples Articles https://mingdeyu.github.io/dgpsi-R.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/news/index.html","id":"dgpsi-212","dir":"Changelog","previous_headings":"","what":"dgpsi 2.1.2","title":"dgpsi 2.1.2","text":"Initial release R interface Python package dgpsi v2.1.2.","code":""}]
