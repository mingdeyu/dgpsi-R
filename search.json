[{"path":"http://mingdeyu.github.io/dgpsi-R/articles/dgpsi.html","id":"load-the-package","dir":"Articles","previous_headings":"","what":"Load the package","title":"A Quick Guide to dgpsi","text":"dgpsi R provides initialization function init_py() helps us set initialize required Python environment automatically. just need run init_py() every time package loaded initiate underlying Python environment.","code":"library(dgpsi) init_py() ## The Python environment for dgpsi is successfully loaded."},{"path":"http://mingdeyu.github.io/dgpsi-R/articles/dgpsi.html","id":"set-up-the-step-function","dir":"Articles","previous_headings":"","what":"Set up the step function","title":"A Quick Guide to dgpsi","text":"first define step function: generate ten training data points: 200 testing data points \\([0,1]\\):","code":"f <- function(x) {   if (x < 0.5) return(-1)   if (x >= 0.5) return(1) } X <- as.matrix(seq(0, 1, length = 10)) Y <- as.matrix(sapply(X, f)) test_x <- as.matrix(seq(0, 1, length = 200)) test_y <- as.matrix(sapply(test_x, f))"},{"path":"http://mingdeyu.github.io/dgpsi-R/articles/dgpsi.html","id":"training","dir":"Articles","previous_headings":"","what":"Training","title":"A Quick Guide to dgpsi","text":"now build train DGP emulator three layers: progress bar displayed shows long takes finish training. able change default settings. E.g., can set verb = 2 summary table initialized DGP emulator printed proceed training. particularly useful customized structure provided struc want check training implemented. Note want train DGP emulator m additional iterations, can simply m <- continue(m) instead rebuilding DGP emulator. trained DGP emulator can viewed using summary() function: summary table gives key information trained DGP emulator. Note auto-generated emulator nugget terms fixed 1e-6 GP nodes emulating deterministic step function (.e., like emulator interpolate training data points). prior scales (.e., variances) GP nodes first second layers fixed 1.0 GP node final layer estimated due attachment output. information change default settings construct train DGP emulator, see ?dgp. point, use write() save emulator m local file load using read() next time like make predictions emulator.","code":"m <- dgp(X, Y, depth = 3) ## Auto-generating a 3-layered DGP structure ... done ## Initializing the DGP emulator ... done ## Training the DGP emulator: ## Iteration 500: Layer 3: 100%|██████████| 500/500 [00:03<00:00, 126.27it/s] summary(m) ## +-----------+----------+------------------+-----------------+---------------+-------------------+------------+-------------------+ ## | Layer No. | Node No. |       Type       | Length-scale(s) |   Variance    |      Nugget       | Input Dims | Global Connection | ## +-----------+----------+------------------+-----------------+---------------+-------------------+------------+-------------------+ ## |  Layer 1  |  Node 1  | GP (Squared-Exp) |     [0.343]     | 1.000 (fixed) | 1.000e-06 (fixed) |    [1]     |        No         | ## |  Layer 2  |  Node 1  | GP (Squared-Exp) |     [1.125]     | 1.000 (fixed) | 1.000e-06 (fixed) |    [1]     |        [1]        | ## |  Layer 3  |  Node 1  | GP (Squared-Exp) |     [3.046]     |     0.458     | 1.000e-06 (fixed) |    [1]     |        [1]        | ## +-----------+----------+------------------+-----------------+---------------+-------------------+------------+-------------------+ ## 1. 'Input Dims' presents the indices of GP nodes in the feeding layer whose outputs are used as the input to the current GP. ## 2. 'Global Connection' indicates the dimensions (i.e., column numbers) of the global input data that are used as additional input dimensions to the current GP."},{"path":"http://mingdeyu.github.io/dgpsi-R/articles/dgpsi.html","id":"prediction","dir":"Articles","previous_headings":"","what":"Prediction","title":"A Quick Guide to dgpsi","text":"emulator ready, time make predictions : predict() function returns updated DGP emulator m contains slot named results gives posterior predictive means variances testing positions. can extract information plot emulation results check predictive performance constructed DGP emulator:","code":"m <- predict(m, x = test_x) mu <- m$results$mean # extract the predictive means  sd <- sqrt(m$results$var) # extract the predictive variance and compute the predictive standard deviations # compute predictive bounds which are two predictive standard deviations above and below the predictive means up <- mu + 2*sd  lo <- mu - 2*sd  plot(test_x, mu, type = 'l', lty = 2, lwd = 1.5, col = 'black', xlab = 'x', cex.axis = 1.3, cex.lab = 1.3, ylab = 'y', ylim = c(-1.5,1.5))  # predictive means  polygon(c(test_x, rev(test_x)), c(up,rev(lo)), col = 'grey80', border = F) # predictive bounds lines(test_x, test_y, type = 'l', col = 'cornflowerblue', lwd = 2) # Underlying truth lines(test_x, mu, type = 'l', lty = 2, lwd = 1.5, col = 'black') lines(X, Y, type = 'p', pch = 16, cex = 1) # Training data points"},{"path":"http://mingdeyu.github.io/dgpsi-R/articles/linked_DGP.html","id":"load-the-package","dir":"Articles","previous_headings":"","what":"Load the package","title":"Linked (D)GP Emulation","text":"","code":"library(dgpsi) init_py() ## The Python environment for dgpsi is successfully loaded."},{"path":"http://mingdeyu.github.io/dgpsi-R/articles/linked_DGP.html","id":"construct-two-synthetic-models-and-their-linked-model","dir":"Articles","previous_headings":"","what":"Construct two synthetic models and their linked model","title":"Linked (D)GP Emulation","text":"first define functional forms two synthetic models linked model: generate 9 training data points Model 1 13 training data points Model 2: also generate 300 testing data points \\([0,1]\\):","code":"# Model 1 f1 <- function(x) {   (sin(7.5*x)+1)/2 } # Model 2 f2 <- function(x) {   2/3*sin(2*(2*x - 1))+4/3*exp(-30*(2*(2*x-1))^2)-1/3   } # Linked Model  f12 <- function(x) {   f2(f1(x)) } # Model 1 X1 <- as.matrix(seq(0, 1, length = 9)) Y1 <- as.matrix(sapply(X1, f1)) # Model 2 X2 <- as.matrix(seq(0, 1, length = 13)) Y2 <- as.matrix(sapply(X2, f2)) # Model 1 test_x1 <- as.matrix(seq(0, 1, length = 300)) test_y1 <- as.matrix(sapply(test_x1, f1)) # Model 2 test_x2 <- as.matrix(seq(0, 1, length = 300)) test_y2 <- as.matrix(sapply(test_x2, f2)) # Linked Model test_y <- as.matrix(sapply(test_x1, f12))"},{"path":"http://mingdeyu.github.io/dgpsi-R/articles/linked_DGP.html","id":"emulation-of-model-1","dir":"Articles","previous_headings":"","what":"Emulation of Model 1","title":"Linked (D)GP Emulation","text":"construct train GP emulator Matérn-2.5 kernel: now make predictions trained GP emulator evaluate emulation performance Model 1 \\([0,1]\\):  Since use m1 later linked emulation, must specify links emulators feeding layer linked_idx dgp(). Since m1 first layer system, linked_idx refers column indices global input X feed intp m1, therefore set linked_idx = c(1) dgp() first constructed emulator. Instead re-training emulator provide information, can simply use set_linked_idx() add information m1:","code":"m1 <- gp(X1, Y1, name = \"matern2.5\") ## Auto-generating a GP structure: done ## Initializing the GP emulator ... done ## Training the GP emulator ... done m1 <- predict(m1, x = test_x1)  mu1 <- m1$results$mean # predictive mean sd1 <- sqrt(m1$results$var) # predictive standard deviations up1 <- mu1 + 2*sd1 # predictive upper bound lo1 <- mu1 - 2*sd1 # predictive lower bound  plot(test_x1, mu1, type = 'l', lty = 2, lwd = 1.5, col = 'black', xlab = 'x1', cex.axis = 1, cex.lab = 1, ylab = 'y1 (x2)', ylim = c(-0.2,1.2))  # predictive means  polygon(c(test_x1, rev(test_x1)), c(up1,rev(lo1)), col = 'grey80', border = F) # predictive bounds lines(test_x1, test_y1, type = 'l', col = 'cornflowerblue', lwd = 2) # Underlying truth lines(test_x1, mu1, type = 'l', lty = 2, lwd = 1.5, col = 'black') lines(X1, Y1, type = 'p', pch = 16, cex = 1) # Training data points m1 <- set_linked_idx(m1, c(1))"},{"path":"http://mingdeyu.github.io/dgpsi-R/articles/linked_DGP.html","id":"emulation-of-model-2","dir":"Articles","previous_headings":"","what":"Emulation of Model 2","title":"Linked (D)GP Emulation","text":"construct two-layered DGP emulator Matérn-2.5 kernels emulate Model 2: Since outputs emulators first layer m1 outputs feed m2, set linked_idx = c(1) dgp() . following plot visualizes emulation performance trained DGP emulator m2:","code":"m2 <- dgp(X2, Y2, depth = 2, name = \"matern2.5\", linked_idx = c(1)) ## Auto-generating a 2-layered DGP structure ... done ## Initializing the DGP emulator ... done ## Training the DGP emulator: ## Iteration 500: Layer 2: 100%|██████████| 500/500 [00:02<00:00, 236.81it/s] # make predictions m2 <- predict(m2, x = test_x2)  mu2 <- m2$results$mean sd2 <- sqrt(m2$results$var) up2 <- mu2 + 2*sd2 lo2 <- mu2 - 2*sd2  plot(test_x2, mu2, type = 'l', lty = 2, lwd = 1.5, col = 'black', xlab = 'x2 (y1)', cex.axis = 1, cex.lab = 1, ylab = 'y2', ylim = c(-1.2,1.7))  # predictive means  polygon(c(test_x2, rev(test_x2)), c(up2, rev(lo2)), col = 'grey80', border = F) # predictive bounds lines(test_x2, test_y2, type = 'l', col = 'cornflowerblue', lwd = 2) # underlying truth lines(test_x2, mu2, type = 'l', lty = 2, lwd = 1.5, col = 'black') lines(X2, Y2, type = 'p', pch = 16, cex = 1) # training data points"},{"path":"http://mingdeyu.github.io/dgpsi-R/articles/linked_DGP.html","id":"emulation-of-model-1-model-2","dir":"Articles","previous_headings":"","what":"Emulation of Model 1 + Model 2","title":"Linked (D)GP Emulation","text":"GP emulator m1 (Model 1) DGP emulator m2 (Model 2) hand, now ready build linked emulator first using combine() construct system hierarchy struc applying lgp() linked emulator. Note layer emulator system represented list. case, one GP emulator first layer DGP emulator second layer. Therefore, need put corresponding emulators list using list(). can check relations connected emulators applying summary() m_link: comparison, construct GP emulator whole system generating 13 training data points Model 1 Model 2: final step, make predictions GP emulator linked emulator: plot predictions compare emulation performances:  can seen plot linked emulator outperforms GP emulator significantly better mean predictions predictive uncertainties.","code":"struc <- combine(list(m1), list(m2)) m_link <- lgp(struc) summary(m_link) ## +-----------+--------------+------+----------------------------+-----------------+ ## | Layer No. | Emulator No. | Type |         Connection         | External Inputs | ## +-----------+--------------+------+----------------------------+-----------------+ ## |  Layer 1  |    Emu 1     |  GP  |     Global input: [1]      |       No        | ## |  Layer 2  |    Emu 1     | DGP  | Emu 1 in Layer 1: output 1 |       No        | ## +-----------+--------------+------+----------------------------+-----------------+ ## 1. 'Connection' gives the indices of emulators and the associated output dimensions that are linked to the current emulator. ## 2. 'External Inputs' indicates if the current emulator has external inputs that are not provided by the feeding emulators. X_gp <- as.matrix(seq(0, 1, length = 13)) Y_gp <- as.matrix(sapply(X_gp, f12)) m_gp <- gp(X_gp, Y_gp, name = 'matern2.5') ## Auto-generating a GP structure: done ## Initializing the GP emulator ... done ## Training the GP emulator ... done # linked emulator m_link <- predict(m_link, x = test_x1) # GP emulator m_gp <- predict(m_gp, x = test_x1) # extract predictive means and variances from the linked emulator mu <- m_link$results$mean$emulator1 sd <- sqrt(m_link$results$var$emulator1) up <- mu + 2*sd lo <- mu - 2*sd  # extract predictive means and variances from the GP emulator mu_gp <- m_gp$results$mean sd_gp <- sqrt(m_gp$results$var) up_gp <- mu_gp + 2*sd_gp lo_gp <- mu_gp - 2*sd_gp  par(cex=0.7, mar = c(5, 5, 0.9, 0.9)+0.2) # GP emulator par(fig = c(0, 0.5, 0.2, 0.8)) plot(test_x1, mu_gp, type = 'l', lty = 2, lwd = 1.5, col = 'black', main = \"GP Emulator\", xlab = 'x1', ylab = 'y2', ylim=c(-1.7,1.7)) polygon(c(test_x1, rev(test_x1)), c(up_gp, rev(lo_gp)), col = 'grey80', border = F) lines(test_x1, test_y, type = 'l', col = 'cornflowerblue', lwd = 2)  lines(test_x1, mu_gp, type = 'l', lty = 2, lwd = 1.5, col = 'black') # linked emulator par(fig = c(0.5, 1, 0.2, 0.8), new = TRUE) plot(test_x1, mu, type = 'l', lty = 2, lwd = 1.5, col = 'black', main = \"Linked Emulator\", xlab = 'x1', ylab = 'y2', ylim=c(-1.7,1.7)) polygon(c(test_x1, rev(test_x1)), c(up, rev(lo)), col = 'grey80', border = F) lines(test_x1, test_y, type = 'l', col = 'cornflowerblue', lwd = 2)  lines(test_x1, mu, type = 'l', lty = 2, lwd = 1.5, col = 'black')"},{"path":"http://mingdeyu.github.io/dgpsi-R/articles/motorcycle.html","id":"load-packages-and-data","dir":"Articles","previous_headings":"","what":"Load packages and data","title":"DGP Emulation with the Heteroskedastic Gaussian Likelihood \n","text":"start first loading package setting required Python environment via init_py() init_py() provides automatic Python environment setup initialization routine must run every time package loaded. now load training data points, scale , plot :","code":"library(dgpsi) library(MASS) init_py() ## The Python environment for dgpsi is successfully loaded. X <- mcycle$times Y <- mcycle$accel X <- as.matrix((X - min(X))/(max(X)-min(X))) Y <- as.matrix(scale(Y, center = TRUE, scale = TRUE)) plot(X, Y, pch = 16, cex = 1, xlab = 'Time', ylab = 'Acceleration', cex.axis = 1.3, cex.lab = 1.3)"},{"path":"http://mingdeyu.github.io/dgpsi-R/articles/motorcycle.html","id":"construct-and-train-a-dgp-emulator","dir":"Articles","previous_headings":"","what":"Construct and train a DGP emulator","title":"DGP Emulation with the Heteroskedastic Gaussian Likelihood \n","text":"consider three-layered DGP emulator squared exponential kernels: choose heteroskedastic Gaussian likelihood setting likelihood = \"Hetero\" since data drawn plot show varying noises. lengthscale set c(0.5, 0.2) 0.5 initial lengthscale value kernel functions GP nodes first layer 0.2 initial lengthscale value kernel functions GP nodes second layer. set verb = 2 dgp() prints table summarizes generated DGP structure can check everything specified correct proceeding training. comparison, also build GP emulator (gp()) incorporates homogeneous noises setting nugget_est = T initial nugget value \\(0.01\\). verb set 2 can check generated GP structure proceeding training: make predictions, can summarize trained DGP emulator: GP emulator:","code":"m_dgp <- dgp(X, Y, depth = 3, lengthscale = c(0.5, 0.2), likelihood = \"Hetero\", verb = 2) ## Auto-generating a 3-layered DGP structure ... done ## Initializing the DGP emulator ... done ## Summarizing the initialized DGP emulator ... done ## +-----------+----------+---------------------+-----------------+---------------+-------------------+------------+-------------------+ ## | Layer No. | Node No. |        Type         | Length-scale(s) |   Variance    |      Nugget       | Input Dims | Global Connection | ## +-----------+----------+---------------------+-----------------+---------------+-------------------+------------+-------------------+ ## |  Layer 1  |  Node 1  |  GP (Squared-Exp)   |     [0.500]     | 1.000 (fixed) | 1.000e-06 (fixed) |    [1]     |        No         | ## |  Layer 2  |  Node 1  |  GP (Squared-Exp)   |     [0.200]     |     1.000     | 1.000e-06 (fixed) |    [1]     |        [1]        | ## |  Layer 2  |  Node 2  |  GP (Squared-Exp)   |     [0.200]     |     1.000     | 1.000e-06 (fixed) |    [1]     |        [1]        | ## |  Layer 3  |  Node 1  | Likelihood (Hetero) |       NA        |      NA       |        NA         |   [1, 2]   |        NA         | ## +-----------+----------+---------------------+-----------------+---------------+-------------------+------------+-------------------+ ## 1. 'Input Dims' presents the indices of GP nodes in the feeding layer whose outputs are used as the input to the current GP. ## 2. 'Global Connection' indicates the dimensions (i.e., column numbers) of the global input data that are used as additional input dimensions to the current GP. ## Enter [Y] to continue or [N] to cancel the training: Y ## Training the DGP emulator: ## Iteration 500: Layer 3: 100%|██████████| 500/500 [00:20<00:00, 24.24it/s] m_gp <- gp(X, Y, nugget_est = T, nugget = 1e-2, verb = 2) ## Auto-generating a GP structure: done ## Initializing the GP emulator ... done ## Summarizing the initialized GP emulator ... done ## +-------------+-----------------+----------+--------+------------+ ## | Kernel Fun  | Length-scale(s) | Variance | Nugget | Input Dims | ## +-------------+-----------------+----------+--------+------------+ ## | Squared-Exp |     [0.200]     |  1.000   | 0.010  |    [1]     | ## +-------------+-----------------+----------+--------+------------+ ## 'Input Dims' indicates the dimensions (i.e., columns) of your input data that are actually used for GP training. ## Enter [Y] to continue or [N] to cancel the training: Y ## Training the GP emulator ... done summary(m_dgp) ## +-----------+----------+---------------------+-----------------+---------------+-------------------+------------+-------------------+ ## | Layer No. | Node No. |        Type         | Length-scale(s) |   Variance    |      Nugget       | Input Dims | Global Connection | ## +-----------+----------+---------------------+-----------------+---------------+-------------------+------------+-------------------+ ## |  Layer 1  |  Node 1  |  GP (Squared-Exp)   |     [0.973]     | 1.000 (fixed) | 1.000e-06 (fixed) |    [1]     |        No         | ## |  Layer 2  |  Node 1  |  GP (Squared-Exp)   |     [0.570]     |     0.744     | 1.000e-06 (fixed) |    [1]     |        [1]        | ## |  Layer 2  |  Node 2  |  GP (Squared-Exp)   |     [0.953]     |    14.564     | 1.000e-06 (fixed) |    [1]     |        [1]        | ## |  Layer 3  |  Node 1  | Likelihood (Hetero) |       NA        |      NA       |        NA         |   [1, 2]   |        NA         | ## +-----------+----------+---------------------+-----------------+---------------+-------------------+------------+-------------------+ ## 1. 'Input Dims' presents the indices of GP nodes in the feeding layer whose outputs are used as the input to the current GP. ## 2. 'Global Connection' indicates the dimensions (i.e., column numbers) of the global input data that are used as additional input dimensions to the current GP. summary(m_gp) ## +-------------+-----------------+----------+--------+------------+ ## | Kernel Fun  | Length-scale(s) | Variance | Nugget | Input Dims | ## +-------------+-----------------+----------+--------+------------+ ## | Squared-Exp |     [0.132]     |  0.780   | 0.282  |    [1]     | ## +-------------+-----------------+----------+--------+------------+ ## 'Input Dims' indicates the dimensions (i.e., columns) of your input data that are actually used for GP training."},{"path":"http://mingdeyu.github.io/dgpsi-R/articles/motorcycle.html","id":"prediction","dir":"Articles","previous_headings":"","what":"Prediction","title":"DGP Emulation with the Heteroskedastic Gaussian Likelihood \n","text":"now ready make predictions emulators via predict() 200 testing positions \\([0,1]\\): Finally, plot predictions emulators check emulation performance:  visualization shows DGP emulator gives better performance GP emulator modeling heteroskedastic noises embedded underlying dataset.","code":"test_x <- as.matrix(seq(0, 1, length = 200)) m_dgp <- predict(m_dgp, x = test_x) m_gp <- predict(m_gp, x = test_x) # extract predictive means and variances from DGP mu_dgp <- m_dgp$results$mean # predictive means sd_dgp <- sqrt(m_dgp$results$var) # predictive variances and compute predictive standard deviations up_dgp <- mu_dgp + 2*sd_dgp # predictive upper bound lo_dgp <- mu_dgp - 2*sd_dgp # predictive lower bound  # extract predictive means and variances from GP mu_gp <- m_gp$results$mean sd_gp <- sqrt(m_gp$results$var) up_gp <- mu_gp + 2*sd_gp lo_gp <- mu_gp - 2*sd_gp  par(cex=0.7, mar = c(5, 5, 0.9, 0.9)+0.2) #GP par(fig = c(0, 0.5, 0.2, 0.8)) plot(test_x, mu_gp, type = 'l', lwd = 1.5, col = 'cornflowerblue', main = \"GP\", xlab = 'Time', ylab = 'Acceleration', ylim = c(-3.2,3.2)) polygon(c(test_x, rev(test_x)), c(up_gp, rev(lo_gp)), col = 'grey80', border = F) lines(X, Y, type = 'p',pch = 16, cex = 0.8) lines(test_x, mu_gp, type = 'l', lwd = 1.5, col = 'cornflowerblue') #DGP par(fig = c(0.5, 1, 0.2, 0.8), new = TRUE) plot(test_x, mu_dgp, type = 'l', lwd = 1.5, col = 'cornflowerblue', main = \"DGP\", xlab = 'Time', ylab = 'Acceleration', ylim = c(-3.2,3.2)) polygon(c(test_x, rev(test_x)), c(up_dgp, rev(lo_dgp)), col = 'grey80', border = F) lines(X, Y, type = 'p',pch = 16, cex = 0.8) lines(test_x, mu_dgp, type = 'l', lwd = 1.5, col = 'cornflowerblue')"},{"path":[]},{"path":"http://mingdeyu.github.io/dgpsi-R/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Deyu Ming. Contributor, maintainer, copyright holder, author.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Ming, D. Guillas, S. (2021) Linked Gaussian process emulation systems computer models using Matérn kernels adaptive design, SIAM/ASA Journal Uncertainty Quantification. 9(4), 1615-1642. URL https://epubs.siam.org/doi/abs/10.1137/20M1323771. Ming, D., Williamson, D., Guillas, S. (2022) Deep Gaussian process emulation using stochastic imputation, Technometrics (appear). URL https://arxiv.org/abs/2107.01590.","code":"@Article{,   title = {Linked Gaussian process emulation for systems of computer models using Matérn kernels and adaptive design},   author = {Deyu Ming and Serge Guillas},   journal = {SIAM/ASA Journal on Uncertainty Quantification},   year = {2021},   volume = {9},   number = {4},   pages = {1615--1642},   url = {https://epubs.siam.org/doi/abs/10.1137/20M1323771}, } @Article{,   title = {Deep Gaussian process emulation using stochastic imputation},   author = {Deyu Ming and Daniel Williamson and Serge Guillas},   journal = {Technometrics (to appear)},   year = {2022},   url = {https://arxiv.org/abs/2107.01590}, }"},{"path":"http://mingdeyu.github.io/dgpsi-R/index.html","id":"dgpsi-r","dir":"","previous_headings":"","what":"R Interface to dgpsi","title":"R Interface to dgpsi","text":"R package dgpsi provides R interface Python package dgpsi deep linked Gaussian process emulations. package currently following features: multiple layers; multiple GP nodes; separable non-separable squared exponential Matérn-2.5 kernels; global input connections; non-Gaussian likelihoods (Poisson, Negative-Binomial, heteroskedastic Gaussian, come); linking GP emulators deterministic individual computer models; linking GP DGP emulators deterministic individual computer models; Multi-core predictions GP, DGP, Linked (D)GP emulators.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/index.html","id":"documentation","dir":"","previous_headings":"","what":"Documentation","title":"R Interface to dgpsi","text":"See https://mingdeyu.github.io/dgpsi-R learn package.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"R Interface to dgpsi","text":"now, can install package GitHub repo (way CRAN): RStudio Console, type: package depends {reticulate} {benchmarkme}. Restart RStudio. Load package initialize required Python environment:","code":"devtools::install_github('mingdeyu/dgpsi-R') library(dgpsi) init_py()"},{"path":"http://mingdeyu.github.io/dgpsi-R/index.html","id":"references","dir":"","previous_headings":"","what":"References","title":"R Interface to dgpsi","text":"Ming, D., Williamson, D., Guillas, S. (2022) Deep Gaussian process emulation using stochastic imputation. Technometrics (appear). Ming, D. Guillas, S. (2021) Linked Gaussian process emulation systems computer models using Matérn kernels adaptive design, SIAM/ASA Journal Uncertainty Quantification. 9(4), 1615-1642.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/reference/Hetero.html","id":null,"dir":"Reference","previous_headings":"","what":"Initialize a heteroskedastic Gaussian likelihood node — Hetero","title":"Initialize a heteroskedastic Gaussian likelihood node — Hetero","text":"function constructs likelihood object represent heteroskedastic Gaussian likelihood node.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/reference/Hetero.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Initialize a heteroskedastic Gaussian likelihood node — Hetero","text":"","code":"Hetero(input_dim = NULL)"},{"path":"http://mingdeyu.github.io/dgpsi-R/reference/Hetero.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initialize a heteroskedastic Gaussian likelihood node — Hetero","text":"input_dim vector length two contains indices two GP nodes feeding layer whose outputs feed likelihood node. set NULL, outputs GP nodes feeding layer feed likelihood node, case one needs ensure two GP nodes specified feeding layer. Defaults NULL.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/reference/Hetero.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Initialize a heteroskedastic Gaussian likelihood node — Hetero","text":"likelihood object represent heteroskedastic Gaussian likelihood node.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/reference/Hetero.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Initialize a heteroskedastic Gaussian likelihood node — Hetero","text":"See examples Articles https://mingdeyu.github.io/dgpsi-R/.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/reference/Hetero.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Initialize a heteroskedastic Gaussian likelihood node — Hetero","text":"heteroskedastic Gaussian likelihood node can linked two feeding GP nodes.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/reference/NegBin.html","id":null,"dir":"Reference","previous_headings":"","what":"Initialize a negative Binomial likelihood node — NegBin","title":"Initialize a negative Binomial likelihood node — NegBin","text":"function constructs likelihood object represent negative Binomial likelihood node.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/reference/NegBin.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Initialize a negative Binomial likelihood node — NegBin","text":"","code":"NegBin(input_dim = NULL)"},{"path":"http://mingdeyu.github.io/dgpsi-R/reference/NegBin.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initialize a negative Binomial likelihood node — NegBin","text":"input_dim vector length two contains indices two GP nodes feeding layer whose outputs feed likelihood node. set NULL, outputs GP nodes feeding layer feed likelihood node, case one needs ensure two GP nodes specified feeding layer. Defaults NULL.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/reference/NegBin.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Initialize a negative Binomial likelihood node — NegBin","text":"likelihood object represent negative Binomial likelihood node.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/reference/NegBin.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Initialize a negative Binomial likelihood node — NegBin","text":"See examples Articles https://mingdeyu.github.io/dgpsi-R/.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/reference/NegBin.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Initialize a negative Binomial likelihood node — NegBin","text":"negative Binomial likelihood node can linked two feeding GP nodes.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/reference/Poisson.html","id":null,"dir":"Reference","previous_headings":"","what":"Initialize a Poisson likelihood node — Poisson","title":"Initialize a Poisson likelihood node — Poisson","text":"function constructs likelihood object represent Poisson likelihood node.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/reference/Poisson.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Initialize a Poisson likelihood node — Poisson","text":"","code":"Poisson(input_dim = NULL)"},{"path":"http://mingdeyu.github.io/dgpsi-R/reference/Poisson.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initialize a Poisson likelihood node — Poisson","text":"input_dim vector length one contains indices one GP node feeding layer whose outputs feed likelihood node. set NULL, outputs GP nodes feeding layer feed likelihood node, case one needs ensure one GP node specified feeding layer. Defaults NULL.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/reference/Poisson.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Initialize a Poisson likelihood node — Poisson","text":"likelihood object represent Poisson likelihood node.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/reference/Poisson.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Initialize a Poisson likelihood node — Poisson","text":"See examples Articles https://mingdeyu.github.io/dgpsi-R/.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/reference/Poisson.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Initialize a Poisson likelihood node — Poisson","text":"Poisson likelihood node can linked one feeding GP node.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/reference/combine.html","id":null,"dir":"Reference","previous_headings":"","what":"Combine layers — combine","title":"Combine layers — combine","text":"function combines customized layers DGP linked (D)GP structure.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/reference/combine.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Combine layers — combine","text":"","code":"combine(...)"},{"path":"http://mingdeyu.github.io/dgpsi-R/reference/combine.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Combine layers — combine","text":"... sequence lists: DGP emulations, list represents DGP layer contains GP nodes (produced kernel()), likelihood nodes (produced Poisson(), Hetero(), NegBin()). linked (D)GP emulations, list represents system layer contains emulators (produced gp() dgp()) layer.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/reference/combine.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Combine layers — combine","text":"list defining DGP structure (struc dgp()) linked (D)GP structure (struc lgp()).","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/reference/combine.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Combine layers — combine","text":"See examples Articles https://mingdeyu.github.io/dgpsi-R/.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/reference/continue.html","id":null,"dir":"Reference","previous_headings":"","what":"Continue the training of a DGP emulator — continue","title":"Continue the training of a DGP emulator — continue","text":"function implements additional training iterations DGP emulator.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/reference/continue.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Continue the training of a DGP emulator — continue","text":"","code":"continue(object, N = 500, ess_burn = 10, verb = TRUE, burnin = NULL, B = 50)"},{"path":"http://mingdeyu.github.io/dgpsi-R/reference/continue.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Continue the training of a DGP emulator — continue","text":"object instance dgp class. N additional number iterations DGP emulator training. Defaults 500. ess_burn number burnin steps ESS-within-Gibbs -step training. Defaults 10. verb bool indicating progress bar printed training: FALSE: training progress bar displayed. TRUE: training progress bar displayed. Defaults TRUE. burnin number training iterations discarded point estimates calculation. Must smaller overall training iterations -far implemented. specified, last 25% iterations used. overrides value burnin set dgp(). Defaults NULL. B number imputations produce predictions. Increase value account imputation uncertainties. overrides value B set dgp(). Defaults 50.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/reference/continue.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Continue the training of a DGP emulator — continue","text":"updated object.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/reference/continue.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Continue the training of a DGP emulator — continue","text":"See examples Articles https://mingdeyu.github.io/dgpsi-R/.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/reference/dgp.html","id":null,"dir":"Reference","previous_headings":"","what":"Deep Gaussian process emulator construction — dgp","title":"Deep Gaussian process emulator construction — dgp","text":"function builds trains DGP emulator.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/reference/dgp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Deep Gaussian process emulator construction — dgp","text":"","code":"dgp(   X,   Y,   struc = NULL,   depth = 2,   name = \"sexp\",   lengthscale = 1,   nugget_est = FALSE,   nugget = 1e-06,   connect = TRUE,   likelihood = NULL,   verb = 1,   check_rep = TRUE,   rff = FALSE,   M = NULL,   N = 500,   ess_burn = 10,   burnin = NULL,   B = 50,   internal_input_idx = NULL,   linked_idx = NULL )"},{"path":"http://mingdeyu.github.io/dgpsi-R/reference/dgp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Deep Gaussian process emulator construction — dgp","text":"X matrix row input training data point column input dimension. Y matrix containing observed training output data. matrix rows output data points columns output dimensions. likelihood (see ) NULL, Y must matrix one column. struc list specifies user-defined DGP structure. contain L (number DGP layers) sub-lists, represents layer contains number GP nodes (defined kernel()) corresponding layer. final layer DGP structure (.e., final sub-list struc) can likelihood layer contains likelihood function (e.g., Poisson()). struc = NULL, DGP structure automatically generated summarized table dgp() executed verb (see ) set 2. argument used (.e., user provides customized DGP structure), arguments depth, name, lengthscale, nugget_est, nugget, connect, likelihood, internal_input_idx used. Defaults NULL. depth number layers (including likelihood layer) DGP structure. depth must least 2. Defaults 2. argument used struc = NULL. name kernel function used. Either \"sexp\" squared exponential kernel \"matern2.5\" Matérn-2.5 kernel. Defaults \"sexp\". argument used struc = NULL. lengthscale initial lengthscales GP nodes DGP emulator. can single numeric value vector: single numeric value, value applied initial lengthscales GP nodes DGP hierarchy. vector, element vector specifies initial lengthscales applied GP nodes corresponding layer. vector length depth likelihood = NULL length depth - 1 likelihood NULL. Defaults numeric value 1.0. argument used struc = NULL. nugget_est bool bool vector indicates nuggets GP nodes () final layer estimated. single bool provided, applied GP nodes () final layer. bool vector (must length ncol(Y)) provided, bool element vector applied corresponding GP node () final layer. value bool following effects: FALSE: nugget corresponding GP final layer fixed corresponding value defined nugget (see ). TRUE: nugget corresponding GP final layer estimated initial value given correspondence nugget (see ). Defaults FALSE. argument used struc = NULL. nugget initial nugget value(s) GP nodes () final layer. single numeric value, applied GP nodes () final layer. vector (must length ncol(Y)), numeric vector applied corresponding GP node () final layer. Set nugget small value corresponding bool nugget_est FASLE deterministic emulations emulator interpolates training data points. Set nugget reasonable larger value corresponding bool nugget_est TRUE stochastic emulations computer model outputs assumed follow homogeneous Gaussian distribution. Defaults 1e-6. argument used struc = NULL. connect bool indicating whether implement global input connection DGP structure. Defaults TRUE. argument used struc = NULL. likelihood likelihood type DGP emulator: NULL: likelihood layer included emulator. \"Hetero\": heteroskedastic likelihood layer added stochastic emulation computer model outputs assumed follow heteroskedastic Gaussian distribution (.e., computer model outputs varying noises). \"Poisson\": Poisson likelihood layer added stochastic emulation computer model outputs assumed Poisson distribution. \"NegBin\": negative Binomial likelihood layer added stochastic emulation computer model outputs assumed follow negative Binomial distribution. likelihood NULL, values nugget_est nugget overridden FALSE 1e-6 respectively. Defaults NULL. argument used struc = NULL. verb integer indicating level information printed function execution: 2: trace information DGP initialization summary table initialized DGP emulator. 1: information 2 except summary table. 0: trace information summary table. verb = 2, chance check specified DGP emulator (especially customized struc provided) decide want proceed training. Defaults 1. check_rep bool indicating whether check repetitions dataset, .e., one input position multiple outputs. Defaults TRUE. rff bool indicating whether use random Fourier features approximate correlation matrices training. Turning option help accelerate training training data relatively large may reduce quality resulting emulator. Defaults FALSE. M number features used random Fourier approximation. used rff set TRUE. Defaults NULL. NULL, M automatically set max(100, ceiling(sqrt(nrow(X))*log(nrow(X))))). N number iterations training. Defaults 500. ess_burn number burnin steps ESS-within-Gibbs -step training. Defaults 10. burnin number training iterations discarded point estimate calculation. Must smaller SEM iterations implemented. specified, last 25% iterations used. Defaults NULL. B number imputations produce later predictions. Increase value account imputation uncertainties. Decrease value lower imputation uncertainties faster predictions. Defaults 50. internal_input_idx column indices X generated linked emulators feeding layer. Set internal_input_idx = NULL DGP emulator linked emulator (e.g., DGP emulator first layer system) columns X generated linked emulators feeding layer. Defaults NULL. argument used struc = NULL. linked_idx indices columns pooled output matrix (formed column-combined outputs emulators feeding layer) feed DGP emulator. length linked_idx shall equal length internal_input_idx internal_input_idx NULL. Set linked_idx = NULL DGP emulator intended linked emulations. DGP emulator first layer system, linked_idx gives column indices global input (formed column-combining input matrices emulators first layer) DGP emulator use. Defaults NULL.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/reference/dgp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Deep Gaussian process emulator construction — dgp","text":"S3 class named dgp can used predict() DGP predictions. continue() implement additional DGP training iterations. lgp() construct linked (D)GP emulators.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/reference/dgp.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Deep Gaussian process emulator construction — dgp","text":"See examples Articles https://mingdeyu.github.io/dgpsi-R/ learn customize DGP structure.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/reference/gp.html","id":null,"dir":"Reference","previous_headings":"","what":"Gaussian process emulator construction — gp","title":"Gaussian process emulator construction — gp","text":"function builds trains GP emulator.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/reference/gp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gaussian process emulator construction — gp","text":"","code":"gp(   X,   Y,   struc = NULL,   name = \"sexp\",   lengthscale = rep(0.2, ncol(X)),   nugget_est = FALSE,   nugget = 1e-06,   verb = 1,   internal_input_idx = NULL,   linked_idx = NULL )"},{"path":"http://mingdeyu.github.io/dgpsi-R/reference/gp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Gaussian process emulator construction — gp","text":"X matrix row input data point column input dimension. Y matrix one column row input data point. struc object produced kernel() gives user-defined GP specifications. struc = NULL, GP specifications automatically generated using information provided name, lengthscale, nugget_est, nugget, internal_input_idx. Defaults NULL. name kernel function used. Either \"sexp\" squared exponential kernel \"matern2.5\" Matérn-2.5 kernel. Defaults \"sexp\". argument used struc = NULL. lengthscale initial values lengthscales kernel function. can single numeric value vector: single numeric value, assumed kernel functions across input dimensions share lengthscale; vector (must length ncol(X)), assumed kernel functions across input dimensions different lengthscales. Defaults vector 0.2. argument used struc = NULL. nugget_est bool indicating nugget term estimated: FALSE: nugget term fixed $1e-6$ deterministic emulation emulator interpolates training data points. TRUE: nugget term estimated stochastic emulation computer model outputs assumed follow homogeneous Gaussian distribution. Defaults FALSE. argument used struc = NULL. nugget initial nugget value. nugget_est = FALSE, assigned value fixed training. Defaults 1e-6. verb integer indicating level information printed function execution: 2: trace information GP initialization summary table initialized GP emulator. 1: information 2 except summary table. 0: trace information summary table. verb = 2, chance check specified GP emulator (especially customized struc provided) decide want proceed training. Defaults 1. internal_input_idx column indices X generated linked emulators feeding layer. Set internal_input_idx = NULL GP emulator linked emulator (e.g., GP emulator first layer system) columns X generated linked emulators feeding layer. Defaults NULL. argument used struc = NULL. linked_idx indices columns pooled output matrix (formed column-combined outputs emulators feeding layer) feed GP emulator. length linked_idx shall equal length internal_input_idx internal_input_idx NULL. Set linked_idx = NULL GP emulator intended linked emulations. GP emulator first layer system, linked_idx gives column indices global input (formed column-combining input matrices emulators first layer) GP emulator use. Defaults NULL.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/reference/gp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Gaussian process emulator construction — gp","text":"S3 class named gp can used predict() GP predictions. lgp() construct linked (D)GP emulators.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/reference/gp.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Gaussian process emulator construction — gp","text":"See examples Articles https://mingdeyu.github.io/dgpsi-R/.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/reference/init_py.html","id":null,"dir":"Reference","previous_headings":"","what":"Initialize the Python environment — init_py","title":"Initialize the Python environment — init_py","text":"Initialize Python environment","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/reference/init_py.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Initialize the Python environment — init_py","text":"","code":"init_py()"},{"path":"http://mingdeyu.github.io/dgpsi-R/reference/init_py.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Initialize the Python environment — init_py","text":"See examples Articles https://mingdeyu.github.io/dgpsi-R/.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/reference/kernel.html","id":null,"dir":"Reference","previous_headings":"","what":"Initialize a Gaussian process node — kernel","title":"Initialize a Gaussian process node — kernel","text":"function constructs kernel object represent properties Gaussian process node.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/reference/kernel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Initialize a Gaussian process node — kernel","text":"","code":"kernel(   length,   scale = 1,   nugget = 1e-06,   name = \"sexp\",   prior_name = \"ga\",   prior_coef = c(1.6, 0.3),   nugget_est = FALSE,   scale_est = FALSE,   input_dim = NULL,   connect = NULL )"},{"path":"http://mingdeyu.github.io/dgpsi-R/reference/kernel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initialize a Gaussian process node — kernel","text":"length vector lengthscales. length vector equals : either one lengthscales kernel function assumed across input dimensions; total number input dimensions, sum number feeding GP nodes last layer (defined argument input_dim) number connected global input dimensions (defined argument connect), lengthscales kernel function assumed different across input dimensions. scale variance GP node. Defaults 1. nugget nugget term GP node. Defaults 1e-6. name kernel function used. Either \"sexp\" squared exponential kernel \"matern2.5\" Matérn-2.5 kernel. Defaults \"sexp\". prior_name prior options lengthscales nugget term. Either gamma (\"ga\") inverse gamma (\"inv_ga\") distribution lengthscales nugget term. Set NULL disable prior. Defaults \"ga\". prior_coef vector contains two values specifying shape rate parameters gamma prior, shape scale parameters inverse gamma prior. Defaults c(1.6,0.3). nugget_est set TRUE estimate nugget term FALSE fix nugget term specified argument nugget. set TRUE, value set argument nugget used initial value. Defaults FALSE. scale_est set TRUE estimate variance (.e., scale) FALSE fix variance (.e., scale) specified argument scale. Defaults FALSE. input_dim vector contains either indices GP nodes feeding layer whose outputs feed GP node; indices global input dimensions linked outputs feeding emulators, GP node first layer GP DGP, used linked emulation. set NULL, outputs GP nodes feeding layer feed GP node; global input dimensions feed GP node. Defaults NULL. connect vector contains indices dimensions global input connecting GP node additional input dimensions. set NULL, global input connection implemented. Defaults NULL. GP node first layer GP DGP emulator, consequently used linked emulation, connect gives indices global input dimensions connected feeding emulators. case, set input_dim vector indices remaining input dimensions connected feeding emulators.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/reference/kernel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Initialize a Gaussian process node — kernel","text":"kernel object represent GP node.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/reference/kernel.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Initialize a Gaussian process node — kernel","text":"See examples Articles https://mingdeyu.github.io/dgpsi-R/.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/reference/lgp.html","id":null,"dir":"Reference","previous_headings":"","what":"Linked (D)GP emulator construction — lgp","title":"Linked (D)GP emulator construction — lgp","text":"function constructs linked (D)GP emulator.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/reference/lgp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Linked (D)GP emulator construction — lgp","text":"","code":"lgp(struc, B = 50)"},{"path":"http://mingdeyu.github.io/dgpsi-R/reference/lgp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Linked (D)GP emulator construction — lgp","text":"struc list contains L (number layers systems computer models) sub-lists, represents layer contains (D)GP emulators (represented instances S3 class gp dgp) computer models. sub-lists placed list order specified computer model system's hierarchy. B number imputations produce predictions. Increase value account imputation uncertainties. Decrease value lower imputation uncertainties faster predictions. system consists GP emulators, B set 1 automatically. Defaults 50.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/reference/lgp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Linked (D)GP emulator construction — lgp","text":"S3 class named lgp used predict() linked (D)GP predictions.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/reference/lgp.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Linked (D)GP emulator construction — lgp","text":"See examples Articles https://mingdeyu.github.io/dgpsi-R/.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/reference/nllik.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate negative predicted log-likelihood — nllik","title":"Calculate negative predicted log-likelihood — nllik","text":"function computes negative predicted log-likelihood DGP emulator likelihood layer.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/reference/nllik.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate negative predicted log-likelihood — nllik","text":"","code":"nllik(object, x, y)"},{"path":"http://mingdeyu.github.io/dgpsi-R/reference/nllik.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate negative predicted log-likelihood — nllik","text":"object instance dgp class produced dgp() one following two settings: struc = NULL, likelihood NULL; customized structure provided struc, final layer must likelihood layer containing one likelihood node produced Poisson(), Hetero(), NegBin(). x matrix row input testing data point column input dimension. y matrix one column row scalar-valued testing output data point.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/reference/nllik.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate negative predicted log-likelihood — nllik","text":"updated object returned additional slot named NLL contains two elements. first one, named meanNLL, scalar gives average negative predicted log-likelihood across testing data points. second one, named allNLL, vector gives negative predicted log-likelihood testing data point.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/reference/nllik.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate negative predicted log-likelihood — nllik","text":"See examples Articles https://mingdeyu.github.io/dgpsi-R/.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/reference/predict.html","id":null,"dir":"Reference","previous_headings":"","what":"Predictions from GP, DGP, or linked (D)GP emulators — predict","title":"Predictions from GP, DGP, or linked (D)GP emulators — predict","text":"function implements single-core multi-core predictions (without multi-threading) GP, DGP, linked (D)GP emulators.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/reference/predict.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Predictions from GP, DGP, or linked (D)GP emulators — predict","text":"","code":"# S3 method for dgp predict(   object,   x,   method = \"mean_var\",   full_layer = FALSE,   sample_size = 50,   cores = 1,   chunks = NULL,   threading = FALSE,   ... )  # S3 method for lgp predict(   object,   x,   method = \"mean_var\",   full_layer = FALSE,   sample_size = 50,   cores = 1,   chunks = NULL,   threading = FALSE,   ... )  # S3 method for gp predict(   object,   x,   method = \"mean_var\",   sample_size = 50,   cores = 1,   chunks = NULL,   ... )"},{"path":"http://mingdeyu.github.io/dgpsi-R/reference/predict.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Predictions from GP, DGP, or linked (D)GP emulators — predict","text":"object instance gp, dgp, lgp class. x testing input data: object instance gp dgp class, x matrix row input testing data point column input dimension. object instance lgp class, x can matrix list: x matrix, global testing input data feed emulators first layer system. rows x represent different input data points columns represent input dimensions across emulators first layer system. case, assumed global input system input emulators first layer global input emulators layers. x list, L (number layers emulator system) elements. first element matrix represents global testing input data feed emulators first layer system. remaining L-1 elements L-1 sub-lists, contains number (number emulators corresponding layer) matrices (rows testing input data points columns input dimensions) represent global testing input data emulators corresponding layer. matrices must placed sub-lists based corresponding emulators placed struc argument lgp(). global input data certain emulator, set NULL corresponding sub-list x. method prediction approach: mean-variance (\"mean_var\") sampling (\"sampling\") approach. Defaults \"mean_var\". full_layer bool indicating whether output predictions layers. Defaults FALSE. used object DGP linked (D)GP emulator. sample_size number samples draw given imputation method = \"sampling\". Defaults 50. cores number cores/workers used. set NULL, number cores set (max physical cores available - 1). Defaults 1. chunks number chunks testing input matrix x divided multi-cores work . used cores 1. specified (.e., chunks = NULL), number chunks set value cores. Defaults NULL. threading bool indicating whether use multi-threading accelerate predictions DGP linked (D)GP emulators. Turn option moderately large number training data points case gain faster predictions. Defaults FALSE. ... N/.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/reference/predict.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Predictions from GP, DGP, or linked (D)GP emulators — predict","text":"object instance gp class: method = \"mean_var\": updated object returned additional slot called results contains two matrices named mean predictive means var predictive variances. matrix one column rows corresponding testing positions (.e., rows x). method = \"sampling\": updated object returned additional slot called results contains matrix whose rows correspond testing positions columns correspond sample_size number samples drawn predictive distribution GP. object instance dgp class: method = \"mean_var\"  full_layer = FALSE: updated object returned additional slot called results contains two matrices named mean predictive means var predictive variances respectively. matrix rows corresponding testing positions columns corresponding DGP global output dimensions (.e., number GP/likelihood nodes final layer). method = \"mean_var\"  full_layer = TRUE: updated object returned additional slot called results contains two sub-lists named mean predictive means var predictive variances respectively. sub-list contains L (.e., number layers) matrices named layer1, layer2,..., layerL. matrix rows corresponding testing positions columns corresponding output dimensions (.e., number GP/likelihood nodes associated layer). method = \"sampling\"  full_layer = FALSE: updated object returned additional slot called results contains D (.e., number GP/likelihood nodes final layer) matrices named output1, output2,..., outputD. matrix rows corresponding testing positions columns corresponding samples size: B * sample_size, B number imputations specified dgp(). method = \"sampling\"  full_layer = TRUE: updated object returned additional slot called results contains L (.e., number layers) sub-lists named layer1, layer2,..., layerL. sub-list represents samples drawn GP/likelihood nodes corresponding layer, contains D (.e., number GP/likelihood nodes corresponding layer) matrices named output1, output2,..., outputD. matrix gives samples output one D GP/likelihood nodes, rows corresponding testing positions columns corresponding samples size: B * sample_size, B number imputations specified dgp(). object instance lgp class: method = \"mean_var\"  full_layer = FALSE: updated object returned additional slot called results contains two sub-lists named mean predictive means var predictive variances respectively. sub-list contains M number (number emulators final layer system) matrices named emulator1, emulator2,..., emulatorM. matrix rows corresponding global testing positions columns corresponding output dimensions associated emulator final layer. method = \"mean_var\"  full_layer = TRUE: updated object returned additional slot called results contains two sub-lists named mean predictive means var predictive variances respectively. sub-list contains L (.e., number layers emulated system) components named layer1, layer2,..., layerL. component represents layer contains M number (number emulators corresponding layer system) matrices named emulator1, emulator2,..., emulatorM. matrix rows corresponding global testing positions columns corresponding output dimensions associated GP/DGP emulator corresponding layer. method = \"sampling\"  full_layer = FALSE: updated object returned additional slot called results contains M number (number emulators final layer system) sub-lists named emulator1, emulator2,..., emulatorM. sub-list corresponds emulator final layer, contains D matrices, named output1, output2,..., outputD, correspond output dimensions GP/DGP emulator. matrix rows corresponding testing positions columns corresponding samples size: B * sample_size, B number imputations specified lgp(). method = \"sampling\"  full_layer = TRUE: updated object returned additional slot called results contains L (.e., number layers emulated system) sub-lists named layer1, layer2,..., layerL. sub-list represents layer contains M number (number emulators corresponding layer system) components named emulator1, emulator2,..., emulatorM. component corresponds emulator associated layer, contains D matrices, named output1, output2,..., outputD, correspond output dimensions GP/DGP emulator. matrix rows corresponding testing positions columns corresponding samples size: B * sample_size, B number imputations specified lgp().","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/reference/predict.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Predictions from GP, DGP, or linked (D)GP emulators — predict","text":"See examples Articles https://mingdeyu.github.io/dgpsi-R/.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/reference/read.html","id":null,"dir":"Reference","previous_headings":"","what":"Load the stored emulator — read","title":"Load the stored emulator — read","text":"function loads .pkl file stores emulator.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/reference/read.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load the stored emulator — read","text":"","code":"read(pkl_file)"},{"path":"http://mingdeyu.github.io/dgpsi-R/reference/read.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load the stored emulator — read","text":"pkl_file path name .pkl file emulator stored.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/reference/read.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Load the stored emulator — read","text":"GP, DGP linked (D)GP emulator S3 class.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/reference/read.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Load the stored emulator — read","text":"See examples Articles https://mingdeyu.github.io/dgpsi-R/.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/reference/set_linked_idx.html","id":null,"dir":"Reference","previous_headings":"","what":"Set linked indices — set_linked_idx","title":"Set linked indices — set_linked_idx","text":"function sets linked indices GP DGP emulator information provided emulator constructed gp() dgp().","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/reference/set_linked_idx.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set linked indices — set_linked_idx","text":"","code":"set_linked_idx(object, idx)"},{"path":"http://mingdeyu.github.io/dgpsi-R/reference/set_linked_idx.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set linked indices — set_linked_idx","text":"object instance S3 class gp dgp. idx indices columns pooled output matrix (formed column-combining outputs emulators feeding layer) feed GP DGP emulator represented object.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/reference/set_linked_idx.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set linked indices — set_linked_idx","text":"updated object information idx incorporated.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/reference/set_linked_idx.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Set linked indices — set_linked_idx","text":"See examples Articles https://mingdeyu.github.io/dgpsi-R/.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/reference/set_linked_idx.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Set linked indices — set_linked_idx","text":"function useful different models emulated different teams. team can create (D)GP emulator even without knowing different emulators connected together. information available different emulators collected, connection information emulators can assigned individual emulators function.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/reference/summary.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary of a constructed GP, DGP, or linked (D)GP emulator — summary","title":"Summary of a constructed GP, DGP, or linked (D)GP emulator — summary","text":"function summarizes key information GP, DGP linked (D)GP emulator.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/reference/summary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary of a constructed GP, DGP, or linked (D)GP emulator — summary","text":"","code":"# S3 method for gp summary(object, ...)  # S3 method for dgp summary(object, ...)  # S3 method for lgp summary(object, ...)"},{"path":"http://mingdeyu.github.io/dgpsi-R/reference/summary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary of a constructed GP, DGP, or linked (D)GP emulator — summary","text":"object can one following: S3 class gp. S3 class dgp. S3 class lgp. ... N/.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/reference/summary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summary of a constructed GP, DGP, or linked (D)GP emulator — summary","text":"table summarizing key information contained object.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/reference/summary.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Summary of a constructed GP, DGP, or linked (D)GP emulator — summary","text":"See examples Articles https://mingdeyu.github.io/dgpsi-R/.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/reference/trace_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot of DGP model parameter traces — trace_plot","title":"Plot of DGP model parameter traces — trace_plot","text":"function plots traces model parameters chosen GP node DGP emulator.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/reference/trace_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot of DGP model parameter traces — trace_plot","text":"","code":"trace_plot(   object,   layer = NULL,   node = 1,   width = 4,   height = 1,   ticksize = 5,   labelsize = 8,   hspace = 0.1 )"},{"path":"http://mingdeyu.github.io/dgpsi-R/reference/trace_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot of DGP model parameter traces — trace_plot","text":"object instance dgp class. layer index layer. Defaults NULL final layer. node index GP node layer specified layer. Defaults 1 first GP node corresponding layer. width overall plot width. Defaults 4. height overall plot height. Defaults 1. ticksize size sub-plot ticks. Defaults 5. labelsize font size y labels. Defaults 8. hspace space sub-plots. Defaults 0.1.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/reference/trace_plot.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot of DGP model parameter traces — trace_plot","text":"See examples Articles https://mingdeyu.github.io/dgpsi-R/.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/reference/write.html","id":null,"dir":"Reference","previous_headings":"","what":"Save the constructed emulator — write","title":"Save the constructed emulator — write","text":"function saves constructed emulator .pkl file.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/reference/write.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Save the constructed emulator — write","text":"","code":"write(object, pkl_file)"},{"path":"http://mingdeyu.github.io/dgpsi-R/reference/write.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Save the constructed emulator — write","text":"object instance S3 class gp, dgp, lgp. pkl_file path name .pkl file emulator object saved.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/reference/write.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Save the constructed emulator — write","text":"See examples Articles https://mingdeyu.github.io/dgpsi-R/.","code":""},{"path":"http://mingdeyu.github.io/dgpsi-R/news/index.html","id":"dgpsi-212","dir":"Changelog","previous_headings":"","what":"dgpsi 2.1.2","title":"dgpsi 2.1.2","text":"Initial release R interface Python package dgpsi v2.1.2.","code":""}]
