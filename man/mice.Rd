% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/mice.R
\name{mice}
\alias{mice}
\alias{mice.gp}
\alias{mice.dgp}
\alias{mice.bundle}
\title{Locate the next design point for a (D)GP emulator or a bundle of (D)GP emulators using MICE}
\usage{
mice(object, ...)

\method{mice}{gp}(
  object,
  x_cand = NULL,
  n_cand = 200,
  batch_size = 1,
  M = 50,
  nugget_s = 1e-06,
  workers = 1,
  limits = NULL,
  int = FALSE,
  ...
)

\method{mice}{dgp}(
  object,
  x_cand = NULL,
  n_cand = 200,
  batch_size = 1,
  M = 50,
  nugget_s = 1e-06,
  workers = 1,
  limits = NULL,
  int = FALSE,
  aggregate = NULL,
  ...
)

\method{mice}{bundle}(
  object,
  x_cand = NULL,
  n_cand = 200,
  batch_size = 1,
  M = 50,
  nugget_s = 1e-06,
  workers = 1,
  limits = NULL,
  int = FALSE,
  aggregate = NULL,
  ...
)
}
\arguments{
\item{object}{can be one of the following:
\itemize{
\item the S3 class \code{gp}.
\item the S3 class \code{dgp}.
\item the S3 class \code{bundle}.
}}

\item{...}{any arguments (with names different from those of arguments used in \code{\link[=mice]{mice()}}) that are used by \code{aggregate}
can be passed here.}

\item{x_cand}{a matrix (with each row containing a design point and column representing an input dimension) that gives a candidate set
from which the next design point(s) are determined. If \code{object} is an instance of the \code{bundle} class and \code{aggregate} is not supplied, \code{x_cand} could also
be a list with length equal to the number of emulators contained in \code{object}. In this case, each slot in \code{x_cand} should be a candidate set matrix
for each emulator included in the bundle. Defaults to \code{NULL}.}

\item{n_cand}{an integer that gives the size of the candidate set to be generated from which the next design point is determined. This argument
is only used when \code{x_cand} is \code{NULL}. Defaults to \code{200}.}

\item{batch_size}{an integer that gives the number of design points to be chosen.
Defaults to \code{1}.}

\item{M}{\ifelse{html}{\href{https://lifecycle.r-lib.org/articles/stages.html#new}{\figure{lifecycle-new.svg}{options: alt='[New]'}}}{\strong{[New]}} the size of the conditioning set for the Vecchia approximation in the criterion calculation. This argument is only used if the emulator \code{object}
was constructed under the Vecchia approximation. Defaults to \code{50}.}

\item{nugget_s}{the value of the smoothing nugget term used by MICE. Defaults to \code{1e-6}.}

\item{workers}{the number of processes to be used for the criterion calculation. If set to \code{NULL},
the number of processes is set to \verb{max physical cores available \%/\% 2}. Defaults to \code{1}.}

\item{limits}{a two-column matrix that gives the ranges of each input dimension, or a vector of length two if there is only one input dimension.
If a vector is provided, it will be converted to a two-column row matrix. The rows of the matrix correspond to input dimensions, and its
first and second columns correspond to the minimum and maximum values of the input dimensions. This
argument is only used when \code{x_cand = NULL}. Defaults to \code{NULL}.}

\item{int}{a bool or a vector of bools that indicates if an input dimension is an integer type. If a single bool is given, it will be applied to
all input dimensions. If a vector is provided, it should have a length equal to the input dimensions and will be applied to individual
input dimensions. This argument is only used when \code{x_cand = NULL}. Defaults to \code{FALSE}.}

\item{aggregate}{an R function that aggregates scores of the MICE across different output dimensions (if \code{object} is an instance
of the \code{dgp} class) or across different emulators (if \code{object} is an instance of the \code{bundle} class). The function should be specified in the
following basic form:
\itemize{
\item the first argument is a matrix representing scores. The rows of the matrix correspond to different design points. The number of columns
of the matrix equals to:
\itemize{
\item the emulator output dimension if \code{object} is an instance of the \code{dgp} class; or
\item the number of emulators contained in \code{object} if \code{object} is an instance of the \code{bundle} class.
}
\item the output should be a vector that gives aggregations of scores at different design points.
}

Set to \code{NULL} to disable the aggregation. Defaults to \code{NULL}.}
}
\value{
\enumerate{
\item If \code{x_cand} is not \code{NULL} and:
\itemize{
\item \code{object} is an instance of the \code{gp} class, a vector is returned with length equal to \code{batch_size}, giving the positions (i.e., row numbers)
of next design points from \code{x_cand}.
\item \code{object} is an instance of the \code{dgp} class, a vector is returned with length equal to \code{batch_size * D}, giving positions (i.e., row numbers)
of next design points from \code{x_cand} to be added to the DGP emulator. \code{D} equals to the number of output dimensions of the DGP
emulator if there is no likelihood layer in the hierarchy. If \code{object} is a DGP emulator with either \code{Hetero} or \code{NegBin} likelihood layer,
\code{D = 2}. If \code{object} is a DGP emulator with a \code{Categorical} likelihood layer, \code{D} equals to one (for binary output) or \code{K} (for multi-class output with \code{K} classes).
\item \code{object} is an instance of the \code{bundle} class, a matrix is returned with row number equal to \code{batch_size} and column number equal to the number of
emulators in the bundle, giving positions (i.e., row numbers) of next design points from \code{x_cand} to be added to individual emulators.
}
\item If \code{x_cand = NULL} and:
\itemize{
\item \code{object} is an instance of the \code{gp} class, a matrix is returned with row number equal to \code{batch_size}, giving the next design points to be evaluated.
\item \code{object} is an instance of the \code{dgp} class, a matrix is returned with row number equal to \code{batch_size * D} where \code{D} is the number of output dimensions of the DGP
emulator if no likelihood layer is included. If \code{object} is a DGP emulator with either \code{Hetero} or \code{NegBin} likelihood layer, \code{D = 2}. If \code{object} is a DGP emulator
with a \code{Categorical} likelihood layer, \code{D} equals to one (for binary output) or \code{K} (for multi-class output with \code{K} classes).
\item \code{object} is an instance of the \code{bundle} class, a list is returned with the length equal to the number of
emulators in the bundle. Each element in the list is a matrix with row number equal to \code{batch_size}, giving next design points to be added to individual emulators.
}
}
}
\description{
This function searches from a candidate set to locate the next design point(s) to be added to a (D)GP emulator
or a bundle of (D)GP emulators using the Mutual Information for Computer Experiments (MICE), see the reference below.
}
\details{
See further examples and tutorials at \url{https://mingdeyu.github.io/dgpsi-R/}.
}
\note{
The column order of the first argument of \code{aggregate} must be consistent with the order of emulator output dimensions (if \code{object} is an instance of the
\code{dgp} class), or the order of emulators placed in \code{object} if \code{object} is an instance of the \code{bundle} class.
}
\examples{
\dontrun{

# load packages and the Python env
library(lhs)
library(dgpsi)

# construct a 1D non-stationary function
f <- function(x) {
 sin(30*((2*x-1)/2-0.4)^5)*cos(20*((2*x-1)/2-0.4))
}

# generate the initial design
X <- maximinLHS(10,1)
Y <- f(X)

# training a 2-layered DGP emulator with the global connection off
m <- dgp(X, Y, connect = F)

# generate a candidate set
x_cand <- maximinLHS(200,1)

# locate the next design point using MICE
next_point <- mice(m, x_cand = x_cand)
X_new <- x_cand[next_point,,drop = F]

# obtain the corresponding output at the located design point
Y_new <- f(X_new)

# combine the new input-output pair to the existing data
X <- rbind(X, X_new)
Y <- rbind(Y, Y_new)

# update the DGP emulator with the new input and output data and refit
m <- update(m, X, Y, refit = TRUE)

# plot the LOO validation
plot(m)
}
}
\references{
Beck, J., & Guillas, S. (2016). Sequential design with mutual information for computer experiments (MICE): emulation of a tsunami model.
\emph{SIAM/ASA Journal on Uncertainty Quantification}, \strong{4(1)}, 739-766.
}
